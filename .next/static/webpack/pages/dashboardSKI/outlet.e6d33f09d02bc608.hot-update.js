/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/dashboardSKI/outlet",{

/***/ "./node_modules/arangojs/analyzer.js":
/*!*******************************************!*\
  !*** ./node_modules/arangojs/analyzer.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Analyzer = exports.isArangoAnalyzer = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"./node_modules/arangojs/error.js\");\nconst codes_1 = __webpack_require__(/*! ./lib/codes */ \"./node_modules/arangojs/lib/codes.js\");\n/**\n * Indicates whether the given value represents an {@link Analyzer}.\n *\n * @param analyzer - A value that might be an Analyzer.\n */\nfunction isArangoAnalyzer(analyzer) {\n    return Boolean(analyzer && analyzer.isArangoAnalyzer);\n}\nexports.isArangoAnalyzer = isArangoAnalyzer;\n/**\n * Represents an Analyzer in a {@link Database}.\n */\nclass Analyzer {\n    /**\n     * @internal\n     * @hidden\n     */\n    constructor(db, name) {\n        this._db = db;\n        this._name = name.normalize(\"NFC\");\n    }\n    /**\n     * @internal\n     *\n     * Indicates that this object represents an ArangoDB Analyzer.\n     */\n    get isArangoAnalyzer() {\n        return true;\n    }\n    /**\n     * Name of this Analyzer.\n     *\n     * See also {@link Database.analyzer}.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * Checks whether the Analyzer exists.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const analyzer = db.analyzer(\"some-analyzer\");\n     * const result = await analyzer.exists();\n     * // result indicates whether the Analyzer exists\n     * ```\n     */\n    async exists() {\n        try {\n            await this.get();\n            return true;\n        }\n        catch (err) {\n            if (error_1.isArangoError(err) && err.errorNum === codes_1.ANALYZER_NOT_FOUND) {\n                return false;\n            }\n            throw err;\n        }\n    }\n    /**\n     * Retrieves the Analyzer definition for the Analyzer.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const analyzer = db.analyzer(\"some-analyzer\");\n     * const definition = await analyzer.get();\n     * // definition contains the Analyzer definition\n     * ```\n     */\n    get() {\n        return this._db.request({ path: `/_api/analyzer/${encodeURIComponent(this._name)}` }, (res) => res.body);\n    }\n    /**\n     * Creates a new Analyzer with the given `options` and the instance's name.\n     *\n     * See also {@link Database.createAnalyzer}.\n     *\n     * @param options - Options for creating the Analyzer.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const analyzer = db.analyzer(\"potatoes\");\n     * await analyzer.create({ type: \"identity\" });\n     * // the identity Analyzer \"potatoes\" now exists\n     * ```\n     */\n    create(options) {\n        return this._db.request({\n            method: \"POST\",\n            path: \"/_api/analyzer\",\n            body: { name: this._name, ...options },\n        }, (res) => res.body);\n    }\n    /**\n     * Deletes the Analyzer from the database.\n     *\n     * @param force - Whether the Analyzer should still be deleted even if it\n     * is currently in use.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const analyzer = db.analyzer(\"some-analyzer\");\n     * await analyzer.drop();\n     * // the Analyzer \"some-analyzer\" no longer exists\n     * ```\n     */\n    drop(force = false) {\n        return this._db.request({\n            method: \"DELETE\",\n            path: `/_api/analyzer/${encodeURIComponent(this._name)}`,\n            qs: { force },\n        }, (res) => res.body);\n    }\n}\nexports.Analyzer = Analyzer;\n//# sourceMappingURL=analyzer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXJhbmdvanMvYW5hbHl6ZXIuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCLEdBQUcsd0JBQXdCO0FBQzNDLGdCQUFnQixtQkFBTyxDQUFDLGlEQUFTO0FBQ2pDLGdCQUFnQixtQkFBTyxDQUFDLHlEQUFhO0FBQ3JDO0FBQ0Esb0RBQW9ELGVBQWU7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0EsZ0NBQWdDLGVBQWU7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLHdCQUF3QjtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0Msd0JBQXdCLCtCQUErQixHQUFHO0FBQzVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLDhCQUE4QjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixrQkFBa0I7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsOEJBQThCO0FBQ2xELFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsK0JBQStCO0FBQ25FLGtCQUFrQixPQUFPO0FBQ3pCLFNBQVM7QUFDVDtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9hcmFuZ29qcy9hbmFseXplci5qcz8zMDgyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5BbmFseXplciA9IGV4cG9ydHMuaXNBcmFuZ29BbmFseXplciA9IHZvaWQgMDtcbmNvbnN0IGVycm9yXzEgPSByZXF1aXJlKFwiLi9lcnJvclwiKTtcbmNvbnN0IGNvZGVzXzEgPSByZXF1aXJlKFwiLi9saWIvY29kZXNcIik7XG4vKipcbiAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBnaXZlbiB2YWx1ZSByZXByZXNlbnRzIGFuIHtAbGluayBBbmFseXplcn0uXG4gKlxuICogQHBhcmFtIGFuYWx5emVyIC0gQSB2YWx1ZSB0aGF0IG1pZ2h0IGJlIGFuIEFuYWx5emVyLlxuICovXG5mdW5jdGlvbiBpc0FyYW5nb0FuYWx5emVyKGFuYWx5emVyKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4oYW5hbHl6ZXIgJiYgYW5hbHl6ZXIuaXNBcmFuZ29BbmFseXplcik7XG59XG5leHBvcnRzLmlzQXJhbmdvQW5hbHl6ZXIgPSBpc0FyYW5nb0FuYWx5emVyO1xuLyoqXG4gKiBSZXByZXNlbnRzIGFuIEFuYWx5emVyIGluIGEge0BsaW5rIERhdGFiYXNlfS5cbiAqL1xuY2xhc3MgQW5hbHl6ZXIge1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihkYiwgbmFtZSkge1xuICAgICAgICB0aGlzLl9kYiA9IGRiO1xuICAgICAgICB0aGlzLl9uYW1lID0gbmFtZS5ub3JtYWxpemUoXCJORkNcIik7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqXG4gICAgICogSW5kaWNhdGVzIHRoYXQgdGhpcyBvYmplY3QgcmVwcmVzZW50cyBhbiBBcmFuZ29EQiBBbmFseXplci5cbiAgICAgKi9cbiAgICBnZXQgaXNBcmFuZ29BbmFseXplcigpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE5hbWUgb2YgdGhpcyBBbmFseXplci5cbiAgICAgKlxuICAgICAqIFNlZSBhbHNvIHtAbGluayBEYXRhYmFzZS5hbmFseXplcn0uXG4gICAgICovXG4gICAgZ2V0IG5hbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9uYW1lO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgQW5hbHl6ZXIgZXhpc3RzLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IGRiID0gbmV3IERhdGFiYXNlKCk7XG4gICAgICogY29uc3QgYW5hbHl6ZXIgPSBkYi5hbmFseXplcihcInNvbWUtYW5hbHl6ZXJcIik7XG4gICAgICogY29uc3QgcmVzdWx0ID0gYXdhaXQgYW5hbHl6ZXIuZXhpc3RzKCk7XG4gICAgICogLy8gcmVzdWx0IGluZGljYXRlcyB3aGV0aGVyIHRoZSBBbmFseXplciBleGlzdHNcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBhc3luYyBleGlzdHMoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLmdldCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgaWYgKGVycm9yXzEuaXNBcmFuZ29FcnJvcihlcnIpICYmIGVyci5lcnJvck51bSA9PT0gY29kZXNfMS5BTkFMWVpFUl9OT1RfRk9VTkQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIHRoZSBBbmFseXplciBkZWZpbml0aW9uIGZvciB0aGUgQW5hbHl6ZXIuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgZGIgPSBuZXcgRGF0YWJhc2UoKTtcbiAgICAgKiBjb25zdCBhbmFseXplciA9IGRiLmFuYWx5emVyKFwic29tZS1hbmFseXplclwiKTtcbiAgICAgKiBjb25zdCBkZWZpbml0aW9uID0gYXdhaXQgYW5hbHl6ZXIuZ2V0KCk7XG4gICAgICogLy8gZGVmaW5pdGlvbiBjb250YWlucyB0aGUgQW5hbHl6ZXIgZGVmaW5pdGlvblxuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RiLnJlcXVlc3QoeyBwYXRoOiBgL19hcGkvYW5hbHl6ZXIvJHtlbmNvZGVVUklDb21wb25lbnQodGhpcy5fbmFtZSl9YCB9LCAocmVzKSA9PiByZXMuYm9keSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgQW5hbHl6ZXIgd2l0aCB0aGUgZ2l2ZW4gYG9wdGlvbnNgIGFuZCB0aGUgaW5zdGFuY2UncyBuYW1lLlxuICAgICAqXG4gICAgICogU2VlIGFsc28ge0BsaW5rIERhdGFiYXNlLmNyZWF0ZUFuYWx5emVyfS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgY3JlYXRpbmcgdGhlIEFuYWx5emVyLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBgYGBqc1xuICAgICAqIGNvbnN0IGRiID0gbmV3IERhdGFiYXNlKCk7XG4gICAgICogY29uc3QgYW5hbHl6ZXIgPSBkYi5hbmFseXplcihcInBvdGF0b2VzXCIpO1xuICAgICAqIGF3YWl0IGFuYWx5emVyLmNyZWF0ZSh7IHR5cGU6IFwiaWRlbnRpdHlcIiB9KTtcbiAgICAgKiAvLyB0aGUgaWRlbnRpdHkgQW5hbHl6ZXIgXCJwb3RhdG9lc1wiIG5vdyBleGlzdHNcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBjcmVhdGUob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGIucmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICAgICAgcGF0aDogXCIvX2FwaS9hbmFseXplclwiLFxuICAgICAgICAgICAgYm9keTogeyBuYW1lOiB0aGlzLl9uYW1lLCAuLi5vcHRpb25zIH0sXG4gICAgICAgIH0sIChyZXMpID0+IHJlcy5ib2R5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVsZXRlcyB0aGUgQW5hbHl6ZXIgZnJvbSB0aGUgZGF0YWJhc2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZm9yY2UgLSBXaGV0aGVyIHRoZSBBbmFseXplciBzaG91bGQgc3RpbGwgYmUgZGVsZXRlZCBldmVuIGlmIGl0XG4gICAgICogaXMgY3VycmVudGx5IGluIHVzZS5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBkYiA9IG5ldyBEYXRhYmFzZSgpO1xuICAgICAqIGNvbnN0IGFuYWx5emVyID0gZGIuYW5hbHl6ZXIoXCJzb21lLWFuYWx5emVyXCIpO1xuICAgICAqIGF3YWl0IGFuYWx5emVyLmRyb3AoKTtcbiAgICAgKiAvLyB0aGUgQW5hbHl6ZXIgXCJzb21lLWFuYWx5emVyXCIgbm8gbG9uZ2VyIGV4aXN0c1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIGRyb3AoZm9yY2UgPSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGIucmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXG4gICAgICAgICAgICBwYXRoOiBgL19hcGkvYW5hbHl6ZXIvJHtlbmNvZGVVUklDb21wb25lbnQodGhpcy5fbmFtZSl9YCxcbiAgICAgICAgICAgIHFzOiB7IGZvcmNlIH0sXG4gICAgICAgIH0sIChyZXMpID0+IHJlcy5ib2R5KTtcbiAgICB9XG59XG5leHBvcnRzLkFuYWx5emVyID0gQW5hbHl6ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hbmFseXplci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/arangojs/analyzer.js\n");

/***/ }),

/***/ "./node_modules/arangojs/aql.js":
/*!**************************************!*\
  !*** ./node_modules/arangojs/aql.js ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.aql = exports.isAqlLiteral = exports.isGeneratedAqlQuery = exports.isAqlQuery = void 0;\n/**\n * ```js\n * import { aql } from \"arangojs/aql\";\n * ```\n *\n * The \"aql\" module provides the {@link aql} template string handler and\n * helper functions, as well as associated types and interfaces for TypeScript.\n *\n * The aql function and namespace is also re-exported by the \"index\" module.\n *\n * @packageDocumentation\n */\nconst collection_1 = __webpack_require__(/*! ./collection */ \"./node_modules/arangojs/collection.js\");\nconst graph_1 = __webpack_require__(/*! ./graph */ \"./node_modules/arangojs/graph.js\");\nconst view_1 = __webpack_require__(/*! ./view */ \"./node_modules/arangojs/view.js\");\n/**\n * Indicates whether the given value is an {@link AqlQuery}.\n *\n * @param query - A value that might be an `AqlQuery`.\n */\nfunction isAqlQuery(query) {\n    return Boolean(query && typeof query.query === \"string\" && query.bindVars);\n}\nexports.isAqlQuery = isAqlQuery;\n/**\n * Indicates whether the given value is a {@link GeneratedAqlQuery}.\n *\n * @param query - A value that might be a `GeneratedAqlQuery`.\n *\n * @internal\n * @hidden\n */\nfunction isGeneratedAqlQuery(query) {\n    return isAqlQuery(query) && typeof query._source === \"function\";\n}\nexports.isGeneratedAqlQuery = isGeneratedAqlQuery;\n/**\n * Indicates whether the given value is an {@link AqlLiteral}.\n *\n * @param literal - A value that might be an `AqlLiteral`.\n */\nfunction isAqlLiteral(literal) {\n    return Boolean(literal && typeof literal.toAQL === \"function\");\n}\nexports.isAqlLiteral = isAqlLiteral;\n/**\n * Template string handler (template tag) for AQL queries.\n *\n * The `aql` tag can be used to write complex AQL queries as multi-line strings\n * without having to worry about `bindVars` and the distinction between\n * collections and regular parameters.\n *\n * Tagged template strings will return an {@link AqlQuery} object with\n * `query` and `bindVars` attributes reflecting any interpolated values.\n *\n * Any {@link ArangoCollection} instance used in a query string will be\n * recognized as a collection reference and generate an AQL collection bind\n * parameter instead of a regular AQL value bind parameter.\n *\n * **Note**: you should always use the `aql` template tag when writing\n * dynamic AQL queries instead of using untagged (normal) template strings.\n * Untagged template strings will inline any interpolated values and return\n * a plain string as result. The `aql` template tag will only inline references\n * to the interpolated values and produce an AQL query object containing both\n * the query and the values. This prevents most injection attacks when using\n * untrusted values in dynamic queries.\n *\n * @example\n * ```js\n * // Some user-supplied string that may be malicious\n * const untrustedValue = req.body.email;\n *\n * // Without aql tag: BAD! DO NOT DO THIS!\n * const badQuery = `\n *   FOR user IN users\n *   FILTER user.email == \"${untrustedValue}\"\n *   RETURN user\n * `;\n * // e.g. if untrustedValue is '\" || user.admin == true || \"':\n * // Query:\n * //   FOR user IN users\n * //   FILTER user.email == \"\" || user.admin == true || \"\"\n * //   RETURN user\n *\n * // With the aql tag: GOOD! MUCH SAFER!\n * const betterQuery = aql`\n *   FOR user IN users\n *   FILTER user.email == ${untrustedValue}\n *   RETURN user\n * `;\n * // Query:\n * //   FOR user IN users\n * //   FILTER user.email == @value0\n * //   RETURN user\n * // Bind parameters:\n * //   value0 -> untrustedValue\n * ```\n *\n * @example\n * ```js\n * const collection = db.collection(\"some-collection\");\n * const minValue = 23;\n * const result = await db.query(aql`\n *   FOR d IN ${collection}\n *   FILTER d.num > ${minValue}\n *   RETURN d\n * `);\n *\n * // Equivalent raw query object\n * const result2 = await db.query({\n *   query: `\n *     FOR d IN @@collection\n *     FILTER d.num > @minValue\n *     RETURN d\n *   `,\n *   bindVars: {\n *     \"@collection\": collection.name,\n *     minValue: minValue\n *   }\n * });\n * ```\n *\n * @example\n * ```js\n * const collection = db.collection(\"some-collection\");\n * const color = \"green\";\n * const filter = aql`FILTER d.color == ${color}'`;\n * const result = await db.query(aql`\n *   FOR d IN ${collection}\n *   ${filter}\n *   RETURN d\n * `);\n * ```\n */\nfunction aql(templateStrings, ...args) {\n    const strings = [...templateStrings];\n    const bindVars = {};\n    const bindValues = [];\n    let query = strings[0];\n    for (let i = 0; i < args.length; i++) {\n        const rawValue = args[i];\n        let value = rawValue;\n        if (isGeneratedAqlQuery(rawValue)) {\n            const src = rawValue._source();\n            if (src.args.length) {\n                query += src.strings[0];\n                args.splice(i, 1, ...src.args);\n                strings.splice(i, 2, strings[i] + src.strings[0], ...src.strings.slice(1, src.args.length), src.strings[src.args.length] + strings[i + 1]);\n            }\n            else {\n                query += rawValue.query + strings[i + 1];\n                args.splice(i, 1);\n                strings.splice(i, 2, strings[i] + rawValue.query + strings[i + 1]);\n            }\n            i -= 1;\n            continue;\n        }\n        if (rawValue === undefined) {\n            query += strings[i + 1];\n            continue;\n        }\n        if (isAqlLiteral(rawValue)) {\n            query += `${rawValue.toAQL()}${strings[i + 1]}`;\n            continue;\n        }\n        const index = bindValues.indexOf(rawValue);\n        const isKnown = index !== -1;\n        let name = `value${isKnown ? index : bindValues.length}`;\n        if (collection_1.isArangoCollection(rawValue) ||\n            graph_1.isArangoGraph(rawValue) ||\n            view_1.isArangoView(rawValue)) {\n            name = `@${name}`;\n            value = rawValue.name;\n        }\n        if (!isKnown) {\n            bindValues.push(rawValue);\n            bindVars[name] = value;\n        }\n        query += `@${name}${strings[i + 1]}`;\n    }\n    return {\n        query,\n        bindVars,\n        _source: () => ({ strings, args }),\n    };\n}\nexports.aql = aql;\n// eslint-disable-next-line @typescript-eslint/no-namespace\n(function (aql) {\n    /**\n     * Marks an arbitrary scalar value (i.e. a string, number or boolean) as\n     * safe for being inlined directly into AQL queries when used in an `aql`\n     * template string, rather than being converted into a bind parameter.\n     *\n     * **Note**: Nesting `aql` template strings is a much safer alternative for\n     * most use cases. This low-level helper function only exists to help with\n     * rare edge cases where a trusted AQL query fragment must be read from a\n     * string (e.g. when reading query fragments from JSON) and should only be\n     * used as a last resort.\n     *\n     * @example\n     * ```js\n     * // BAD! DO NOT DO THIS!\n     * const sortDirection = aql.literal('ASC');\n     *\n     * // GOOD! DO THIS INSTEAD!\n     * const sortDirection = aql`ASC`;\n     * ```\n     *\n     * @example\n     * ```js\n     * // BAD! DO NOT DO THIS!\n     * const filterColor = aql.literal('FILTER d.color == \"green\"');\n     * const result = await db.query(aql`\n     *   FOR d IN some-collection\n     *   ${filterColor}\n     *   RETURN d\n     * `);\n     *\n     * // GOOD! DO THIS INSTEAD!\n     * const color = \"green\";\n     * const filterColor = aql`FILTER d.color === ${color}`;\n     * const result = await db.query(aql`\n     *   FOR d IN some-collection\n     *   ${filterColor}\n     *   RETURN d\n     * `);\n     * ```\n     *\n     * @example\n     * ```js\n     * // WARNING: We explicitly trust the environment variable to be safe!\n     * const filter = aql.literal(process.env.FILTER_STATEMENT);\n     * const users = await db.query(aql`\n     *   FOR user IN users\n     *   ${filter}\n     *   RETURN user\n     * `);\n     * ```\n     */\n    function literal(value) {\n        if (isAqlLiteral(value)) {\n            return value;\n        }\n        return {\n            toAQL() {\n                if (value === undefined) {\n                    return \"\";\n                }\n                return String(value);\n            },\n        };\n    }\n    aql.literal = literal;\n    /**\n     * Constructs {@link AqlQuery} objects from an array of arbitrary values.\n     *\n     * **Note**: Nesting `aql` template strings is a much safer alternative\n     * for most use cases. This low-level helper function only exists to\n     * complement the `aql` tag when constructing complex queries from dynamic\n     * arrays of query fragments.\n     *\n     * @param values - Array of values to join. These values will behave exactly\n     * like values interpolated in an `aql` template string.\n     * @param sep - Seperator to insert between values. This value will behave\n     * exactly like a value passed to {@link aql.literal}, i.e. it will be\n     * inlined as-is, rather than being converted into a bind parameter.\n     *\n     * @example\n     * ```js\n     * const users = db.collection(\"users\");\n     * const filters = [];\n     * if (adminsOnly) filters.push(aql`FILTER user.admin`);\n     * if (activeOnly) filters.push(aql`FILTER user.active`);\n     * const result = await db.query(aql`\n     *   FOR user IN ${users}\n     *   ${aql.join(filters)}\n     *   RETURN user\n     * `);\n     * ```\n     *\n     * @example\n     * ```js\n     * const users = db.collection(\"users\");\n     * const keys = [\"jreyes\", \"ghermann\"];\n     *\n     * // BAD! NEEDLESSLY COMPLEX!\n     * const docs = keys.map(key => aql`DOCUMENT(${users}, ${key}`));\n     * const result = await db.query(aql`\n     *   FOR user IN [\n     *     ${aql.join(docs, \", \")}\n     *   ]\n     *   RETURN user\n     * `);\n     * // Query:\n     * //   FOR user IN [\n     * //     DOCUMENT(@@value0, @value1), DOCUMENT(@@value0, @value2)\n     * //   ]\n     * //   RETURN user\n     * // Bind parameters:\n     * //   @value0 -> \"users\"\n     * //   value1 -> \"jreyes\"\n     * //   value2 -> \"ghermann\"\n     *\n     * // GOOD! MUCH SIMPLER!\n     * const result = await db.query(aql`\n     *   FOR key IN ${keys}\n     *   LET user = DOCUMENT(${users}, key)\n     *   RETURN user\n     * `);\n     * // Query:\n     * //   FOR user IN @value0\n     * //   LET user = DOCUMENT(@@value1, key)\n     * //   RETURN user\n     * // Bind parameters:\n     * //   value0 -> [\"jreyes\", \"ghermann\"]\n     * //   @value1 -> \"users\"\n     * ```\n     */\n    function join(values, sep = \" \") {\n        if (!values.length) {\n            return aql ``;\n        }\n        if (values.length === 1) {\n            return aql `${values[0]}`;\n        }\n        return aql([\"\", ...Array(values.length - 1).fill(sep), \"\"], ...values);\n    }\n    aql.join = join;\n})(aql = exports.aql || (exports.aql = {}));\n//# sourceMappingURL=aql.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/arangojs/aql.js\n");

/***/ }),

/***/ "./node_modules/arangojs/collection.js":
/*!*********************************************!*\
  !*** ./node_modules/arangojs/collection.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Collection = exports.CollectionStatus = exports.CollectionType = exports.collectionToString = exports.isArangoCollection = void 0;\nconst cursor_1 = __webpack_require__(/*! ./cursor */ \"./node_modules/arangojs/cursor.js\");\nconst documents_1 = __webpack_require__(/*! ./documents */ \"./node_modules/arangojs/documents.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"./node_modules/arangojs/error.js\");\nconst indexes_1 = __webpack_require__(/*! ./indexes */ \"./node_modules/arangojs/indexes.js\");\nconst codes_1 = __webpack_require__(/*! ./lib/codes */ \"./node_modules/arangojs/lib/codes.js\");\n/**\n * Indicates whether the given value represents an {@link ArangoCollection}.\n *\n * @param collection - A value that might be a collection.\n */\nfunction isArangoCollection(collection) {\n    return Boolean(collection && collection.isArangoCollection);\n}\nexports.isArangoCollection = isArangoCollection;\n/**\n * Coerces the given collection name or {@link ArangoCollection} object to\n * a string representing the collection name.\n *\n * @param collection - Collection name or {@link ArangoCollection} object.\n */\nfunction collectionToString(collection) {\n    if (isArangoCollection(collection)) {\n        return String(collection.name);\n    }\n    else\n        return String(collection).normalize(\"NFC\");\n}\nexports.collectionToString = collectionToString;\n/**\n * Integer values indicating the collection type.\n */\nvar CollectionType;\n(function (CollectionType) {\n    CollectionType[CollectionType[\"DOCUMENT_COLLECTION\"] = 2] = \"DOCUMENT_COLLECTION\";\n    CollectionType[CollectionType[\"EDGE_COLLECTION\"] = 3] = \"EDGE_COLLECTION\";\n})(CollectionType = exports.CollectionType || (exports.CollectionType = {}));\n/**\n * Integer values indicating the collection loading status.\n */\nvar CollectionStatus;\n(function (CollectionStatus) {\n    CollectionStatus[CollectionStatus[\"NEWBORN\"] = 1] = \"NEWBORN\";\n    CollectionStatus[CollectionStatus[\"UNLOADED\"] = 2] = \"UNLOADED\";\n    CollectionStatus[CollectionStatus[\"LOADED\"] = 3] = \"LOADED\";\n    CollectionStatus[CollectionStatus[\"UNLOADING\"] = 4] = \"UNLOADING\";\n    CollectionStatus[CollectionStatus[\"DELETED\"] = 5] = \"DELETED\";\n    CollectionStatus[CollectionStatus[\"LOADING\"] = 6] = \"LOADING\";\n})(CollectionStatus = exports.CollectionStatus || (exports.CollectionStatus = {}));\n/**\n * @internal\n * @hidden\n */\nclass Collection {\n    //#endregion\n    /**\n     * @internal\n     * @hidden\n     */\n    constructor(db, name) {\n        this._name = name.normalize(\"NFC\");\n        this._db = db;\n    }\n    //#region internals\n    _get(path, qs) {\n        return this._db.request({\n            path: `/_api/collection/${encodeURIComponent(this._name)}/${path}`,\n            qs,\n        }, (res) => res.body);\n    }\n    _put(path, body) {\n        return this._db.request({\n            method: \"PUT\",\n            path: `/_api/collection/${encodeURIComponent(this._name)}/${path}`,\n            body,\n        }, (res) => res.body);\n    }\n    //#endregion\n    //#region metadata\n    get isArangoCollection() {\n        return true;\n    }\n    get name() {\n        return this._name;\n    }\n    get() {\n        return this._db.request({ path: `/_api/collection/${encodeURIComponent(this._name)}` }, (res) => res.body);\n    }\n    async exists() {\n        try {\n            await this.get();\n            return true;\n        }\n        catch (err) {\n            if (error_1.isArangoError(err) && err.errorNum === codes_1.COLLECTION_NOT_FOUND) {\n                return false;\n            }\n            throw err;\n        }\n    }\n    create(options) {\n        const { waitForSyncReplication = undefined, enforceReplicationFactor = undefined, ...opts } = options || {};\n        const qs = {};\n        if (typeof waitForSyncReplication === \"boolean\") {\n            qs.waitForSyncReplication = waitForSyncReplication ? 1 : 0;\n        }\n        if (typeof enforceReplicationFactor === \"boolean\") {\n            qs.enforceReplicationFactor = enforceReplicationFactor ? 1 : 0;\n        }\n        return this._db.request({\n            method: \"POST\",\n            path: \"/_api/collection\",\n            qs,\n            body: {\n                ...opts,\n                name: this._name,\n            },\n        }, (res) => res.body);\n    }\n    properties(properties) {\n        if (!properties)\n            return this._get(\"properties\");\n        return this._put(\"properties\", properties);\n    }\n    count() {\n        return this._get(\"count\");\n    }\n    async recalculateCount() {\n        const body = await this._put(\"recalculateCount\");\n        return body.result;\n    }\n    figures(details = false) {\n        return this._db.request({\n            path: `/_api/collection/${encodeURIComponent(this._name)}/figures`,\n            qs: { details },\n        });\n    }\n    revision() {\n        return this._get(\"revision\");\n    }\n    checksum(options) {\n        return this._get(\"checksum\", options);\n    }\n    load(count) {\n        return this._put(\"load\", typeof count === \"boolean\" ? { count } : undefined);\n    }\n    async loadIndexes() {\n        const body = await this._put(\"loadIndexesIntoMemory\");\n        return body.result;\n    }\n    unload() {\n        return this._put(\"unload\");\n    }\n    async rename(newName) {\n        const result = await this._db.renameCollection(this._name, newName);\n        this._name = newName.normalize(\"NFC\");\n        return result;\n    }\n    async rotate() {\n        const body = await this._put(\"rotate\");\n        return body.result;\n    }\n    truncate() {\n        return this._put(\"truncate\");\n    }\n    drop(options) {\n        return this._db.request({\n            method: \"DELETE\",\n            path: `/_api/collection/${encodeURIComponent(this._name)}`,\n            qs: options,\n        }, (res) => res.body);\n    }\n    //#endregion\n    //#region crud\n    getResponsibleShard(document) {\n        return this._db.request({\n            method: \"PUT\",\n            path: `/_api/collection/${encodeURIComponent(this._name)}/responsibleShard`,\n            body: document,\n        }, (res) => res.body.shardId);\n    }\n    documentId(selector) {\n        return documents_1._documentHandle(selector, this._name);\n    }\n    async documentExists(selector) {\n        try {\n            return await this._db.request({\n                method: \"HEAD\",\n                path: `/_api/document/${encodeURI(documents_1._documentHandle(selector, this._name))}`,\n            }, () => true);\n        }\n        catch (err) {\n            if (err.code === 404) {\n                return false;\n            }\n            throw err;\n        }\n    }\n    documents(selectors, options = {}) {\n        const { allowDirtyRead = undefined } = options;\n        return this._db.request({\n            method: \"PUT\",\n            path: `/_api/document/${encodeURIComponent(this._name)}`,\n            qs: { onlyget: true },\n            allowDirtyRead,\n            body: selectors,\n        }, (res) => res.body);\n    }\n    async document(selector, options = {}) {\n        if (typeof options === \"boolean\") {\n            options = { graceful: options };\n        }\n        const { allowDirtyRead = undefined, graceful = false } = options;\n        const result = this._db.request({\n            path: `/_api/document/${encodeURI(documents_1._documentHandle(selector, this._name))}`,\n            allowDirtyRead,\n        }, (res) => res.body);\n        if (!graceful)\n            return result;\n        try {\n            return await result;\n        }\n        catch (err) {\n            if (error_1.isArangoError(err) && err.errorNum === codes_1.DOCUMENT_NOT_FOUND) {\n                return null;\n            }\n            throw err;\n        }\n    }\n    save(data, options) {\n        return this._db.request({\n            method: \"POST\",\n            path: `/_api/document/${encodeURIComponent(this._name)}`,\n            body: data,\n            qs: options,\n        }, (res) => (options && options.silent ? undefined : res.body));\n    }\n    saveAll(data, options) {\n        return this._db.request({\n            method: \"POST\",\n            path: `/_api/document/${encodeURIComponent(this._name)}`,\n            body: data,\n            qs: options,\n        }, (res) => (options && options.silent ? undefined : res.body));\n    }\n    replace(selector, newData, options) {\n        return this._db.request({\n            method: \"PUT\",\n            path: `/_api/document/${encodeURI(documents_1._documentHandle(selector, this._name))}`,\n            body: newData,\n            qs: options,\n        }, (res) => (options && options.silent ? undefined : res.body));\n    }\n    replaceAll(newData, options) {\n        return this._db.request({\n            method: \"PUT\",\n            path: `/_api/document/${encodeURIComponent(this._name)}`,\n            body: newData,\n            qs: options,\n        }, (res) => (options && options.silent ? undefined : res.body));\n    }\n    update(selector, newData, options) {\n        return this._db.request({\n            method: \"PATCH\",\n            path: `/_api/document/${encodeURI(documents_1._documentHandle(selector, this._name))}`,\n            body: newData,\n            qs: options,\n        }, (res) => (options && options.silent ? undefined : res.body));\n    }\n    updateAll(newData, options) {\n        return this._db.request({\n            method: \"PATCH\",\n            path: `/_api/document/${encodeURIComponent(this._name)}`,\n            body: newData,\n            qs: options,\n        }, (res) => (options && options.silent ? undefined : res.body));\n    }\n    remove(selector, options) {\n        return this._db.request({\n            method: \"DELETE\",\n            path: `/_api/document/${encodeURI(documents_1._documentHandle(selector, this._name))}`,\n            qs: options,\n        }, (res) => (options && options.silent ? undefined : res.body));\n    }\n    removeAll(selectors, options) {\n        return this._db.request({\n            method: \"DELETE\",\n            path: `/_api/document/${encodeURIComponent(this._name)}`,\n            body: selectors.map((selector) => documents_1._documentHandle(selector, this._name)),\n            qs: options,\n        }, (res) => (options && options.silent ? undefined : res.body));\n    }\n    import(data, options = {}) {\n        const qs = { ...options, collection: this._name };\n        if (Array.isArray(data)) {\n            qs.type = Array.isArray(data[0]) ? undefined : \"documents\";\n            const lines = data;\n            data = lines.map((line) => JSON.stringify(line)).join(\"\\r\\n\") + \"\\r\\n\";\n        }\n        return this._db.request({\n            method: \"POST\",\n            path: \"/_api/import\",\n            body: data,\n            isBinary: true,\n            qs,\n        }, (res) => res.body);\n    }\n    //#endregion\n    //#region edges\n    _edges(selector, direction) {\n        return this._db.request({\n            path: `/_api/edges/${encodeURIComponent(this._name)}`,\n            qs: {\n                direction,\n                vertex: documents_1._documentHandle(selector, this._name, false),\n            },\n        }, (res) => res.body);\n    }\n    edges(vertex) {\n        return this._edges(vertex);\n    }\n    inEdges(vertex) {\n        return this._edges(vertex, \"in\");\n    }\n    outEdges(vertex) {\n        return this._edges(vertex, \"out\");\n    }\n    traversal(startVertex, options) {\n        return this._db.request({\n            method: \"POST\",\n            path: \"/_api/traversal\",\n            body: {\n                ...options,\n                startVertex,\n                edgeCollection: this._name,\n            },\n        }, (res) => res.body.result);\n    }\n    //#endregion\n    //#region simple queries\n    list(type = \"id\") {\n        return this._db.request({\n            method: \"PUT\",\n            path: \"/_api/simple/all-keys\",\n            body: { type, collection: this._name },\n        }, (res) => new cursor_1.BatchedArrayCursor(this._db, res.body, res.arangojsHostId).items);\n    }\n    all(options) {\n        return this._db.request({\n            method: \"PUT\",\n            path: \"/_api/simple/all\",\n            body: {\n                ...options,\n                collection: this._name,\n            },\n        }, (res) => new cursor_1.BatchedArrayCursor(this._db, res.body, res.arangojsHostId).items);\n    }\n    any() {\n        return this._db.request({\n            method: \"PUT\",\n            path: \"/_api/simple/any\",\n            body: { collection: this._name },\n        }, (res) => res.body.document);\n    }\n    byExample(example, options) {\n        return this._db.request({\n            method: \"PUT\",\n            path: \"/_api/simple/by-example\",\n            body: {\n                ...options,\n                example,\n                collection: this._name,\n            },\n        }, (res) => new cursor_1.BatchedArrayCursor(this._db, res.body, res.arangojsHostId).items);\n    }\n    firstExample(example) {\n        return this._db.request({\n            method: \"PUT\",\n            path: \"/_api/simple/first-example\",\n            body: {\n                example,\n                collection: this._name,\n            },\n        }, (res) => res.body.document);\n    }\n    removeByExample(example, options) {\n        return this._db.request({\n            method: \"PUT\",\n            path: \"/_api/simple/remove-by-example\",\n            body: {\n                ...options,\n                example,\n                collection: this._name,\n            },\n        }, (res) => res.body);\n    }\n    replaceByExample(example, newValue, options) {\n        return this._db.request({\n            method: \"PUT\",\n            path: \"/_api/simple/replace-by-example\",\n            body: {\n                ...options,\n                example,\n                newValue,\n                collection: this._name,\n            },\n        }, (res) => res.body);\n    }\n    updateByExample(example, newValue, options) {\n        return this._db.request({\n            method: \"PUT\",\n            path: \"/_api/simple/update-by-example\",\n            body: {\n                ...options,\n                example,\n                newValue,\n                collection: this._name,\n            },\n        }, (res) => res.body);\n    }\n    lookupByKeys(keys) {\n        return this._db.request({\n            method: \"PUT\",\n            path: \"/_api/simple/lookup-by-keys\",\n            body: {\n                keys,\n                collection: this._name,\n            },\n        }, (res) => res.body.documents);\n    }\n    removeByKeys(keys, options) {\n        return this._db.request({\n            method: \"PUT\",\n            path: \"/_api/simple/remove-by-keys\",\n            body: {\n                options: options,\n                keys,\n                collection: this._name,\n            },\n        }, (res) => res.body);\n    }\n    //#endregion\n    //#region indexes\n    indexes() {\n        return this._db.request({\n            path: \"/_api/index\",\n            qs: { collection: this._name },\n        }, (res) => res.body.indexes);\n    }\n    index(selector) {\n        return this._db.request({\n            path: `/_api/index/${encodeURI(indexes_1._indexHandle(selector, this._name))}`,\n        }, (res) => res.body);\n    }\n    ensureIndex(options) {\n        return this._db.request({\n            method: \"POST\",\n            path: \"/_api/index\",\n            body: options,\n            qs: { collection: this._name },\n        }, (res) => res.body);\n    }\n    dropIndex(selector) {\n        return this._db.request({\n            method: \"DELETE\",\n            path: `/_api/index/${encodeURI(indexes_1._indexHandle(selector, this._name))}`,\n        }, (res) => res.body);\n    }\n    fulltext(attribute, query, { index, ...options } = {}) {\n        return this._db.request({\n            method: \"PUT\",\n            path: \"/_api/simple/fulltext\",\n            body: {\n                ...options,\n                index: index ? indexes_1._indexHandle(index, this._name) : undefined,\n                attribute,\n                query,\n                collection: this._name,\n            },\n        }, (res) => new cursor_1.BatchedArrayCursor(this._db, res.body, res.arangojsHostId).items);\n    }\n    compact() {\n        return this._db.request({\n            method: \"PUT\",\n            path: `/_api/collection/${this._name}/compact`,\n        }, (res) => res.body);\n    }\n}\nexports.Collection = Collection;\n//# sourceMappingURL=collection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXJhbmdvanMvY29sbGVjdGlvbi5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBa0IsR0FBRyx3QkFBd0IsR0FBRyxzQkFBc0IsR0FBRywwQkFBMEIsR0FBRywwQkFBMEI7QUFDaEksaUJBQWlCLG1CQUFPLENBQUMsbURBQVU7QUFDbkMsb0JBQW9CLG1CQUFPLENBQUMseURBQWE7QUFDekMsZ0JBQWdCLG1CQUFPLENBQUMsaURBQVM7QUFDakMsa0JBQWtCLG1CQUFPLENBQUMscURBQVc7QUFDckMsZ0JBQWdCLG1CQUFPLENBQUMseURBQWE7QUFDckM7QUFDQSxvREFBb0QsdUJBQXVCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBLHlDQUF5Qyx3QkFBd0I7QUFDakU7QUFDQTtBQUNBLDJDQUEyQyx3QkFBd0I7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsOENBQThDLHNCQUFzQixLQUFLO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGtEQUFrRCx3QkFBd0IsS0FBSztBQUNoRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLCtCQUErQixHQUFHLEtBQUs7QUFDN0U7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsK0JBQStCLEdBQUcsS0FBSztBQUM3RTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQywwQkFBMEIsK0JBQStCLEdBQUc7QUFDOUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixvRkFBb0Y7QUFDcEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLCtCQUErQjtBQUNyRSxrQkFBa0IsU0FBUztBQUMzQixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRSxRQUFRO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsK0JBQStCO0FBQ3JFO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQywrQkFBK0I7QUFDckU7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3Qyw2REFBNkQ7QUFDckcsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckMsZ0JBQWdCLDZCQUE2QjtBQUM3QztBQUNBO0FBQ0Esb0NBQW9DLCtCQUErQjtBQUNuRSxrQkFBa0IsZUFBZTtBQUNqQztBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EseUNBQXlDO0FBQ3pDO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0EsZ0JBQWdCLCtDQUErQztBQUMvRDtBQUNBLG9DQUFvQyw2REFBNkQ7QUFDakc7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLCtCQUErQjtBQUNuRTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLCtCQUErQjtBQUNuRTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLDZEQUE2RDtBQUNqRztBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLCtCQUErQjtBQUNuRTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLDZEQUE2RDtBQUNqRztBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLCtCQUErQjtBQUNuRTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLDZEQUE2RDtBQUNqRztBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQywrQkFBK0I7QUFDbkU7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLDZCQUE2QjtBQUM3QixxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLCtCQUErQjtBQUNoRTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsOEJBQThCO0FBQ2xELFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLHdCQUF3QjtBQUM1QyxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isd0JBQXdCO0FBQzFDLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsd0RBQXdEO0FBQ3pGLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isd0JBQXdCO0FBQzFDLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQyx3REFBd0Q7QUFDekYsU0FBUztBQUNUO0FBQ0EsaUNBQWlDLG9CQUFvQixJQUFJO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsV0FBVztBQUNqRCxTQUFTO0FBQ1Q7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvYXJhbmdvanMvY29sbGVjdGlvbi5qcz9hNmJmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Db2xsZWN0aW9uID0gZXhwb3J0cy5Db2xsZWN0aW9uU3RhdHVzID0gZXhwb3J0cy5Db2xsZWN0aW9uVHlwZSA9IGV4cG9ydHMuY29sbGVjdGlvblRvU3RyaW5nID0gZXhwb3J0cy5pc0FyYW5nb0NvbGxlY3Rpb24gPSB2b2lkIDA7XG5jb25zdCBjdXJzb3JfMSA9IHJlcXVpcmUoXCIuL2N1cnNvclwiKTtcbmNvbnN0IGRvY3VtZW50c18xID0gcmVxdWlyZShcIi4vZG9jdW1lbnRzXCIpO1xuY29uc3QgZXJyb3JfMSA9IHJlcXVpcmUoXCIuL2Vycm9yXCIpO1xuY29uc3QgaW5kZXhlc18xID0gcmVxdWlyZShcIi4vaW5kZXhlc1wiKTtcbmNvbnN0IGNvZGVzXzEgPSByZXF1aXJlKFwiLi9saWIvY29kZXNcIik7XG4vKipcbiAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBnaXZlbiB2YWx1ZSByZXByZXNlbnRzIGFuIHtAbGluayBBcmFuZ29Db2xsZWN0aW9ufS5cbiAqXG4gKiBAcGFyYW0gY29sbGVjdGlvbiAtIEEgdmFsdWUgdGhhdCBtaWdodCBiZSBhIGNvbGxlY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGlzQXJhbmdvQ29sbGVjdGlvbihjb2xsZWN0aW9uKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4oY29sbGVjdGlvbiAmJiBjb2xsZWN0aW9uLmlzQXJhbmdvQ29sbGVjdGlvbik7XG59XG5leHBvcnRzLmlzQXJhbmdvQ29sbGVjdGlvbiA9IGlzQXJhbmdvQ29sbGVjdGlvbjtcbi8qKlxuICogQ29lcmNlcyB0aGUgZ2l2ZW4gY29sbGVjdGlvbiBuYW1lIG9yIHtAbGluayBBcmFuZ29Db2xsZWN0aW9ufSBvYmplY3QgdG9cbiAqIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgY29sbGVjdGlvbiBuYW1lLlxuICpcbiAqIEBwYXJhbSBjb2xsZWN0aW9uIC0gQ29sbGVjdGlvbiBuYW1lIG9yIHtAbGluayBBcmFuZ29Db2xsZWN0aW9ufSBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGNvbGxlY3Rpb25Ub1N0cmluZyhjb2xsZWN0aW9uKSB7XG4gICAgaWYgKGlzQXJhbmdvQ29sbGVjdGlvbihjb2xsZWN0aW9uKSkge1xuICAgICAgICByZXR1cm4gU3RyaW5nKGNvbGxlY3Rpb24ubmFtZSk7XG4gICAgfVxuICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIFN0cmluZyhjb2xsZWN0aW9uKS5ub3JtYWxpemUoXCJORkNcIik7XG59XG5leHBvcnRzLmNvbGxlY3Rpb25Ub1N0cmluZyA9IGNvbGxlY3Rpb25Ub1N0cmluZztcbi8qKlxuICogSW50ZWdlciB2YWx1ZXMgaW5kaWNhdGluZyB0aGUgY29sbGVjdGlvbiB0eXBlLlxuICovXG52YXIgQ29sbGVjdGlvblR5cGU7XG4oZnVuY3Rpb24gKENvbGxlY3Rpb25UeXBlKSB7XG4gICAgQ29sbGVjdGlvblR5cGVbQ29sbGVjdGlvblR5cGVbXCJET0NVTUVOVF9DT0xMRUNUSU9OXCJdID0gMl0gPSBcIkRPQ1VNRU5UX0NPTExFQ1RJT05cIjtcbiAgICBDb2xsZWN0aW9uVHlwZVtDb2xsZWN0aW9uVHlwZVtcIkVER0VfQ09MTEVDVElPTlwiXSA9IDNdID0gXCJFREdFX0NPTExFQ1RJT05cIjtcbn0pKENvbGxlY3Rpb25UeXBlID0gZXhwb3J0cy5Db2xsZWN0aW9uVHlwZSB8fCAoZXhwb3J0cy5Db2xsZWN0aW9uVHlwZSA9IHt9KSk7XG4vKipcbiAqIEludGVnZXIgdmFsdWVzIGluZGljYXRpbmcgdGhlIGNvbGxlY3Rpb24gbG9hZGluZyBzdGF0dXMuXG4gKi9cbnZhciBDb2xsZWN0aW9uU3RhdHVzO1xuKGZ1bmN0aW9uIChDb2xsZWN0aW9uU3RhdHVzKSB7XG4gICAgQ29sbGVjdGlvblN0YXR1c1tDb2xsZWN0aW9uU3RhdHVzW1wiTkVXQk9STlwiXSA9IDFdID0gXCJORVdCT1JOXCI7XG4gICAgQ29sbGVjdGlvblN0YXR1c1tDb2xsZWN0aW9uU3RhdHVzW1wiVU5MT0FERURcIl0gPSAyXSA9IFwiVU5MT0FERURcIjtcbiAgICBDb2xsZWN0aW9uU3RhdHVzW0NvbGxlY3Rpb25TdGF0dXNbXCJMT0FERURcIl0gPSAzXSA9IFwiTE9BREVEXCI7XG4gICAgQ29sbGVjdGlvblN0YXR1c1tDb2xsZWN0aW9uU3RhdHVzW1wiVU5MT0FESU5HXCJdID0gNF0gPSBcIlVOTE9BRElOR1wiO1xuICAgIENvbGxlY3Rpb25TdGF0dXNbQ29sbGVjdGlvblN0YXR1c1tcIkRFTEVURURcIl0gPSA1XSA9IFwiREVMRVRFRFwiO1xuICAgIENvbGxlY3Rpb25TdGF0dXNbQ29sbGVjdGlvblN0YXR1c1tcIkxPQURJTkdcIl0gPSA2XSA9IFwiTE9BRElOR1wiO1xufSkoQ29sbGVjdGlvblN0YXR1cyA9IGV4cG9ydHMuQ29sbGVjdGlvblN0YXR1cyB8fCAoZXhwb3J0cy5Db2xsZWN0aW9uU3RhdHVzID0ge30pKTtcbi8qKlxuICogQGludGVybmFsXG4gKiBAaGlkZGVuXG4gKi9cbmNsYXNzIENvbGxlY3Rpb24ge1xuICAgIC8vI2VuZHJlZ2lvblxuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihkYiwgbmFtZSkge1xuICAgICAgICB0aGlzLl9uYW1lID0gbmFtZS5ub3JtYWxpemUoXCJORkNcIik7XG4gICAgICAgIHRoaXMuX2RiID0gZGI7XG4gICAgfVxuICAgIC8vI3JlZ2lvbiBpbnRlcm5hbHNcbiAgICBfZ2V0KHBhdGgsIHFzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYi5yZXF1ZXN0KHtcbiAgICAgICAgICAgIHBhdGg6IGAvX2FwaS9jb2xsZWN0aW9uLyR7ZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuX25hbWUpfS8ke3BhdGh9YCxcbiAgICAgICAgICAgIHFzLFxuICAgICAgICB9LCAocmVzKSA9PiByZXMuYm9keSk7XG4gICAgfVxuICAgIF9wdXQocGF0aCwgYm9keSkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGIucmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6IFwiUFVUXCIsXG4gICAgICAgICAgICBwYXRoOiBgL19hcGkvY29sbGVjdGlvbi8ke2VuY29kZVVSSUNvbXBvbmVudCh0aGlzLl9uYW1lKX0vJHtwYXRofWAsXG4gICAgICAgICAgICBib2R5LFxuICAgICAgICB9LCAocmVzKSA9PiByZXMuYm9keSk7XG4gICAgfVxuICAgIC8vI2VuZHJlZ2lvblxuICAgIC8vI3JlZ2lvbiBtZXRhZGF0YVxuICAgIGdldCBpc0FyYW5nb0NvbGxlY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX25hbWU7XG4gICAgfVxuICAgIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RiLnJlcXVlc3QoeyBwYXRoOiBgL19hcGkvY29sbGVjdGlvbi8ke2VuY29kZVVSSUNvbXBvbmVudCh0aGlzLl9uYW1lKX1gIH0sIChyZXMpID0+IHJlcy5ib2R5KTtcbiAgICB9XG4gICAgYXN5bmMgZXhpc3RzKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5nZXQoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIGlmIChlcnJvcl8xLmlzQXJhbmdvRXJyb3IoZXJyKSAmJiBlcnIuZXJyb3JOdW0gPT09IGNvZGVzXzEuQ09MTEVDVElPTl9OT1RfRk9VTkQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY3JlYXRlKG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgeyB3YWl0Rm9yU3luY1JlcGxpY2F0aW9uID0gdW5kZWZpbmVkLCBlbmZvcmNlUmVwbGljYXRpb25GYWN0b3IgPSB1bmRlZmluZWQsIC4uLm9wdHMgfSA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIGNvbnN0IHFzID0ge307XG4gICAgICAgIGlmICh0eXBlb2Ygd2FpdEZvclN5bmNSZXBsaWNhdGlvbiA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgIHFzLndhaXRGb3JTeW5jUmVwbGljYXRpb24gPSB3YWl0Rm9yU3luY1JlcGxpY2F0aW9uID8gMSA6IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBlbmZvcmNlUmVwbGljYXRpb25GYWN0b3IgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICBxcy5lbmZvcmNlUmVwbGljYXRpb25GYWN0b3IgPSBlbmZvcmNlUmVwbGljYXRpb25GYWN0b3IgPyAxIDogMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5fZGIucmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICAgICAgcGF0aDogXCIvX2FwaS9jb2xsZWN0aW9uXCIsXG4gICAgICAgICAgICBxcyxcbiAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgICAuLi5vcHRzLFxuICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMuX25hbWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LCAocmVzKSA9PiByZXMuYm9keSk7XG4gICAgfVxuICAgIHByb3BlcnRpZXMocHJvcGVydGllcykge1xuICAgICAgICBpZiAoIXByb3BlcnRpZXMpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0KFwicHJvcGVydGllc1wiKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3B1dChcInByb3BlcnRpZXNcIiwgcHJvcGVydGllcyk7XG4gICAgfVxuICAgIGNvdW50KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0KFwiY291bnRcIik7XG4gICAgfVxuICAgIGFzeW5jIHJlY2FsY3VsYXRlQ291bnQoKSB7XG4gICAgICAgIGNvbnN0IGJvZHkgPSBhd2FpdCB0aGlzLl9wdXQoXCJyZWNhbGN1bGF0ZUNvdW50XCIpO1xuICAgICAgICByZXR1cm4gYm9keS5yZXN1bHQ7XG4gICAgfVxuICAgIGZpZ3VyZXMoZGV0YWlscyA9IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYi5yZXF1ZXN0KHtcbiAgICAgICAgICAgIHBhdGg6IGAvX2FwaS9jb2xsZWN0aW9uLyR7ZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuX25hbWUpfS9maWd1cmVzYCxcbiAgICAgICAgICAgIHFzOiB7IGRldGFpbHMgfSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHJldmlzaW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZ2V0KFwicmV2aXNpb25cIik7XG4gICAgfVxuICAgIGNoZWNrc3VtKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldChcImNoZWNrc3VtXCIsIG9wdGlvbnMpO1xuICAgIH1cbiAgICBsb2FkKGNvdW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wdXQoXCJsb2FkXCIsIHR5cGVvZiBjb3VudCA9PT0gXCJib29sZWFuXCIgPyB7IGNvdW50IH0gOiB1bmRlZmluZWQpO1xuICAgIH1cbiAgICBhc3luYyBsb2FkSW5kZXhlcygpIHtcbiAgICAgICAgY29uc3QgYm9keSA9IGF3YWl0IHRoaXMuX3B1dChcImxvYWRJbmRleGVzSW50b01lbW9yeVwiKTtcbiAgICAgICAgcmV0dXJuIGJvZHkucmVzdWx0O1xuICAgIH1cbiAgICB1bmxvYWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wdXQoXCJ1bmxvYWRcIik7XG4gICAgfVxuICAgIGFzeW5jIHJlbmFtZShuZXdOYW1lKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuX2RiLnJlbmFtZUNvbGxlY3Rpb24odGhpcy5fbmFtZSwgbmV3TmFtZSk7XG4gICAgICAgIHRoaXMuX25hbWUgPSBuZXdOYW1lLm5vcm1hbGl6ZShcIk5GQ1wiKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgYXN5bmMgcm90YXRlKCkge1xuICAgICAgICBjb25zdCBib2R5ID0gYXdhaXQgdGhpcy5fcHV0KFwicm90YXRlXCIpO1xuICAgICAgICByZXR1cm4gYm9keS5yZXN1bHQ7XG4gICAgfVxuICAgIHRydW5jYXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHV0KFwidHJ1bmNhdGVcIik7XG4gICAgfVxuICAgIGRyb3Aob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGIucmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6IFwiREVMRVRFXCIsXG4gICAgICAgICAgICBwYXRoOiBgL19hcGkvY29sbGVjdGlvbi8ke2VuY29kZVVSSUNvbXBvbmVudCh0aGlzLl9uYW1lKX1gLFxuICAgICAgICAgICAgcXM6IG9wdGlvbnMsXG4gICAgICAgIH0sIChyZXMpID0+IHJlcy5ib2R5KTtcbiAgICB9XG4gICAgLy8jZW5kcmVnaW9uXG4gICAgLy8jcmVnaW9uIGNydWRcbiAgICBnZXRSZXNwb25zaWJsZVNoYXJkKGRvY3VtZW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYi5yZXF1ZXN0KHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJQVVRcIixcbiAgICAgICAgICAgIHBhdGg6IGAvX2FwaS9jb2xsZWN0aW9uLyR7ZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuX25hbWUpfS9yZXNwb25zaWJsZVNoYXJkYCxcbiAgICAgICAgICAgIGJvZHk6IGRvY3VtZW50LFxuICAgICAgICB9LCAocmVzKSA9PiByZXMuYm9keS5zaGFyZElkKTtcbiAgICB9XG4gICAgZG9jdW1lbnRJZChzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnRzXzEuX2RvY3VtZW50SGFuZGxlKHNlbGVjdG9yLCB0aGlzLl9uYW1lKTtcbiAgICB9XG4gICAgYXN5bmMgZG9jdW1lbnRFeGlzdHMoc2VsZWN0b3IpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9kYi5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6IFwiSEVBRFwiLFxuICAgICAgICAgICAgICAgIHBhdGg6IGAvX2FwaS9kb2N1bWVudC8ke2VuY29kZVVSSShkb2N1bWVudHNfMS5fZG9jdW1lbnRIYW5kbGUoc2VsZWN0b3IsIHRoaXMuX25hbWUpKX1gLFxuICAgICAgICAgICAgfSwgKCkgPT4gdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgaWYgKGVyci5jb2RlID09PSA0MDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZG9jdW1lbnRzKHNlbGVjdG9ycywgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIGNvbnN0IHsgYWxsb3dEaXJ0eVJlYWQgPSB1bmRlZmluZWQgfSA9IG9wdGlvbnM7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYi5yZXF1ZXN0KHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJQVVRcIixcbiAgICAgICAgICAgIHBhdGg6IGAvX2FwaS9kb2N1bWVudC8ke2VuY29kZVVSSUNvbXBvbmVudCh0aGlzLl9uYW1lKX1gLFxuICAgICAgICAgICAgcXM6IHsgb25seWdldDogdHJ1ZSB9LFxuICAgICAgICAgICAgYWxsb3dEaXJ0eVJlYWQsXG4gICAgICAgICAgICBib2R5OiBzZWxlY3RvcnMsXG4gICAgICAgIH0sIChyZXMpID0+IHJlcy5ib2R5KTtcbiAgICB9XG4gICAgYXN5bmMgZG9jdW1lbnQoc2VsZWN0b3IsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgICAgICBvcHRpb25zID0geyBncmFjZWZ1bDogb3B0aW9ucyB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgYWxsb3dEaXJ0eVJlYWQgPSB1bmRlZmluZWQsIGdyYWNlZnVsID0gZmFsc2UgfSA9IG9wdGlvbnM7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuX2RiLnJlcXVlc3Qoe1xuICAgICAgICAgICAgcGF0aDogYC9fYXBpL2RvY3VtZW50LyR7ZW5jb2RlVVJJKGRvY3VtZW50c18xLl9kb2N1bWVudEhhbmRsZShzZWxlY3RvciwgdGhpcy5fbmFtZSkpfWAsXG4gICAgICAgICAgICBhbGxvd0RpcnR5UmVhZCxcbiAgICAgICAgfSwgKHJlcykgPT4gcmVzLmJvZHkpO1xuICAgICAgICBpZiAoIWdyYWNlZnVsKVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBhd2FpdCByZXN1bHQ7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgaWYgKGVycm9yXzEuaXNBcmFuZ29FcnJvcihlcnIpICYmIGVyci5lcnJvck51bSA9PT0gY29kZXNfMS5ET0NVTUVOVF9OT1RfRk9VTkQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzYXZlKGRhdGEsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RiLnJlcXVlc3Qoe1xuICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgICAgIHBhdGg6IGAvX2FwaS9kb2N1bWVudC8ke2VuY29kZVVSSUNvbXBvbmVudCh0aGlzLl9uYW1lKX1gLFxuICAgICAgICAgICAgYm9keTogZGF0YSxcbiAgICAgICAgICAgIHFzOiBvcHRpb25zLFxuICAgICAgICB9LCAocmVzKSA9PiAob3B0aW9ucyAmJiBvcHRpb25zLnNpbGVudCA/IHVuZGVmaW5lZCA6IHJlcy5ib2R5KSk7XG4gICAgfVxuICAgIHNhdmVBbGwoZGF0YSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGIucmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICAgICAgcGF0aDogYC9fYXBpL2RvY3VtZW50LyR7ZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuX25hbWUpfWAsXG4gICAgICAgICAgICBib2R5OiBkYXRhLFxuICAgICAgICAgICAgcXM6IG9wdGlvbnMsXG4gICAgICAgIH0sIChyZXMpID0+IChvcHRpb25zICYmIG9wdGlvbnMuc2lsZW50ID8gdW5kZWZpbmVkIDogcmVzLmJvZHkpKTtcbiAgICB9XG4gICAgcmVwbGFjZShzZWxlY3RvciwgbmV3RGF0YSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGIucmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6IFwiUFVUXCIsXG4gICAgICAgICAgICBwYXRoOiBgL19hcGkvZG9jdW1lbnQvJHtlbmNvZGVVUkkoZG9jdW1lbnRzXzEuX2RvY3VtZW50SGFuZGxlKHNlbGVjdG9yLCB0aGlzLl9uYW1lKSl9YCxcbiAgICAgICAgICAgIGJvZHk6IG5ld0RhdGEsXG4gICAgICAgICAgICBxczogb3B0aW9ucyxcbiAgICAgICAgfSwgKHJlcykgPT4gKG9wdGlvbnMgJiYgb3B0aW9ucy5zaWxlbnQgPyB1bmRlZmluZWQgOiByZXMuYm9keSkpO1xuICAgIH1cbiAgICByZXBsYWNlQWxsKG5ld0RhdGEsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RiLnJlcXVlc3Qoe1xuICAgICAgICAgICAgbWV0aG9kOiBcIlBVVFwiLFxuICAgICAgICAgICAgcGF0aDogYC9fYXBpL2RvY3VtZW50LyR7ZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuX25hbWUpfWAsXG4gICAgICAgICAgICBib2R5OiBuZXdEYXRhLFxuICAgICAgICAgICAgcXM6IG9wdGlvbnMsXG4gICAgICAgIH0sIChyZXMpID0+IChvcHRpb25zICYmIG9wdGlvbnMuc2lsZW50ID8gdW5kZWZpbmVkIDogcmVzLmJvZHkpKTtcbiAgICB9XG4gICAgdXBkYXRlKHNlbGVjdG9yLCBuZXdEYXRhLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYi5yZXF1ZXN0KHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJQQVRDSFwiLFxuICAgICAgICAgICAgcGF0aDogYC9fYXBpL2RvY3VtZW50LyR7ZW5jb2RlVVJJKGRvY3VtZW50c18xLl9kb2N1bWVudEhhbmRsZShzZWxlY3RvciwgdGhpcy5fbmFtZSkpfWAsXG4gICAgICAgICAgICBib2R5OiBuZXdEYXRhLFxuICAgICAgICAgICAgcXM6IG9wdGlvbnMsXG4gICAgICAgIH0sIChyZXMpID0+IChvcHRpb25zICYmIG9wdGlvbnMuc2lsZW50ID8gdW5kZWZpbmVkIDogcmVzLmJvZHkpKTtcbiAgICB9XG4gICAgdXBkYXRlQWxsKG5ld0RhdGEsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RiLnJlcXVlc3Qoe1xuICAgICAgICAgICAgbWV0aG9kOiBcIlBBVENIXCIsXG4gICAgICAgICAgICBwYXRoOiBgL19hcGkvZG9jdW1lbnQvJHtlbmNvZGVVUklDb21wb25lbnQodGhpcy5fbmFtZSl9YCxcbiAgICAgICAgICAgIGJvZHk6IG5ld0RhdGEsXG4gICAgICAgICAgICBxczogb3B0aW9ucyxcbiAgICAgICAgfSwgKHJlcykgPT4gKG9wdGlvbnMgJiYgb3B0aW9ucy5zaWxlbnQgPyB1bmRlZmluZWQgOiByZXMuYm9keSkpO1xuICAgIH1cbiAgICByZW1vdmUoc2VsZWN0b3IsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RiLnJlcXVlc3Qoe1xuICAgICAgICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxuICAgICAgICAgICAgcGF0aDogYC9fYXBpL2RvY3VtZW50LyR7ZW5jb2RlVVJJKGRvY3VtZW50c18xLl9kb2N1bWVudEhhbmRsZShzZWxlY3RvciwgdGhpcy5fbmFtZSkpfWAsXG4gICAgICAgICAgICBxczogb3B0aW9ucyxcbiAgICAgICAgfSwgKHJlcykgPT4gKG9wdGlvbnMgJiYgb3B0aW9ucy5zaWxlbnQgPyB1bmRlZmluZWQgOiByZXMuYm9keSkpO1xuICAgIH1cbiAgICByZW1vdmVBbGwoc2VsZWN0b3JzLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYi5yZXF1ZXN0KHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcbiAgICAgICAgICAgIHBhdGg6IGAvX2FwaS9kb2N1bWVudC8ke2VuY29kZVVSSUNvbXBvbmVudCh0aGlzLl9uYW1lKX1gLFxuICAgICAgICAgICAgYm9keTogc2VsZWN0b3JzLm1hcCgoc2VsZWN0b3IpID0+IGRvY3VtZW50c18xLl9kb2N1bWVudEhhbmRsZShzZWxlY3RvciwgdGhpcy5fbmFtZSkpLFxuICAgICAgICAgICAgcXM6IG9wdGlvbnMsXG4gICAgICAgIH0sIChyZXMpID0+IChvcHRpb25zICYmIG9wdGlvbnMuc2lsZW50ID8gdW5kZWZpbmVkIDogcmVzLmJvZHkpKTtcbiAgICB9XG4gICAgaW1wb3J0KGRhdGEsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBjb25zdCBxcyA9IHsgLi4ub3B0aW9ucywgY29sbGVjdGlvbjogdGhpcy5fbmFtZSB9O1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgcXMudHlwZSA9IEFycmF5LmlzQXJyYXkoZGF0YVswXSkgPyB1bmRlZmluZWQgOiBcImRvY3VtZW50c1wiO1xuICAgICAgICAgICAgY29uc3QgbGluZXMgPSBkYXRhO1xuICAgICAgICAgICAgZGF0YSA9IGxpbmVzLm1hcCgobGluZSkgPT4gSlNPTi5zdHJpbmdpZnkobGluZSkpLmpvaW4oXCJcXHJcXG5cIikgKyBcIlxcclxcblwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9kYi5yZXF1ZXN0KHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICBwYXRoOiBcIi9fYXBpL2ltcG9ydFwiLFxuICAgICAgICAgICAgYm9keTogZGF0YSxcbiAgICAgICAgICAgIGlzQmluYXJ5OiB0cnVlLFxuICAgICAgICAgICAgcXMsXG4gICAgICAgIH0sIChyZXMpID0+IHJlcy5ib2R5KTtcbiAgICB9XG4gICAgLy8jZW5kcmVnaW9uXG4gICAgLy8jcmVnaW9uIGVkZ2VzXG4gICAgX2VkZ2VzKHNlbGVjdG9yLCBkaXJlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RiLnJlcXVlc3Qoe1xuICAgICAgICAgICAgcGF0aDogYC9fYXBpL2VkZ2VzLyR7ZW5jb2RlVVJJQ29tcG9uZW50KHRoaXMuX25hbWUpfWAsXG4gICAgICAgICAgICBxczoge1xuICAgICAgICAgICAgICAgIGRpcmVjdGlvbixcbiAgICAgICAgICAgICAgICB2ZXJ0ZXg6IGRvY3VtZW50c18xLl9kb2N1bWVudEhhbmRsZShzZWxlY3RvciwgdGhpcy5fbmFtZSwgZmFsc2UpLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSwgKHJlcykgPT4gcmVzLmJvZHkpO1xuICAgIH1cbiAgICBlZGdlcyh2ZXJ0ZXgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VkZ2VzKHZlcnRleCk7XG4gICAgfVxuICAgIGluRWRnZXModmVydGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9lZGdlcyh2ZXJ0ZXgsIFwiaW5cIik7XG4gICAgfVxuICAgIG91dEVkZ2VzKHZlcnRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZWRnZXModmVydGV4LCBcIm91dFwiKTtcbiAgICB9XG4gICAgdHJhdmVyc2FsKHN0YXJ0VmVydGV4LCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYi5yZXF1ZXN0KHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgICAgICBwYXRoOiBcIi9fYXBpL3RyYXZlcnNhbFwiLFxuICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgc3RhcnRWZXJ0ZXgsXG4gICAgICAgICAgICAgICAgZWRnZUNvbGxlY3Rpb246IHRoaXMuX25hbWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LCAocmVzKSA9PiByZXMuYm9keS5yZXN1bHQpO1xuICAgIH1cbiAgICAvLyNlbmRyZWdpb25cbiAgICAvLyNyZWdpb24gc2ltcGxlIHF1ZXJpZXNcbiAgICBsaXN0KHR5cGUgPSBcImlkXCIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RiLnJlcXVlc3Qoe1xuICAgICAgICAgICAgbWV0aG9kOiBcIlBVVFwiLFxuICAgICAgICAgICAgcGF0aDogXCIvX2FwaS9zaW1wbGUvYWxsLWtleXNcIixcbiAgICAgICAgICAgIGJvZHk6IHsgdHlwZSwgY29sbGVjdGlvbjogdGhpcy5fbmFtZSB9LFxuICAgICAgICB9LCAocmVzKSA9PiBuZXcgY3Vyc29yXzEuQmF0Y2hlZEFycmF5Q3Vyc29yKHRoaXMuX2RiLCByZXMuYm9keSwgcmVzLmFyYW5nb2pzSG9zdElkKS5pdGVtcyk7XG4gICAgfVxuICAgIGFsbChvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYi5yZXF1ZXN0KHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJQVVRcIixcbiAgICAgICAgICAgIHBhdGg6IFwiL19hcGkvc2ltcGxlL2FsbFwiLFxuICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbjogdGhpcy5fbmFtZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sIChyZXMpID0+IG5ldyBjdXJzb3JfMS5CYXRjaGVkQXJyYXlDdXJzb3IodGhpcy5fZGIsIHJlcy5ib2R5LCByZXMuYXJhbmdvanNIb3N0SWQpLml0ZW1zKTtcbiAgICB9XG4gICAgYW55KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGIucmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6IFwiUFVUXCIsXG4gICAgICAgICAgICBwYXRoOiBcIi9fYXBpL3NpbXBsZS9hbnlcIixcbiAgICAgICAgICAgIGJvZHk6IHsgY29sbGVjdGlvbjogdGhpcy5fbmFtZSB9LFxuICAgICAgICB9LCAocmVzKSA9PiByZXMuYm9keS5kb2N1bWVudCk7XG4gICAgfVxuICAgIGJ5RXhhbXBsZShleGFtcGxlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYi5yZXF1ZXN0KHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJQVVRcIixcbiAgICAgICAgICAgIHBhdGg6IFwiL19hcGkvc2ltcGxlL2J5LWV4YW1wbGVcIixcbiAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgICAgIGV4YW1wbGUsXG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbjogdGhpcy5fbmFtZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sIChyZXMpID0+IG5ldyBjdXJzb3JfMS5CYXRjaGVkQXJyYXlDdXJzb3IodGhpcy5fZGIsIHJlcy5ib2R5LCByZXMuYXJhbmdvanNIb3N0SWQpLml0ZW1zKTtcbiAgICB9XG4gICAgZmlyc3RFeGFtcGxlKGV4YW1wbGUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RiLnJlcXVlc3Qoe1xuICAgICAgICAgICAgbWV0aG9kOiBcIlBVVFwiLFxuICAgICAgICAgICAgcGF0aDogXCIvX2FwaS9zaW1wbGUvZmlyc3QtZXhhbXBsZVwiLFxuICAgICAgICAgICAgYm9keToge1xuICAgICAgICAgICAgICAgIGV4YW1wbGUsXG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbjogdGhpcy5fbmFtZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sIChyZXMpID0+IHJlcy5ib2R5LmRvY3VtZW50KTtcbiAgICB9XG4gICAgcmVtb3ZlQnlFeGFtcGxlKGV4YW1wbGUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RiLnJlcXVlc3Qoe1xuICAgICAgICAgICAgbWV0aG9kOiBcIlBVVFwiLFxuICAgICAgICAgICAgcGF0aDogXCIvX2FwaS9zaW1wbGUvcmVtb3ZlLWJ5LWV4YW1wbGVcIixcbiAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgICAgIGV4YW1wbGUsXG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbjogdGhpcy5fbmFtZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sIChyZXMpID0+IHJlcy5ib2R5KTtcbiAgICB9XG4gICAgcmVwbGFjZUJ5RXhhbXBsZShleGFtcGxlLCBuZXdWYWx1ZSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGIucmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6IFwiUFVUXCIsXG4gICAgICAgICAgICBwYXRoOiBcIi9fYXBpL3NpbXBsZS9yZXBsYWNlLWJ5LWV4YW1wbGVcIixcbiAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgICAgIGV4YW1wbGUsXG4gICAgICAgICAgICAgICAgbmV3VmFsdWUsXG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbjogdGhpcy5fbmFtZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sIChyZXMpID0+IHJlcy5ib2R5KTtcbiAgICB9XG4gICAgdXBkYXRlQnlFeGFtcGxlKGV4YW1wbGUsIG5ld1ZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYi5yZXF1ZXN0KHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJQVVRcIixcbiAgICAgICAgICAgIHBhdGg6IFwiL19hcGkvc2ltcGxlL3VwZGF0ZS1ieS1leGFtcGxlXCIsXG4gICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgICAgICBleGFtcGxlLFxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlLFxuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb246IHRoaXMuX25hbWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LCAocmVzKSA9PiByZXMuYm9keSk7XG4gICAgfVxuICAgIGxvb2t1cEJ5S2V5cyhrZXlzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYi5yZXF1ZXN0KHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJQVVRcIixcbiAgICAgICAgICAgIHBhdGg6IFwiL19hcGkvc2ltcGxlL2xvb2t1cC1ieS1rZXlzXCIsXG4gICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAga2V5cyxcbiAgICAgICAgICAgICAgICBjb2xsZWN0aW9uOiB0aGlzLl9uYW1lLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSwgKHJlcykgPT4gcmVzLmJvZHkuZG9jdW1lbnRzKTtcbiAgICB9XG4gICAgcmVtb3ZlQnlLZXlzKGtleXMsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RiLnJlcXVlc3Qoe1xuICAgICAgICAgICAgbWV0aG9kOiBcIlBVVFwiLFxuICAgICAgICAgICAgcGF0aDogXCIvX2FwaS9zaW1wbGUvcmVtb3ZlLWJ5LWtleXNcIixcbiAgICAgICAgICAgIGJvZHk6IHtcbiAgICAgICAgICAgICAgICBvcHRpb25zOiBvcHRpb25zLFxuICAgICAgICAgICAgICAgIGtleXMsXG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbjogdGhpcy5fbmFtZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sIChyZXMpID0+IHJlcy5ib2R5KTtcbiAgICB9XG4gICAgLy8jZW5kcmVnaW9uXG4gICAgLy8jcmVnaW9uIGluZGV4ZXNcbiAgICBpbmRleGVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGIucmVxdWVzdCh7XG4gICAgICAgICAgICBwYXRoOiBcIi9fYXBpL2luZGV4XCIsXG4gICAgICAgICAgICBxczogeyBjb2xsZWN0aW9uOiB0aGlzLl9uYW1lIH0sXG4gICAgICAgIH0sIChyZXMpID0+IHJlcy5ib2R5LmluZGV4ZXMpO1xuICAgIH1cbiAgICBpbmRleChzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGIucmVxdWVzdCh7XG4gICAgICAgICAgICBwYXRoOiBgL19hcGkvaW5kZXgvJHtlbmNvZGVVUkkoaW5kZXhlc18xLl9pbmRleEhhbmRsZShzZWxlY3RvciwgdGhpcy5fbmFtZSkpfWAsXG4gICAgICAgIH0sIChyZXMpID0+IHJlcy5ib2R5KTtcbiAgICB9XG4gICAgZW5zdXJlSW5kZXgob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGIucmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgICAgICAgcGF0aDogXCIvX2FwaS9pbmRleFwiLFxuICAgICAgICAgICAgYm9keTogb3B0aW9ucyxcbiAgICAgICAgICAgIHFzOiB7IGNvbGxlY3Rpb246IHRoaXMuX25hbWUgfSxcbiAgICAgICAgfSwgKHJlcykgPT4gcmVzLmJvZHkpO1xuICAgIH1cbiAgICBkcm9wSW5kZXgoc2VsZWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RiLnJlcXVlc3Qoe1xuICAgICAgICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxuICAgICAgICAgICAgcGF0aDogYC9fYXBpL2luZGV4LyR7ZW5jb2RlVVJJKGluZGV4ZXNfMS5faW5kZXhIYW5kbGUoc2VsZWN0b3IsIHRoaXMuX25hbWUpKX1gLFxuICAgICAgICB9LCAocmVzKSA9PiByZXMuYm9keSk7XG4gICAgfVxuICAgIGZ1bGx0ZXh0KGF0dHJpYnV0ZSwgcXVlcnksIHsgaW5kZXgsIC4uLm9wdGlvbnMgfSA9IHt9KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYi5yZXF1ZXN0KHtcbiAgICAgICAgICAgIG1ldGhvZDogXCJQVVRcIixcbiAgICAgICAgICAgIHBhdGg6IFwiL19hcGkvc2ltcGxlL2Z1bGx0ZXh0XCIsXG4gICAgICAgICAgICBib2R5OiB7XG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgICAgICBpbmRleDogaW5kZXggPyBpbmRleGVzXzEuX2luZGV4SGFuZGxlKGluZGV4LCB0aGlzLl9uYW1lKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGUsXG4gICAgICAgICAgICAgICAgcXVlcnksXG4gICAgICAgICAgICAgICAgY29sbGVjdGlvbjogdGhpcy5fbmFtZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sIChyZXMpID0+IG5ldyBjdXJzb3JfMS5CYXRjaGVkQXJyYXlDdXJzb3IodGhpcy5fZGIsIHJlcy5ib2R5LCByZXMuYXJhbmdvanNIb3N0SWQpLml0ZW1zKTtcbiAgICB9XG4gICAgY29tcGFjdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RiLnJlcXVlc3Qoe1xuICAgICAgICAgICAgbWV0aG9kOiBcIlBVVFwiLFxuICAgICAgICAgICAgcGF0aDogYC9fYXBpL2NvbGxlY3Rpb24vJHt0aGlzLl9uYW1lfS9jb21wYWN0YCxcbiAgICAgICAgfSwgKHJlcykgPT4gcmVzLmJvZHkpO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29sbGVjdGlvbiA9IENvbGxlY3Rpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb2xsZWN0aW9uLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/arangojs/collection.js\n");

/***/ }),

/***/ "./node_modules/arangojs/connection.js":
/*!*********************************************!*\
  !*** ./node_modules/arangojs/connection.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Connection = exports.isArangoConnection = void 0;\nconst querystring_1 = __webpack_require__(/*! querystring */ \"./node_modules/next/dist/compiled/querystring-es3/index.js\");\nconst x3_linkedlist_1 = __webpack_require__(/*! x3-linkedlist */ \"./node_modules/x3-linkedlist/dist/index.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"./node_modules/arangojs/error.js\");\nconst btoa_1 = __webpack_require__(/*! ./lib/btoa */ \"./node_modules/arangojs/lib/btoa.web.js\");\nconst normalizeUrl_1 = __webpack_require__(/*! ./lib/normalizeUrl */ \"./node_modules/arangojs/lib/normalizeUrl.js\");\nconst request_1 = __webpack_require__(/*! ./lib/request */ \"./node_modules/arangojs/lib/request.web.js\");\nconst MIME_JSON = /\\/(json|javascript)(\\W|$)/;\nconst LEADER_ENDPOINT_HEADER = \"x-arango-endpoint\";\nfunction clean(obj) {\n    const result = {};\n    for (const key of Object.keys(obj)) {\n        const value = obj[key];\n        if (value === undefined)\n            continue;\n        result[key] = value;\n    }\n    return result;\n}\nfunction isBearerAuth(auth) {\n    return auth.hasOwnProperty(\"token\");\n}\n/**\n * @internal\n * @hidden\n */\nfunction generateStackTrace() {\n    let err = new Error();\n    if (!err.stack) {\n        try {\n            throw err;\n        }\n        catch (e) {\n            err = e;\n        }\n    }\n    return err;\n}\n/**\n * Indicates whether the given value represents a {@link Connection}.\n *\n * @param connection - A value that might be a connection.\n *\n * @internal\n * @hidden\n */\nfunction isArangoConnection(connection) {\n    return Boolean(connection && connection.isArangoConnection);\n}\nexports.isArangoConnection = isArangoConnection;\n/**\n * Represents a connection pool shared by one or more databases.\n *\n * @internal\n * @hidden\n */\nclass Connection {\n    /**\n     * @internal\n     *\n     * Creates a new `Connection` instance.\n     *\n     * @param config - An object with configuration options.\n     *\n     * @hidden\n     */\n    constructor(config = {}) {\n        var _a, _b, _c;\n        this._activeTasks = 0;\n        this._arangoVersion = 30400;\n        this._queue = new x3_linkedlist_1.LinkedList();\n        this._databases = new Map();\n        this._hosts = [];\n        this._urls = [];\n        this._transactionId = null;\n        this._queueTimes = new x3_linkedlist_1.LinkedList();\n        const URLS = config.url\n            ? Array.isArray(config.url)\n                ? config.url\n                : [config.url]\n            : [\"http://localhost:8529\"];\n        const MAX_SOCKETS = 3 * (config.loadBalancingStrategy === \"ROUND_ROBIN\" ? URLS.length : 1);\n        if (config.arangoVersion !== undefined) {\n            this._arangoVersion = config.arangoVersion;\n        }\n        this._agent = config.agent;\n        this._agentOptions = request_1.isBrowser\n            ? { maxSockets: MAX_SOCKETS, ...config.agentOptions }\n            : {\n                maxSockets: MAX_SOCKETS,\n                keepAlive: true,\n                keepAliveMsecs: 1000,\n                scheduling: \"lifo\",\n                ...config.agentOptions,\n            };\n        this._maxTasks = this._agentOptions.maxSockets;\n        this._headers = { ...config.headers };\n        this._loadBalancingStrategy = (_a = config.loadBalancingStrategy) !== null && _a !== void 0 ? _a : \"NONE\";\n        this._useFailOver = this._loadBalancingStrategy !== \"ROUND_ROBIN\";\n        this._precaptureStackTraces = Boolean(config.precaptureStackTraces);\n        this._responseQueueTimeSamples = (_b = config.responseQueueTimeSamples) !== null && _b !== void 0 ? _b : 10;\n        if (this._responseQueueTimeSamples < 0) {\n            this._responseQueueTimeSamples = Infinity;\n        }\n        if (config.maxRetries === false) {\n            this._shouldRetry = false;\n            this._maxRetries = 0;\n        }\n        else {\n            this._shouldRetry = true;\n            this._maxRetries = (_c = config.maxRetries) !== null && _c !== void 0 ? _c : 0;\n        }\n        this.addToHostList(URLS);\n        if (config.auth) {\n            if (isBearerAuth(config.auth)) {\n                this.setBearerAuth(config.auth);\n            }\n            else {\n                this.setBasicAuth(config.auth);\n            }\n        }\n        if (this._loadBalancingStrategy === \"ONE_RANDOM\") {\n            this._activeHost = Math.floor(Math.random() * this._hosts.length);\n            this._activeDirtyHost = Math.floor(Math.random() * this._hosts.length);\n        }\n        else {\n            this._activeHost = 0;\n            this._activeDirtyHost = 0;\n        }\n    }\n    /**\n     * @internal\n     *\n     * Indicates that this object represents an ArangoDB connection.\n     */\n    get isArangoConnection() {\n        return true;\n    }\n    get queueTime() {\n        return {\n            getLatest: () => { var _a; return (_a = this._queueTimes.last) === null || _a === void 0 ? void 0 : _a.value[1]; },\n            getValues: () => Array.from(this._queueTimes.values()),\n            getAvg: () => {\n                let avg = 0;\n                for (const [, [, value]] of this._queueTimes) {\n                    avg += value / this._queueTimes.length;\n                }\n                return avg;\n            },\n        };\n    }\n    _runQueue() {\n        if (!this._queue.length || this._activeTasks >= this._maxTasks)\n            return;\n        const task = this._queue.shift();\n        let host = this._activeHost;\n        if (task.host !== undefined) {\n            host = task.host;\n        }\n        else if (task.allowDirtyRead) {\n            host = this._activeDirtyHost;\n            this._activeDirtyHost = (this._activeDirtyHost + 1) % this._hosts.length;\n            task.options.headers[\"x-arango-allow-dirty-read\"] = \"true\";\n        }\n        else if (this._loadBalancingStrategy === \"ROUND_ROBIN\") {\n            this._activeHost = (this._activeHost + 1) % this._hosts.length;\n        }\n        this._activeTasks += 1;\n        const callback = (err, res) => {\n            this._activeTasks -= 1;\n            if (err) {\n                if (!task.allowDirtyRead &&\n                    this._hosts.length > 1 &&\n                    this._activeHost === host &&\n                    this._useFailOver) {\n                    this._activeHost = (this._activeHost + 1) % this._hosts.length;\n                }\n                if (!task.host &&\n                    this._shouldRetry &&\n                    task.retries < (this._maxRetries || this._hosts.length - 1) &&\n                    error_1.isSystemError(err) &&\n                    err.syscall === \"connect\" &&\n                    err.code === \"ECONNREFUSED\") {\n                    task.retries += 1;\n                    this._queue.push(task);\n                }\n                else {\n                    if (task.stack) {\n                        err.stack += task.stack();\n                    }\n                    task.reject(err);\n                }\n            }\n            else {\n                const response = res;\n                if (response.statusCode === 503 &&\n                    response.headers[LEADER_ENDPOINT_HEADER]) {\n                    const url = response.headers[LEADER_ENDPOINT_HEADER];\n                    const [index] = this.addToHostList(url);\n                    task.host = index;\n                    if (this._activeHost === host) {\n                        this._activeHost = index;\n                    }\n                    this._queue.push(task);\n                }\n                else {\n                    response.arangojsHostId = host;\n                    task.resolve(response);\n                }\n            }\n            this._runQueue();\n        };\n        try {\n            this._hosts[host](task.options, callback);\n        }\n        catch (e) {\n            callback(e);\n        }\n    }\n    _buildUrl({ basePath, path, qs }) {\n        const pathname = `${basePath || \"\"}${path || \"\"}`;\n        let search;\n        if (qs) {\n            if (typeof qs === \"string\")\n                search = `?${qs}`;\n            else\n                search = `?${querystring_1.stringify(clean(qs))}`;\n        }\n        return search ? { pathname, search } : { pathname };\n    }\n    setBearerAuth(auth) {\n        this.setHeader(\"authorization\", `Bearer ${auth.token}`);\n    }\n    setBasicAuth(auth) {\n        this.setHeader(\"authorization\", `Basic ${btoa_1.btoa(`${auth.username}:${auth.password}`)}`);\n    }\n    setResponseQueueTimeSamples(responseQueueTimeSamples) {\n        if (responseQueueTimeSamples < 0) {\n            responseQueueTimeSamples = Infinity;\n        }\n        this._responseQueueTimeSamples = responseQueueTimeSamples;\n        while (this._responseQueueTimeSamples < this._queueTimes.length) {\n            this._queueTimes.shift();\n        }\n    }\n    database(databaseName, database) {\n        if (database === null) {\n            this._databases.delete(databaseName);\n            return undefined;\n        }\n        if (!database) {\n            return this._databases.get(databaseName);\n        }\n        this._databases.set(databaseName, database);\n        return database;\n    }\n    /**\n     * @internal\n     *\n     * Adds the given URL or URLs to the host list.\n     *\n     * See {@link Connection.acquireHostList}.\n     *\n     * @param urls - URL or URLs to add.\n     */\n    addToHostList(urls) {\n        const cleanUrls = (Array.isArray(urls) ? urls : [urls]).map((url) => normalizeUrl_1.normalizeUrl(url));\n        const newUrls = cleanUrls.filter((url) => this._urls.indexOf(url) === -1);\n        this._urls.push(...newUrls);\n        this._hosts.push(...newUrls.map((url) => request_1.createRequest(url, this._agentOptions, this._agent)));\n        return cleanUrls.map((url) => this._urls.indexOf(url));\n    }\n    /**\n     * @internal\n     *\n     * Sets the connection's active `transactionId`.\n     *\n     * While set, all requests will use this ID, ensuring the requests are executed\n     * within the transaction if possible. Setting the ID manually may cause\n     * unexpected behavior.\n     *\n     * See also {@link Connection.clearTransactionId}.\n     *\n     * @param transactionId - ID of the active transaction.\n     */\n    setTransactionId(transactionId) {\n        this._transactionId = transactionId;\n    }\n    /**\n     * @internal\n     *\n     * Clears the connection's active `transactionId`.\n     */\n    clearTransactionId() {\n        this._transactionId = null;\n    }\n    /**\n     * @internal\n     *\n     * Sets the header `headerName` with the given `value` or clears the header if\n     * `value` is `null`.\n     *\n     * @param headerName - Name of the header to set.\n     * @param value - Value of the header.\n     */\n    setHeader(headerName, value) {\n        if (value === null) {\n            delete this._headers[headerName];\n        }\n        else {\n            this._headers[headerName] = value;\n        }\n    }\n    /**\n     * @internal\n     *\n     * Closes all open connections.\n     *\n     * See {@link Database.close}.\n     */\n    close() {\n        for (const host of this._hosts) {\n            if (host.close)\n                host.close();\n        }\n    }\n    /**\n     * @internal\n     *\n     * Waits for propagation.\n     *\n     * See {@link Database.waitForPropagation}.\n     *\n     * @param request - Request to perform against each coordinator.\n     * @param timeout - Maximum number of milliseconds to wait for propagation.\n     */\n    async waitForPropagation(request, timeout = Infinity) {\n        const numHosts = this._hosts.length;\n        const propagated = [];\n        const started = Date.now();\n        let host = 0;\n        while (true) {\n            if (propagated.length === numHosts) {\n                return;\n            }\n            while (propagated.includes(host)) {\n                host = (host + 1) % numHosts;\n            }\n            try {\n                await this.request({ ...request, host });\n            }\n            catch (e) {\n                if (started + timeout < Date.now()) {\n                    throw e;\n                }\n                await new Promise((resolve) => setTimeout(resolve, 1000));\n                continue;\n            }\n            if (!propagated.includes(host)) {\n                propagated.push(host);\n            }\n        }\n    }\n    /**\n     * @internal\n     *\n     * Performs a request using the arangojs connection pool.\n     */\n    request({ host, method = \"GET\", body, expectBinary = false, isBinary = false, allowDirtyRead = false, timeout = 0, headers, ...urlInfo }, transform) {\n        return new Promise((resolve, reject) => {\n            let contentType = \"text/plain\";\n            if (isBinary) {\n                contentType = \"application/octet-stream\";\n            }\n            else if (body) {\n                if (typeof body === \"object\") {\n                    body = JSON.stringify(body);\n                    contentType = \"application/json\";\n                }\n                else {\n                    body = String(body);\n                }\n            }\n            const extraHeaders = {\n                ...this._headers,\n                \"content-type\": contentType,\n                \"x-arango-version\": String(this._arangoVersion),\n            };\n            if (this._transactionId) {\n                extraHeaders[\"x-arango-trx-id\"] = this._transactionId;\n            }\n            const task = {\n                retries: 0,\n                host,\n                allowDirtyRead,\n                options: {\n                    url: this._buildUrl(urlInfo),\n                    headers: { ...extraHeaders, ...headers },\n                    timeout,\n                    method,\n                    expectBinary,\n                    body,\n                },\n                reject,\n                resolve: (res) => {\n                    const contentType = res.headers[\"content-type\"];\n                    const queueTime = res.headers[\"x-arango-queue-time-seconds\"];\n                    if (queueTime) {\n                        this._queueTimes.push([Date.now(), Number(queueTime)]);\n                        while (this._responseQueueTimeSamples < this._queueTimes.length) {\n                            this._queueTimes.shift();\n                        }\n                    }\n                    let parsedBody = undefined;\n                    if (res.body.length && contentType && contentType.match(MIME_JSON)) {\n                        try {\n                            parsedBody = res.body;\n                            parsedBody = JSON.parse(parsedBody);\n                        }\n                        catch (e) {\n                            if (!expectBinary) {\n                                if (typeof parsedBody !== \"string\") {\n                                    parsedBody = res.body.toString(\"utf-8\");\n                                }\n                                e.response = res;\n                                if (task.stack) {\n                                    e.stack += task.stack();\n                                }\n                                reject(e);\n                                return;\n                            }\n                        }\n                    }\n                    else if (res.body && !expectBinary) {\n                        parsedBody = res.body.toString(\"utf-8\");\n                    }\n                    else {\n                        parsedBody = res.body;\n                    }\n                    if (error_1.isArangoErrorResponse(parsedBody)) {\n                        res.body = parsedBody;\n                        const err = new error_1.ArangoError(res);\n                        if (task.stack) {\n                            err.stack += task.stack();\n                        }\n                        reject(err);\n                    }\n                    else if (res.statusCode && res.statusCode >= 400) {\n                        res.body = parsedBody;\n                        const err = new error_1.HttpError(res);\n                        if (task.stack) {\n                            err.stack += task.stack();\n                        }\n                        reject(err);\n                    }\n                    else {\n                        if (!expectBinary)\n                            res.body = parsedBody;\n                        resolve(transform ? transform(res) : res);\n                    }\n                },\n            };\n            if (this._precaptureStackTraces) {\n                if (typeof Error.captureStackTrace === \"function\") {\n                    const capture = {};\n                    Error.captureStackTrace(capture);\n                    task.stack = () => `\\n${capture.stack.split(\"\\n\").slice(3).join(\"\\n\")}`;\n                }\n                else {\n                    const capture = generateStackTrace();\n                    if (Object.prototype.hasOwnProperty.call(capture, \"stack\")) {\n                        task.stack = () => `\\n${capture.stack.split(\"\\n\").slice(4).join(\"\\n\")}`;\n                    }\n                }\n            }\n            this._queue.push(task);\n            this._runQueue();\n        });\n    }\n}\nexports.Connection = Connection;\n//# sourceMappingURL=connection.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/arangojs/connection.js\n");

/***/ }),

/***/ "./node_modules/arangojs/cursor.js":
/*!*****************************************!*\
  !*** ./node_modules/arangojs/cursor.js ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ArrayCursor = exports.BatchedArrayCursor = void 0;\n/**\n * ```ts\n * import type { ArrayCursor, BatchedArrayCursor } from \"arangojs/cursor\";\n * ```\n *\n * The \"cursor\" module provides cursor-related interfaces for TypeScript.\n *\n * @packageDocumentation\n */\nconst x3_linkedlist_1 = __webpack_require__(/*! x3-linkedlist */ \"./node_modules/x3-linkedlist/dist/index.js\");\n/**\n * The `BatchedArrayCursor` provides a batch-wise API to an {@link ArrayCursor}.\n *\n * When using TypeScript, cursors can be cast to a specific item type in order\n * to increase type safety.\n *\n * @param T - Type to use for each item. Defaults to `any`.\n *\n * @example\n * ```ts\n * const db = new Database();\n * const query = aql`FOR x IN 1..5 RETURN x`;\n * const cursor = await db.query(query) as ArrayCursor<number>;\n * const batches = cursor.batches;\n * ```\n *\n * @example\n * ```js\n * const db = new Database();\n * const query = aql`FOR x IN 1..10000 RETURN x`;\n * const cursor = await db.query(query, { batchSize: 10 });\n * for await (const batch of cursor.batches) {\n *   // Process all values in a batch in parallel\n *   await Promise.all(batch.map(\n *     value => asyncProcessValue(value)\n *   ));\n * }\n * ```\n */\nclass BatchedArrayCursor {\n    /**\n     * @internal\n     * @hidden\n     */\n    constructor(db, body, host, allowDirtyRead) {\n        const batches = new x3_linkedlist_1.LinkedList(body.result.length ? [new x3_linkedlist_1.LinkedList(body.result)] : []);\n        this._db = db;\n        this._batches = batches;\n        this._id = body.id;\n        this._hasMore = Boolean(body.id && body.hasMore);\n        this._host = host;\n        this._count = body.count;\n        this._extra = body.extra;\n        this._allowDirtyRead = allowDirtyRead;\n        this._itemsCursor = new ArrayCursor(this, {\n            get isEmpty() {\n                return !batches.length;\n            },\n            more: () => this._more(),\n            shift: () => {\n                var _a, _b;\n                let batch = (_a = batches.first) === null || _a === void 0 ? void 0 : _a.value;\n                while (batch && !batch.length) {\n                    batches.shift();\n                    batch = (_b = batches.first) === null || _b === void 0 ? void 0 : _b.value;\n                }\n                if (!batch)\n                    return undefined;\n                const value = batch.shift();\n                if (!batch.length)\n                    batches.shift();\n                return value;\n            },\n        });\n    }\n    async _more() {\n        if (!this.hasMore)\n            return;\n        const res = await this._db.request({\n            method: \"PUT\",\n            path: `/_api/cursor/${encodeURIComponent(this._id)}`,\n            host: this._host,\n            allowDirtyRead: this._allowDirtyRead,\n        });\n        this._batches.push(new x3_linkedlist_1.LinkedList(res.body.result));\n        this._hasMore = res.body.hasMore;\n    }\n    /**\n     * An {@link ArrayCursor} providing item-wise access to the cursor result set.\n     *\n     * See also {@link ArrayCursor.batches}.\n     */\n    get items() {\n        return this._itemsCursor;\n    }\n    /**\n     * Additional information about the cursor.\n     */\n    get extra() {\n        return this._extra;\n    }\n    /**\n     * Total number of documents in the query result. Only available if the\n     * `count` option was used.\n     */\n    get count() {\n        return this._count;\n    }\n    /**\n     * Whether the cursor has any remaining batches that haven't yet been\n     * fetched. If set to `false`, all batches have been fetched and no\n     * additional requests to the server will be made when consuming any\n     * remaining batches from this cursor.\n     */\n    get hasMore() {\n        return this._hasMore;\n    }\n    /**\n     * Whether the cursor has more batches. If set to `false`, the cursor has\n     * already been depleted and contains no more batches.\n     */\n    get hasNext() {\n        return this.hasMore || Boolean(this._batches.length);\n    }\n    /**\n     * Enables use with `for await` to deplete the cursor by asynchronously\n     * yielding every batch in the cursor's remaining result set.\n     *\n     * **Note**: If the result set spans multiple batches, any remaining batches\n     * will only be fetched on demand. Depending on the cursor's TTL and the\n     * processing speed, this may result in the server discarding the cursor\n     * before it is fully depleted.\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(aql`\n     *   FOR user IN users\n     *   FILTER user.isActive\n     *   RETURN user\n     * `);\n     * for await (const users of cursor.batches) {\n     *   for (const user of users) {\n     *     console.log(user.email, user.isAdmin);\n     *   }\n     * }\n     * ```\n     */\n    async *[Symbol.asyncIterator]() {\n        while (this.hasNext) {\n            yield this.next();\n        }\n        return undefined;\n    }\n    /**\n     * Loads all remaining batches from the server.\n     *\n     * **Warning**: This may impact memory use when working with very large\n     * query result sets.\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(\n     *   aql`FOR x IN 1..5 RETURN x`,\n     *   { batchSize: 1 }\n     * );\n     * console.log(cursor.hasMore); // true\n     * await cursor.batches.loadAll();\n     * console.log(cursor.hasMore); // false\n     * console.log(cursor.hasNext); // true\n     * for await (const item of cursor) {\n     *   console.log(item);\n     *   // No server roundtrips necessary any more\n     * }\n     * ```\n     */\n    async loadAll() {\n        while (this._hasMore) {\n            await this._more();\n        }\n    }\n    /**\n     * Depletes the cursor, then returns an array containing all batches in the\n     * cursor's remaining result list.\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(\n     *   aql`FOR x IN 1..5 RETURN x`,\n     *   { batchSize: 2 }\n     * );\n     * const result = await cursor.batches.all(); // [[1, 2], [3, 4], [5]]\n     * console.log(cursor.hasNext); // false\n     * ```\n     */\n    async all() {\n        return this.map((batch) => batch);\n    }\n    /**\n     * Advances the cursor and returns all remaining values in the cursor's\n     * current batch. If the current batch has already been exhausted, fetches\n     * the next batch from the server and returns it, or `undefined` if the\n     * cursor has been depleted.\n     *\n     * **Note**: If the result set spans multiple batches, any remaining batches\n     * will only be fetched on demand. Depending on the cursor's TTL and the\n     * processing speed, this may result in the server discarding the cursor\n     * before it is fully depleted.\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(\n     *   aql`FOR i IN 1..10 RETURN i`,\n     *   { batchSize: 5 }\n     * );\n     * const firstBatch = await cursor.batches.next(); // [1, 2, 3, 4, 5]\n     * await cursor.next(); // 6\n     * const lastBatch = await cursor.batches.next(); // [7, 8, 9, 10]\n     * console.log(cursor.hasNext); // false\n     * ```\n     */\n    async next() {\n        while (!this._batches.length && this.hasNext) {\n            await this._more();\n        }\n        if (!this._batches.length) {\n            return undefined;\n        }\n        const batch = this._batches.shift();\n        if (!batch)\n            return undefined;\n        const values = [...batch.values()];\n        batch.clear(true);\n        return values;\n    }\n    /**\n     * Advances the cursor by applying the `callback` function to each item in\n     * the cursor's remaining result list until the cursor is depleted or\n     * `callback` returns the exact value `false`. Returns a promise that\n     * evalues to `true` unless the function returned `false`.\n     *\n     * **Note**: If the result set spans multiple batches, any remaining batches\n     * will only be fetched on demand. Depending on the cursor's TTL and the\n     * processing speed, this may result in the server discarding the cursor\n     * before it is fully depleted.\n     *\n     * See also:\n     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach | `Array.prototype.forEach`}.\n     *\n     * @param callback - Function to execute on each element.\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(\n     *   aql`FOR x IN 1..5 RETURN x`,\n     *   { batchSize: 2 }\n     * );\n     * const result = await cursor.batches.forEach((currentBatch) => {\n     *   for (const value of currentBatch) {\n     *     console.log(value);\n     *   }\n     * });\n     * console.log(result) // true\n     * console.log(cursor.hasNext); // false\n     * ```\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(\n     *   aql`FOR x IN 1..5 RETURN x`,\n     *   { batchSize: 2 }\n     * );\n     * const result = await cursor.batches.forEach((currentBatch) => {\n     *   for (const value of currentBatch) {\n     *     console.log(value);\n     *   }\n     *   return false; // stop after the first batch\n     * });\n     * console.log(result); // false\n     * console.log(cursor.hasNext); // true\n     * ```\n     */\n    async forEach(callback) {\n        let index = 0;\n        while (this.hasNext) {\n            const currentBatch = await this.next();\n            const result = callback(currentBatch, index, this);\n            index++;\n            if (result === false)\n                return result;\n            if (this.hasNext)\n                await this._more();\n        }\n        return true;\n    }\n    /**\n     * Depletes the cursor by applying the `callback` function to each batch in\n     * the cursor's remaining result list. Returns an array containing the\n     * return values of `callback` for each batch.\n     *\n     * **Note**: This creates an array of all return values, which may impact\n     * memory use when working with very large query result sets. Consider using\n     * {@link BatchedArrayCursor.forEach}, {@link BatchedArrayCursor.reduce} or\n     * {@link BatchedArrayCursor.flatMap} instead.\n     *\n     * See also:\n     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map | `Array.prototype.map`}.\n     *\n     * @param R - Return type of the `callback` function.\n     * @param callback - Function to execute on each element.\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(\n     *   aql`FOR x IN 1..5 RETURN x`,\n     *   { batchSize: 2 }\n     * );\n     * const squares = await cursor.batches.map((currentBatch) => {\n     *   return currentBatch.map((value) => value ** 2);\n     * });\n     * console.log(squares); // [[1, 4], [9, 16], [25]]\n     * console.log(cursor.hasNext); // false\n     * ```\n     */\n    async map(callback) {\n        let index = 0;\n        const result = [];\n        while (this.hasNext) {\n            const currentBatch = await this.next();\n            result.push(callback(currentBatch, index, this));\n            index++;\n        }\n        return result;\n    }\n    /**\n     * Depletes the cursor by applying the `callback` function to each batch in\n     * the cursor's remaining result list. Returns an array containing the\n     * return values of `callback` for each batch, flattened to a depth of 1.\n     *\n     * **Note**: If the result set spans multiple batches, any remaining batches\n     * will only be fetched on demand. Depending on the cursor's TTL and the\n     * processing speed, this may result in the server discarding the cursor\n     * before it is fully depleted.\n     *\n     * See also:\n     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap | `Array.prototype.flatMap`}.\n     *\n     * @param R - Return type of the `callback` function.\n     * @param callback - Function to execute on each element.\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(\n     *   aql`FOR x IN 1..5 RETURN x`,\n     *   { batchSize: 2 }\n     * );\n     * const squares = await cursor.batches.flatMap((currentBatch) => {\n     *   return currentBatch.map((value) => value ** 2);\n     * });\n     * console.log(squares); // [1, 1, 2, 4, 3, 9, 4, 16, 5, 25]\n     * console.log(cursor.hasNext); // false\n     * ```\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(\n     *   aql`FOR x IN 1..5 RETURN x`,\n     *   { batchSize: 1 }\n     * );\n     * const odds = await cursor.batches.flatMap((currentBatch) => {\n     *   if (currentBatch[0] % 2 === 0) {\n     *     return []; // empty array flattens into nothing\n     *   }\n     *   return currentBatch;\n     * });\n     * console.logs(odds); // [1, 3, 5]\n     * ```\n     */\n    async flatMap(callback) {\n        let index = 0;\n        const result = [];\n        while (this.hasNext) {\n            const currentBatch = await this.next();\n            const value = callback(currentBatch, index, this);\n            if (Array.isArray(value)) {\n                result.push(...value);\n            }\n            else {\n                result.push(value);\n            }\n            index++;\n        }\n        return result;\n    }\n    async reduce(reducer, initialValue) {\n        let index = 0;\n        if (!this.hasNext)\n            return initialValue;\n        if (initialValue === undefined) {\n            initialValue = (await this.next());\n            index += 1;\n        }\n        let value = initialValue;\n        while (this.hasNext) {\n            const currentBatch = await this.next();\n            value = reducer(value, currentBatch, index, this);\n            index++;\n        }\n        return value;\n    }\n    /**\n     * Drains the cursor and frees up associated database resources.\n     *\n     * This method has no effect if all batches have already been consumed.\n     *\n     * @example\n     * ```js\n     * const cursor1 = await db.query(aql`FOR x IN 1..5 RETURN x`);\n     * console.log(cursor1.hasMore); // false\n     * await cursor1.kill(); // no effect\n     *\n     * const cursor2 = await db.query(\n     *   aql`FOR x IN 1..5 RETURN x`,\n     *   { batchSize: 2 }\n     * );\n     * console.log(cursor2.hasMore); // true\n     * await cursor2.kill(); // cursor is depleted\n     * ```\n     */\n    async kill() {\n        if (this._batches.length) {\n            for (const batch of this._batches.values()) {\n                batch.clear();\n            }\n            this._batches.clear();\n        }\n        if (!this.hasNext)\n            return undefined;\n        return this._db.request({\n            method: \"DELETE\",\n            path: `/_api/cursor/${encodeURIComponent(this._id)}`,\n        }, () => {\n            this._hasMore = false;\n            return undefined;\n        });\n    }\n}\nexports.BatchedArrayCursor = BatchedArrayCursor;\n/**\n * The `ArrayCursor` type represents a cursor returned from a\n * {@link Database.query}.\n *\n * When using TypeScript, cursors can be cast to a specific item type in order\n * to increase type safety.\n *\n * See also {@link BatchedArrayCursor}.\n *\n * @param T - Type to use for each item. Defaults to `any`.\n *\n * @example\n * ```ts\n * const db = new Database();\n * const query = aql`FOR x IN 1..5 RETURN x`;\n * const result = await db.query(query) as ArrayCursor<number>;\n * ```\n *\n * @example\n * ```js\n * const db = new Database();\n * const query = aql`FOR x IN 1..10 RETURN x`;\n * const cursor = await db.query(query);\n * for await (const value of cursor) {\n *   // Process each value asynchronously\n *   await processValue(value);\n * }\n * ```\n */\nclass ArrayCursor {\n    constructor(batchedCursor, view) {\n        this._batches = batchedCursor;\n        this._view = view;\n    }\n    /**\n     * A {@link BatchedArrayCursor} providing batch-wise access to the cursor\n     * result set.\n     *\n     * See also {@link BatchedArrayCursor.items}.\n     */\n    get batches() {\n        return this._batches;\n    }\n    /**\n     * Additional information about the cursor.\n     */\n    get extra() {\n        return this.batches.extra;\n    }\n    /**\n     * Total number of documents in the query result. Only available if the\n     * `count` option was used.\n     */\n    get count() {\n        return this.batches.count;\n    }\n    /**\n     * Whether the cursor has more values. If set to `false`, the cursor has\n     * already been depleted and contains no more items.\n     */\n    get hasNext() {\n        return this.batches.hasNext;\n    }\n    /**\n     * Enables use with `for await` to deplete the cursor by asynchronously\n     * yielding every value in the cursor's remaining result set.\n     *\n     * **Note**: If the result set spans multiple batches, any remaining batches\n     * will only be fetched on demand. Depending on the cursor's TTL and the\n     * processing speed, this may result in the server discarding the cursor\n     * before it is fully depleted.\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(aql`\n     *   FOR user IN users\n     *   FILTER user.isActive\n     *   RETURN user\n     * `);\n     * for await (const user of cursor) {\n     *   console.log(user.email, user.isAdmin);\n     * }\n     * ```\n     */\n    async *[Symbol.asyncIterator]() {\n        while (this.hasNext) {\n            yield this.next();\n        }\n        return undefined;\n    }\n    /**\n     * Depletes the cursor, then returns an array containing all values in the\n     * cursor's remaining result list.\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\n     * const result = await cursor.all(); // [1, 2, 3, 4, 5]\n     * console.log(cursor.hasNext); // false\n     * ```\n     */\n    async all() {\n        return this.batches.flatMap((v) => v);\n    }\n    /**\n     * Advances the cursor and returns the next value in the cursor's remaining\n     * result list, or `undefined` if the cursor has been depleted.\n     *\n     * **Note**: If the result set spans multiple batches, any remaining batches\n     * will only be fetched on demand. Depending on the cursor's TTL and the\n     * processing speed, this may result in the server discarding the cursor\n     * before it is fully depleted.\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(aql`FOR x IN 1..3 RETURN x`);\n     * const one = await cursor.next(); // 1\n     * const two = await cursor.next(); // 2\n     * const three = await cursor.next(); // 3\n     * const empty = await cursor.next(); // undefined\n     * ```\n     */\n    async next() {\n        while (this._view.isEmpty && this.batches.hasMore) {\n            await this._view.more();\n        }\n        if (this._view.isEmpty) {\n            return undefined;\n        }\n        return this._view.shift();\n    }\n    /**\n     * Advances the cursor by applying the `callback` function to each item in\n     * the cursor's remaining result list until the cursor is depleted or\n     * `callback` returns the exact value `false`. Returns a promise that\n     * evalues to `true` unless the function returned `false`.\n     *\n     * **Note**: If the result set spans multiple batches, any remaining batches\n     * will only be fetched on demand. Depending on the cursor's TTL and the\n     * processing speed, this may result in the server discarding the cursor\n     * before it is fully depleted.\n     *\n     * See also:\n     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach | `Array.prototype.forEach`}.\n     *\n     * @param callback - Function to execute on each element.\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\n     * const result = await cursor.forEach((currentValue) => {\n     *   console.log(currentValue);\n     * });\n     * console.log(result) // true\n     * console.log(cursor.hasNext); // false\n     * ```\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\n     * const result = await cursor.forEach((currentValue) => {\n     *   console.log(currentValue);\n     *   return false; // stop after the first item\n     * });\n     * console.log(result); // false\n     * console.log(cursor.hasNext); // true\n     * ```\n     */\n    async forEach(callback) {\n        let index = 0;\n        while (this.hasNext) {\n            const value = await this.next();\n            const result = callback(value, index, this);\n            index++;\n            if (result === false)\n                return result;\n        }\n        return true;\n    }\n    /**\n     * Depletes the cursor by applying the `callback` function to each item in\n     * the cursor's remaining result list. Returns an array containing the\n     * return values of `callback` for each item.\n     *\n     * **Note**: This creates an array of all return values, which may impact\n     * memory use when working with very large query result sets. Consider using\n     * {@link ArrayCursor.forEach}, {@link ArrayCursor.reduce} or\n     * {@link ArrayCursor.flatMap} instead.\n     *\n     * See also:\n     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map | `Array.prototype.map`}.\n     *\n     * @param R - Return type of the `callback` function.\n     * @param callback - Function to execute on each element.\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\n     * const squares = await cursor.map((currentValue) => {\n     *   return currentValue ** 2;\n     * });\n     * console.log(squares); // [1, 4, 9, 16, 25]\n     * console.log(cursor.hasNext); // false\n     * ```\n     */\n    async map(callback) {\n        let index = 0;\n        const result = [];\n        while (this.hasNext) {\n            const value = await this.next();\n            result.push(callback(value, index, this));\n            index++;\n        }\n        return result;\n    }\n    /**\n     * Depletes the cursor by applying the `callback` function to each item in\n     * the cursor's remaining result list. Returns an array containing the\n     * return values of `callback` for each item, flattened to a depth of 1.\n     *\n     * **Note**: If the result set spans multiple batches, any remaining batches\n     * will only be fetched on demand. Depending on the cursor's TTL and the\n     * processing speed, this may result in the server discarding the cursor\n     * before it is fully depleted.\n     *\n     * See also:\n     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap | `Array.prototype.flatMap`}.\n     *\n     * @param R - Return type of the `callback` function.\n     * @param callback - Function to execute on each element.\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\n     * const squares = await cursor.flatMap((currentValue) => {\n     *   return [currentValue, currentValue ** 2];\n     * });\n     * console.log(squares); // [1, 1, 2, 4, 3, 9, 4, 16, 5, 25]\n     * console.log(cursor.hasNext); // false\n     * ```\n     *\n     * @example\n     * ```js\n     * const cursor = await db.query(aql`FOR x IN 1..5 RETURN x`);\n     * const odds = await cursor.flatMap((currentValue) => {\n     *   if (currentValue % 2 === 0) {\n     *     return []; // empty array flattens into nothing\n     *   }\n     *   return currentValue; // or [currentValue]\n     * });\n     * console.logs(odds); // [1, 3, 5]\n     * ```\n     */\n    async flatMap(callback) {\n        let index = 0;\n        const result = [];\n        while (this.hasNext) {\n            const value = await this.next();\n            const item = callback(value, index, this);\n            if (Array.isArray(item)) {\n                result.push(...item);\n            }\n            else {\n                result.push(item);\n            }\n            index++;\n        }\n        return result;\n    }\n    async reduce(reducer, initialValue) {\n        let index = 0;\n        if (!this.hasNext)\n            return initialValue;\n        if (initialValue === undefined) {\n            const value = (await this.next());\n            initialValue = value;\n            index += 1;\n        }\n        let value = initialValue;\n        while (this.hasNext) {\n            const item = await this.next();\n            value = reducer(value, item, index, this);\n            index++;\n        }\n        return value;\n    }\n    /**\n     * Kills the cursor and frees up associated database resources.\n     *\n     * This method has no effect if all batches have already been fetched.\n     *\n     * @example\n     * ```js\n     * const cursor1 = await db.query(aql`FOR x IN 1..5 RETURN x`);\n     * console.log(cursor1.hasMore); // false\n     * await cursor1.kill(); // no effect\n     *\n     * const cursor2 = await db.query(\n     *   aql`FOR x IN 1..5 RETURN x`,\n     *   { batchSize: 2 }\n     * );\n     * console.log(cursor2.hasMore); // true\n     * await cursor2.kill(); // cursor is depleted\n     * ```\n     */\n    async kill() {\n        return this.batches.kill();\n    }\n}\nexports.ArrayCursor = ArrayCursor;\n//# sourceMappingURL=cursor.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/arangojs/cursor.js\n");

/***/ }),

/***/ "./node_modules/arangojs/database.js":
/*!*******************************************!*\
  !*** ./node_modules/arangojs/database.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Database = exports.isArangoDatabase = void 0;\nconst analyzer_1 = __webpack_require__(/*! ./analyzer */ \"./node_modules/arangojs/analyzer.js\");\nconst aql_1 = __webpack_require__(/*! ./aql */ \"./node_modules/arangojs/aql.js\");\nconst collection_1 = __webpack_require__(/*! ./collection */ \"./node_modules/arangojs/collection.js\");\nconst connection_1 = __webpack_require__(/*! ./connection */ \"./node_modules/arangojs/connection.js\");\nconst cursor_1 = __webpack_require__(/*! ./cursor */ \"./node_modules/arangojs/cursor.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"./node_modules/arangojs/error.js\");\nconst graph_1 = __webpack_require__(/*! ./graph */ \"./node_modules/arangojs/graph.js\");\nconst codes_1 = __webpack_require__(/*! ./lib/codes */ \"./node_modules/arangojs/lib/codes.js\");\nconst multipart_1 = __webpack_require__(/*! ./lib/multipart */ \"./node_modules/arangojs/lib/multipart.web.js\");\nconst route_1 = __webpack_require__(/*! ./route */ \"./node_modules/arangojs/route.js\");\nconst transaction_1 = __webpack_require__(/*! ./transaction */ \"./node_modules/arangojs/transaction.js\");\nconst view_1 = __webpack_require__(/*! ./view */ \"./node_modules/arangojs/view.js\");\n/**\n * Indicates whether the given value represents a {@link Database}.\n *\n * @param database - A value that might be a database.\n */\nfunction isArangoDatabase(database) {\n    return Boolean(database && database.isArangoDatabase);\n}\nexports.isArangoDatabase = isArangoDatabase;\n/**\n * @internal\n * @hidden\n */\nfunction coerceTransactionCollections(collections) {\n    if (typeof collections === \"string\") {\n        return { write: [collections] };\n    }\n    if (Array.isArray(collections)) {\n        return { write: collections.map(collection_1.collectionToString) };\n    }\n    if (collection_1.isArangoCollection(collections)) {\n        return { write: collection_1.collectionToString(collections) };\n    }\n    const cols = {};\n    if (collections) {\n        if (collections.allowImplicit !== undefined) {\n            cols.allowImplicit = collections.allowImplicit;\n        }\n        if (collections.read) {\n            cols.read = Array.isArray(collections.read)\n                ? collections.read.map(collection_1.collectionToString)\n                : collection_1.collectionToString(collections.read);\n        }\n        if (collections.write) {\n            cols.write = Array.isArray(collections.write)\n                ? collections.write.map(collection_1.collectionToString)\n                : collection_1.collectionToString(collections.write);\n        }\n        if (collections.exclusive) {\n            cols.exclusive = Array.isArray(collections.exclusive)\n                ? collections.exclusive.map(collection_1.collectionToString)\n                : collection_1.collectionToString(collections.exclusive);\n        }\n    }\n    return cols;\n}\n/**\n * An object representing a single ArangoDB database. All arangojs collections,\n * cursors, analyzers and so on are linked to a `Database` object.\n */\nclass Database {\n    // There's currently no way to hide a single overload from typedoc\n    // /**\n    //  * @internal\n    //  * @hidden\n    //  */\n    // constructor(database: Database, name?: string);\n    constructor(configOrDatabase = {}, name) {\n        this._analyzers = new Map();\n        this._collections = new Map();\n        this._graphs = new Map();\n        this._views = new Map();\n        if (isArangoDatabase(configOrDatabase)) {\n            const connection = configOrDatabase._connection;\n            const databaseName = (name || configOrDatabase.name).normalize(\"NFC\");\n            this._connection = connection;\n            this._name = databaseName;\n            const database = connection.database(databaseName);\n            if (database)\n                return database;\n        }\n        else {\n            const config = configOrDatabase;\n            const { databaseName, ...options } = typeof config === \"string\" || Array.isArray(config)\n                ? { databaseName: name, url: config }\n                : config;\n            this._connection = new connection_1.Connection(options);\n            this._name = (databaseName === null || databaseName === void 0 ? void 0 : databaseName.normalize(\"NFC\")) || \"_system\";\n        }\n    }\n    //#region misc\n    /**\n     * @internal\n     *\n     * Indicates that this object represents an ArangoDB database.\n     */\n    get isArangoDatabase() {\n        return true;\n    }\n    /**\n     * Name of the ArangoDB database this instance represents.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * Fetches version information from the ArangoDB server.\n     *\n     * @param details - If set to `true`, additional information about the\n     * ArangoDB server will be available as the `details` property.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const version = await db.version();\n     * // the version object contains the ArangoDB version information.\n     * // license: \"community\" or \"enterprise\"\n     * // version: ArangoDB version number\n     * // server: description of the server\n     * ```\n     */\n    version(details) {\n        return this.request({\n            method: \"GET\",\n            path: \"/_api/version\",\n            qs: { details },\n        }, (res) => res.body);\n    }\n    /**\n     * Returns a new {@link Route} instance for the given path (relative to the\n     * database) that can be used to perform arbitrary HTTP requests.\n     *\n     * @param path - The database-relative URL of the route. Defaults to the\n     * database API root.\n     * @param headers - Default headers that should be sent with each request to\n     * the route.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const myFoxxService = db.route(\"my-foxx-service\");\n     * const response = await myFoxxService.post(\"users\", {\n     *   username: \"admin\",\n     *   password: \"hunter2\"\n     * });\n     * // response.body is the result of\n     * // POST /_db/_system/my-foxx-service/users\n     * // with JSON request body '{\"username\": \"admin\", \"password\": \"hunter2\"}'\n     * ```\n     */\n    route(path, headers) {\n        return new route_1.Route(this, path, headers);\n    }\n    request({ absolutePath = false, basePath, ...opts }, transform) {\n        if (!absolutePath) {\n            basePath = `/_db/${encodeURIComponent(this._name)}${basePath || \"\"}`;\n        }\n        return this._connection.request({ basePath, ...opts }, transform);\n    }\n    /**\n     * Updates the URL list by requesting a list of all coordinators in the\n     * cluster and adding any endpoints not initially specified in the\n     * {@link Config}.\n     *\n     * For long-running processes communicating with an ArangoDB cluster it is\n     * recommended to run this method periodically (e.g. once per hour) to make\n     * sure new coordinators are picked up correctly and can be used for\n     * fail-over or load balancing.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const interval = setInterval(\n     *   () => db.acquireHostList(),\n     *   5 * 60 * 1000 // every 5 minutes\n     * );\n     *\n     * // later\n     * clearInterval(interval);\n     * db.close();\n     * ```\n     */\n    async acquireHostList() {\n        const urls = await this.request({ path: \"/_api/cluster/endpoints\" }, (res) => res.body.endpoints.map((endpoint) => endpoint.endpoint));\n        this._connection.addToHostList(urls);\n    }\n    /**\n     * Closes all active connections of this database instance.\n     *\n     * Can be used to clean up idling connections during longer periods of\n     * inactivity.\n     *\n     * **Note**: This method currently has no effect in the browser version of\n     * arangojs.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const sessions = db.collection(\"sessions\");\n     * // Clean up expired sessions once per hour\n     * setInterval(async () => {\n     *   await db.query(aql`\n     *     FOR session IN ${sessions}\n     *     FILTER session.expires < DATE_NOW()\n     *     REMOVE session IN ${sessions}\n     *   `);\n     *   // Making sure to close the connections because they're no longer used\n     *   db.close();\n     * }, 1000 * 60 * 60);\n     * ```\n     */\n    close() {\n        this._connection.close();\n    }\n    async waitForPropagation({ basePath, ...request }, timeout) {\n        await this._connection.waitForPropagation({\n            ...request,\n            basePath: `/_db/${encodeURIComponent(this._name)}${basePath || \"\"}`,\n        }, timeout);\n    }\n    /**\n     * Methods for accessing the server-reported queue times of the mostly\n     * recently received responses.\n     */\n    get queueTime() {\n        return this._connection.queueTime;\n    }\n    /**\n     * Sets the limit for the number of values of the most recently received\n     * server-reported queue times that can be accessed using\n     * {@link Database.queueTime}.\n     *\n     * @param responseQueueTimeSamples - Number of values to maintain.\n     */\n    setResponseQueueTimeSamples(responseQueueTimeSamples) {\n        this._connection.setResponseQueueTimeSamples(responseQueueTimeSamples);\n    }\n    //#endregion\n    //#region auth\n    /**\n     * Updates the `Database` instance and its connection string to use the given\n     * `databaseName`, then returns itself.\n     *\n     * **Note**: This also affects all collections, cursors and other arangojs\n     * objects originating from this database object, which may cause unexpected\n     * results.\n     *\n     * @param databaseName - Name of the database to use.\n     *\n     * @deprecated Use {@link Database.database} instead.\n     *\n     * @example\n     * ```js\n     * const systemDb = new Database();\n     * // systemDb.useDatabase(\"my_database\"); // deprecated\n     * const myDb = systemDb.database(\"my_database\");\n     * ```\n     */\n    useDatabase(databaseName) {\n        this._connection.database(this._name, null);\n        this._name = databaseName.normalize(\"NFC\");\n        return this;\n    }\n    /**\n     * Updates the `Database` instance's `authorization` header to use Basic\n     * authentication with the given `username` and `password`, then returns\n     * itself.\n     *\n     * @param username - The username to authenticate with.\n     * @param password - The password to authenticate with.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * db.useDatabase(\"test\");\n     * db.useBasicAuth(\"admin\", \"hunter2\");\n     * // The database instance now uses the database \"test\"\n     * // with the username \"admin\" and password \"hunter2\".\n     * ```\n     */\n    useBasicAuth(username = \"root\", password = \"\") {\n        this._connection.setBasicAuth({ username, password });\n        return this;\n    }\n    /**\n     * Updates the `Database` instance's `authorization` header to use Bearer\n     * authentication with the given authentication `token`, then returns itself.\n     *\n     * @param token - The token to authenticate with.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * db.useBearerAuth(\"keyboardcat\");\n     * // The database instance now uses Bearer authentication.\n     * ```\n     */\n    useBearerAuth(token) {\n        this._connection.setBearerAuth({ token });\n        return this;\n    }\n    /**\n     * Validates the given database credentials and exchanges them for an\n     * authentication token, then uses the authentication token for future\n     * requests and returns it.\n     *\n     * @param username - The username to authenticate with.\n     * @param password - The password to authenticate with.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * db.useDatabase(\"test\");\n     * await db.login(\"admin\", \"hunter2\");\n     * // The database instance now uses the database \"test\"\n     * // with an authentication token for the \"admin\" user.\n     * ```\n     */\n    login(username = \"root\", password = \"\") {\n        return this.request({\n            method: \"POST\",\n            path: \"/_open/auth\",\n            body: { username, password },\n        }, (res) => {\n            this.useBearerAuth(res.body.jwt);\n            return res.body.jwt;\n        });\n    }\n    //#endregion\n    //#region databases\n    /**\n     * Creates a new `Database` instance for the given `databaseName` that\n     * shares this database's connection pool.\n     *\n     * See also {@link Database.constructor}.\n     *\n     * @param databaseName - Name of the database.\n     *\n     * @example\n     * ```js\n     * const systemDb = new Database();\n     * const myDb = system.database(\"my_database\");\n     * ```\n     */\n    database(databaseName) {\n        return new Database(this, databaseName);\n    }\n    /**\n     * Fetches the database description for the active database from the server.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const info = await db.get();\n     * // the database exists\n     * ```\n     */\n    get() {\n        return this.request({ path: \"/_api/database/current\" }, (res) => res.body.result);\n    }\n    /**\n     * Checks whether the database exists.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const result = await db.exists();\n     * // result indicates whether the database exists\n     * ```\n     */\n    async exists() {\n        try {\n            await this.get();\n            return true;\n        }\n        catch (err) {\n            if (error_1.isArangoError(err) && err.errorNum === codes_1.DATABASE_NOT_FOUND) {\n                return false;\n            }\n            throw err;\n        }\n    }\n    createDatabase(databaseName, usersOrOptions) {\n        const { users, ...options } = Array.isArray(usersOrOptions)\n            ? { users: usersOrOptions }\n            : usersOrOptions || {};\n        return this.request({\n            method: \"POST\",\n            path: \"/_api/database\",\n            body: { name: databaseName.normalize(\"NFC\"), users, options },\n        }, () => this.database(databaseName));\n    }\n    /**\n     * Fetches all databases from the server and returns an array of their names.\n     *\n     * See also {@link Database.databases} and\n     * {@link Database.listUserDatabases}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const names = await db.listDatabases();\n     * // databases is an array of database names\n     * ```\n     */\n    listDatabases() {\n        return this.request({ path: \"/_api/database\" }, (res) => res.body.result);\n    }\n    /**\n     * Fetches all databases accessible to the active user from the server and\n     * returns an array of their names.\n     *\n     * See also {@link Database.userDatabases} and\n     * {@link Database.listDatabases}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const names = await db.listUserDatabases();\n     * // databases is an array of database names\n     * ```\n     */\n    listUserDatabases() {\n        return this.request({ path: \"/_api/database/user\" }, (res) => res.body.result);\n    }\n    /**\n     * Fetches all databases from the server and returns an array of `Database`\n     * instances for those databases.\n     *\n     * See also {@link Database.listDatabases} and\n     * {@link Database.userDatabases}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const names = await db.databases();\n     * // databases is an array of databases\n     * ```\n     */\n    databases() {\n        return this.request({ path: \"/_api/database\" }, (res) => res.body.result.map((databaseName) => this.database(databaseName)));\n    }\n    /**\n     * Fetches all databases accessible to the active user from the server and\n     * returns an array of `Database` instances for those databases.\n     *\n     * See also {@link Database.listUserDatabases} and\n     * {@link Database.databases}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const names = await db.userDatabases();\n     * // databases is an array of databases\n     * ```\n     */\n    userDatabases() {\n        return this.request({ path: \"/_api/database/user\" }, (res) => res.body.result.map((databaseName) => this.database(databaseName)));\n    }\n    /**\n     * Deletes the database with the given `databaseName` from the server.\n     *\n     * @param databaseName - Name of the database to delete.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * await db.dropDatabase(\"mydb\");\n     * // database \"mydb\" no longer exists\n     * ```\n     */\n    dropDatabase(databaseName) {\n        databaseName = databaseName.normalize(\"NFC\");\n        return this.request({\n            method: \"DELETE\",\n            path: `/_api/database/${encodeURIComponent(databaseName)}`,\n        }, (res) => res.body.result);\n    }\n    //#endregion\n    //#region collections\n    /**\n     * Returns a `Collection` instance for the given collection name.\n     *\n     * In TypeScript the collection implements both the\n     * {@link DocumentCollection} and {@link EdgeCollection} interfaces and can\n     * be cast to either type to enforce a stricter API.\n     *\n     * @param T - Type to use for document data. Defaults to `any`.\n     * @param collectionName - Name of the edge collection.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const collection = db.collection(\"potatoes\");\n     * ```\n     *\n     * @example\n     * ```ts\n     * interface Person {\n     *   name: string;\n     * }\n     * const db = new Database();\n     * const persons = db.collection<Person>(\"persons\");\n     * ```\n     *\n     * @example\n     * ```ts\n     * interface Person {\n     *   name: string;\n     * }\n     * interface Friend {\n     *   startDate: number;\n     *   endDate?: number;\n     * }\n     * const db = new Database();\n     * const documents = db.collection(\"persons\") as DocumentCollection<Person>;\n     * const edges = db.collection(\"friends\") as EdgeCollection<Friend>;\n     * ```\n     */\n    collection(collectionName) {\n        collectionName = collectionName.normalize(\"NFC\");\n        if (!this._collections.has(collectionName)) {\n            this._collections.set(collectionName, new collection_1.Collection(this, collectionName));\n        }\n        return this._collections.get(collectionName);\n    }\n    async createCollection(collectionName, options) {\n        const collection = this.collection(collectionName);\n        await collection.create(options);\n        return collection;\n    }\n    /**\n     * Creates a new edge collection with the given `collectionName` and\n     * `options`, then returns an {@link EdgeCollection} instance for the new\n     * edge collection.\n     *\n     * This is a convenience method for calling {@link Database.createCollection}\n     * with `options.type` set to `EDGE_COLLECTION`.\n     *\n     * @param T - Type to use for edge document data. Defaults to `any`.\n     * @param collectionName - Name of the new collection.\n     * @param options - Options for creating the collection.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const edges = db.createEdgeCollection(\"friends\");\n     * ```\n     *\n     * @example\n     * ```ts\n     * interface Friend {\n     *   startDate: number;\n     *   endDate?: number;\n     * }\n     * const db = new Database();\n     * const edges = db.createEdgeCollection<Friend>(\"friends\");\n     * ```\n     */\n    async createEdgeCollection(collectionName, options) {\n        return this.createCollection(collectionName, {\n            ...options,\n            type: collection_1.CollectionType.EDGE_COLLECTION,\n        });\n    }\n    /**\n     * Renames the collection `collectionName` to `newName`.\n     *\n     * Additionally removes any stored `Collection` instance for\n     * `collectionName` from the `Database` instance's internal cache.\n     *\n     * **Note**: Renaming collections may not be supported when ArangoDB is\n     * running in a cluster configuration.\n     *\n     * @param collectionName - Current name of the collection.\n     * @param newName - The new name of the collection.\n     */\n    async renameCollection(collectionName, newName) {\n        collectionName = collectionName.normalize(\"NFC\");\n        const result = await this.request({\n            method: \"PUT\",\n            path: `/_api/collection/${encodeURIComponent(collectionName)}/rename`,\n            body: { name: newName.normalize(\"NFC\") },\n        }, (res) => res.body);\n        this._collections.delete(collectionName);\n        return result;\n    }\n    /**\n     * Fetches all collections from the database and returns an array of\n     * collection descriptions.\n     *\n     * See also {@link Database.collections}.\n     *\n     * @param excludeSystem - Whether system collections should be excluded.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const collections = await db.listCollections();\n     * // collections is an array of collection descriptions\n     * // not including system collections\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const collections = await db.listCollections(false);\n     * // collections is an array of collection descriptions\n     * // including system collections\n     * ```\n     */\n    listCollections(excludeSystem = true) {\n        return this.request({\n            path: \"/_api/collection\",\n            qs: { excludeSystem },\n        }, (res) => res.body.result);\n    }\n    /**\n     * Fetches all collections from the database and returns an array of\n     * `Collection` instances.\n     *\n     * In TypeScript these instances implement both the\n     * {@link DocumentCollection} and {@link EdgeCollection} interfaces and can\n     * be cast to either type to enforce a stricter API.\n     *\n     * See also {@link Database.listCollections}.\n     *\n     * @param excludeSystem - Whether system collections should be excluded.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const collections = await db.collections();\n     * // collections is an array of DocumentCollection\n     * // and EdgeCollection instances\n     * // not including system collections\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const collections = await db.collections(false);\n     * // collections is an array of DocumentCollection\n     * // and EdgeCollection instances\n     * // including system collections\n     * ```\n     */\n    async collections(excludeSystem = true) {\n        const collections = await this.listCollections(excludeSystem);\n        return collections.map((data) => this.collection(data.name));\n    }\n    //#endregion\n    //#region graphs\n    /**\n     * Returns a {@link Graph} instance representing the graph with the given\n     * `graphName`.\n     *\n     * @param graphName - Name of the graph.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graph = db.graph(\"some-graph\");\n     * ```\n     */\n    graph(graphName) {\n        graphName = graphName.normalize(\"NFC\");\n        if (!this._graphs.has(graphName)) {\n            this._graphs.set(graphName, new graph_1.Graph(this, graphName));\n        }\n        return this._graphs.get(graphName);\n    }\n    /**\n     * Creates a graph with the given `graphName` and `edgeDefinitions`, then\n     * returns a {@link Graph} instance for the new graph.\n     *\n     * @param graphName - Name of the graph to be created.\n     * @param edgeDefinitions - An array of edge definitions.\n     * @param options - An object defining the properties of the graph.\n     */\n    async createGraph(graphName, edgeDefinitions, options) {\n        const graph = this.graph(graphName.normalize(\"NFC\"));\n        await graph.create(edgeDefinitions, options);\n        return graph;\n    }\n    /**\n     * Fetches all graphs from the database and returns an array of graph\n     * descriptions.\n     *\n     * See also {@link Database.graphs}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graphs = await db.listGraphs();\n     * // graphs is an array of graph descriptions\n     * ```\n     */\n    listGraphs() {\n        return this.request({ path: \"/_api/gharial\" }, (res) => res.body.graphs);\n    }\n    /**\n     * Fetches all graphs from the database and returns an array of {@link Graph}\n     * instances for those graphs.\n     *\n     * See also {@link Database.listGraphs}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graphs = await db.graphs();\n     * // graphs is an array of Graph instances\n     * ```\n     */\n    async graphs() {\n        const graphs = await this.listGraphs();\n        return graphs.map((data) => this.graph(data._key));\n    }\n    //#endregion\n    //#region views\n    /**\n     * Returns an {@link ArangoSearchView} instance for the given `viewName`.\n     *\n     * @param viewName - Name of the ArangoSearch View.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const view = db.view(\"potatoes\");\n     * ```\n     */\n    view(viewName) {\n        viewName = viewName.normalize(\"NFC\");\n        if (!this._views.has(viewName)) {\n            this._views.set(viewName, new view_1.View(this, viewName));\n        }\n        return this._views.get(viewName);\n    }\n    /**\n     * Creates a new ArangoSearch View with the given `viewName` and `options`\n     * and returns an {@link ArangoSearchView} instance for the created View.\n     *\n     * @param viewName - Name of the ArangoSearch View.\n     * @param options - An object defining the properties of the View.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const view = await db.createView(\"potatoes\");\n     * // the ArangoSearch View \"potatoes\" now exists\n     * ```\n     */\n    async createView(viewName, options) {\n        const view = this.view(viewName.normalize(\"NFC\"));\n        await view.create({ ...options, type: view_1.ViewType.ARANGOSEARCH_VIEW });\n        return view;\n    }\n    /**\n     * Renames the view `viewName` to `newName`.\n     *\n     * Additionally removes any stored {@link View} instance for `viewName` from\n     * the `Database` instance's internal cache.\n     *\n     * **Note**: Renaming views may not be supported when ArangoDB is running in\n     * a cluster configuration.\n     *\n     * @param viewName - Current name of the view.\n     * @param newName - The new name of the view.\n     */\n    async renameView(viewName, newName) {\n        viewName = viewName.normalize(\"NFC\");\n        const result = await this.request({\n            method: \"PUT\",\n            path: `/_api/view/${encodeURIComponent(viewName)}/rename`,\n            body: { name: newName.normalize(\"NFC\") },\n        }, (res) => res.body);\n        this._views.delete(viewName);\n        return result;\n    }\n    /**\n     * Fetches all Views from the database and returns an array of View\n     * descriptions.\n     *\n     * See also {@link Database.views}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     *\n     * const views = await db.listViews();\n     * // views is an array of View descriptions\n     * ```\n     */\n    listViews() {\n        return this.request({ path: \"/_api/view\" }, (res) => res.body.result);\n    }\n    /**\n     * Fetches all Views from the database and returns an array of\n     * {@link ArangoSearchView} instances for the Views.\n     *\n     * See also {@link Database.listViews}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const views = await db.views();\n     * // views is an array of ArangoSearch View instances\n     * ```\n     */\n    async views() {\n        const views = await this.listViews();\n        return views.map((data) => this.view(data.name));\n    }\n    //#endregion\n    //#region analyzers\n    /**\n     * Returns an {@link Analyzer} instance representing the Analyzer with the\n     * given `analyzerName`.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const analyzer = db.analyzer(\"some-analyzer\");\n     * const info = await analyzer.get();\n     * ```\n     */\n    analyzer(analyzerName) {\n        analyzerName = analyzerName.normalize(\"NFC\");\n        if (!this._analyzers.has(analyzerName)) {\n            this._analyzers.set(analyzerName, new analyzer_1.Analyzer(this, analyzerName));\n        }\n        return this._analyzers.get(analyzerName);\n    }\n    /**\n     * Creates a new Analyzer with the given `analyzerName` and `options`, then\n     * returns an {@link Analyzer} instance for the new Analyzer.\n     *\n     * @param analyzerName - Name of the Analyzer.\n     * @param options - An object defining the properties of the Analyzer.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const analyzer = await db.createAnalyzer(\"potatoes\", { type: \"identity\" });\n     * // the identity Analyzer \"potatoes\" now exists\n     * ```\n     */\n    async createAnalyzer(analyzerName, options) {\n        const analyzer = this.analyzer(analyzerName);\n        await analyzer.create(options);\n        return analyzer;\n    }\n    /**\n     * Fetches all Analyzers visible in the database and returns an array of\n     * Analyzer descriptions.\n     *\n     * See also {@link Database.analyzers}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const analyzers = await db.listAnalyzers();\n     * // analyzers is an array of Analyzer descriptions\n     * ```\n     */\n    listAnalyzers() {\n        return this.request({ path: \"/_api/analyzer\" }, (res) => res.body.result);\n    }\n    /**\n     * Fetches all Analyzers visible in the database and returns an array of\n     * {@link Analyzer} instances for those Analyzers.\n     *\n     * See also {@link Database.listAnalyzers}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const analyzers = await db.analyzers();\n     * // analyzers is an array of Analyzer instances\n     * ```\n     */\n    async analyzers() {\n        const analyzers = await this.listAnalyzers();\n        return analyzers.map((data) => this.analyzer(data.name));\n    }\n    //#endregion\n    //#region users\n    /**\n     * Fetches all ArangoDB users visible to the authenticated user and returns\n     * an array of user objects.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const users = await db.listUsers();\n     * // users is an array of user objects\n     * ```\n     */\n    listUsers() {\n        return this.request({\n            absolutePath: true,\n            path: \"/_api/user\",\n        });\n    }\n    /**\n     * Fetches the user data of a single ArangoDB user.\n     *\n     * @param username - Name of the ArangoDB user to fetch.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const user = await db.getUser(\"steve\");\n     * // user is the user object for the user named \"steve\"\n     * ```\n     */\n    getUser(username) {\n        return this.request({\n            absolutePath: true,\n            path: `/_api/user/${encodeURIComponent(username)}`,\n        });\n    }\n    createUser(username, options) {\n        if (typeof options === \"string\") {\n            options = { passwd: options };\n        }\n        return this.request({\n            absolutePath: true,\n            method: \"POST\",\n            path: \"/_api/user\",\n            body: { user: username, ...options },\n        }, (res) => res.body);\n    }\n    updateUser(username, options) {\n        if (typeof options === \"string\") {\n            options = { passwd: options };\n        }\n        return this.request({\n            absolutePath: true,\n            method: \"PATCH\",\n            path: `/api/user/${encodeURIComponent(username)}`,\n            body: options,\n        }, (res) => res.body);\n    }\n    /**\n     * Replaces the ArangoDB user's option with the new options.\n     *\n     * @param username - Name of the ArangoDB user to modify.\n     * @param options - New options to replace the user's existing options.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const user = await db.replaceUser(\"steve\", { passwd: \"\", active: false });\n     * // The user \"steve\" has been set to inactive with an empty password\n     * ```\n     */\n    replaceUser(username, options) {\n        if (typeof options === \"string\") {\n            options = { passwd: options };\n        }\n        return this.request({\n            absolutePath: true,\n            method: \"PUT\",\n            path: `/api/user/${encodeURIComponent(username)}`,\n            body: options,\n        }, (res) => res.body);\n    }\n    /**\n     * Removes the ArangoDB user with the given username from the server.\n     *\n     * @param username - Name of the ArangoDB user to remove.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * await db.removeUser(\"steve\");\n     * // The user \"steve\" has been removed\n     * ```\n     */\n    removeUser(username) {\n        return this.request({\n            absolutePath: true,\n            method: \"DELETE\",\n            path: `/_api/user/${encodeURIComponent(username)}`,\n        }, (res) => res.body);\n    }\n    /**\n     * Fetches the given ArangoDB user's access level for the database, or the\n     * given collection in the given database.\n     *\n     * @param username - Name of the ArangoDB user to fetch the access level for.\n     * @param database - Database to fetch the access level for.\n     * @param collection - Collection to fetch the access level for.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const accessLevel = await db.getUserAccessLevel(\"steve\");\n     * // The access level of the user \"steve\" has been fetched for the current\n     * // database.\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const accessLevel = await db.getUserAccessLevel(\"steve\", {\n     *   database: \"staging\"\n     * });\n     * // The access level of the user \"steve\" has been fetched for the \"staging\"\n     * // database.\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const accessLevel = await db.getUserAccessLevel(\"steve\", {\n     *   collection: \"pokemons\"\n     * });\n     * // The access level of the user \"steve\" has been fetched for the\n     * // \"pokemons\" collection in the current database.\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const accessLevel = await db.getUserAccessLevel(\"steve\", {\n     *   database: \"staging\",\n     *   collection: \"pokemons\"\n     * });\n     * // The access level of the user \"steve\" has been fetched for the\n     * // \"pokemons\" collection in the \"staging\" database.\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const staging = db.database(\"staging\");\n     * const accessLevel = await db.getUserAccessLevel(\"steve\", {\n     *   database: staging\n     * });\n     * // The access level of the user \"steve\" has been fetched for the \"staging\"\n     * // database.\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const staging = db.database(\"staging\");\n     * const accessLevel = await db.getUserAccessLevel(\"steve\", {\n     *   collection: staging.collection(\"pokemons\")\n     * });\n     * // The access level of the user \"steve\" has been fetched for the\n     * // \"pokemons\" collection in database \"staging\".\n     * ```\n     */\n    getUserAccessLevel(username, { database, collection }) {\n        var _a;\n        const databaseName = isArangoDatabase(database)\n            ? database.name\n            : (_a = database === null || database === void 0 ? void 0 : database.normalize(\"NFC\")) !== null && _a !== void 0 ? _a : (collection_1.isArangoCollection(collection)\n                ? collection._db.name\n                : this._name);\n        const suffix = collection\n            ? `/${encodeURIComponent(collection_1.isArangoCollection(collection)\n                ? collection.name\n                : collection.normalize(\"NFC\"))}`\n            : \"\";\n        return this.request({\n            absolutePath: true,\n            path: `/_api/user/${encodeURIComponent(username)}/database/${encodeURIComponent(databaseName)}${suffix}`,\n        }, (res) => res.body);\n    }\n    /**\n     * Sets the given ArangoDB user's access level for the database, or the\n     * given collection in the given database.\n     *\n     * @param username - Name of the ArangoDB user to set the access level for.\n     * @param database - Database to set the access level for.\n     * @param collection - Collection to set the access level for.\n     * @param grant - Access level to set for the given user.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * await db.setUserAccessLevel(\"steve\", { grant: \"rw\" });\n     * // The user \"steve\" now has read-write access to the current database.\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * await db.setUserAccessLevel(\"steve\", {\n     *   database: \"staging\",\n     *   grant: \"rw\"\n     * });\n     * // The user \"steve\" now has read-write access to the \"staging\" database.\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * await db.setUserAccessLevel(\"steve\", {\n     *   collection: \"pokemons\",\n     *   grant: \"rw\"\n     * });\n     * // The user \"steve\" now has read-write access to the \"pokemons\" collection\n     * // in the current database.\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * await db.setUserAccessLevel(\"steve\", {\n     *   database: \"staging\",\n     *   collection: \"pokemons\",\n     *   grant: \"rw\"\n     * });\n     * // The user \"steve\" now has read-write access to the \"pokemons\" collection\n     * // in the \"staging\" database.\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const staging = db.database(\"staging\");\n     * await db.setUserAccessLevel(\"steve\", {\n     *   database: staging,\n     *   grant: \"rw\"\n     * });\n     * // The user \"steve\" now has read-write access to the \"staging\" database.\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const staging = db.database(\"staging\");\n     * await db.setUserAccessLevel(\"steve\", {\n     *   collection: staging.collection(\"pokemons\"),\n     *   grant: \"rw\"\n     * });\n     * // The user \"steve\" now has read-write access to the \"pokemons\" collection\n     * // in database \"staging\".\n     * ```\n     */\n    setUserAccessLevel(username, { database, collection, grant, }) {\n        var _a;\n        const databaseName = isArangoDatabase(database)\n            ? database.name\n            : (_a = database === null || database === void 0 ? void 0 : database.normalize(\"NFC\")) !== null && _a !== void 0 ? _a : (collection_1.isArangoCollection(collection)\n                ? collection._db.name\n                : this._name);\n        const suffix = collection\n            ? `/${encodeURIComponent(collection_1.isArangoCollection(collection)\n                ? collection.name\n                : collection.normalize(\"NFC\"))}`\n            : \"\";\n        return this.request({\n            absolutePath: true,\n            method: \"PUT\",\n            path: `/_api/user/${encodeURIComponent(username)}/database/${encodeURIComponent(databaseName)}${suffix}`,\n            body: { grant },\n        }, (res) => res.body);\n    }\n    /**\n     * Clears the given ArangoDB user's access level for the database, or the\n     * given collection in the given database.\n     *\n     * @param username - Name of the ArangoDB user to clear the access level for.\n     * @param database - Database to clear the access level for.\n     * @param collection - Collection to clear the access level for.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * await db.clearUserAccessLevel(\"steve\");\n     * // The access level of the user \"steve\" has been cleared for the current\n     * // database.\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * await db.clearUserAccessLevel(\"steve\", { database: \"staging\" });\n     * // The access level of the user \"steve\" has been cleared for the \"staging\"\n     * // database.\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * await db.clearUserAccessLevel(\"steve\", { collection: \"pokemons\" });\n     * // The access level of the user \"steve\" has been cleared for the\n     * // \"pokemons\" collection in the current database.\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * await db.clearUserAccessLevel(\"steve\", {\n     *   database: \"staging\",\n     *   collection: \"pokemons\"\n     * });\n     * // The access level of the user \"steve\" has been cleared for the\n     * // \"pokemons\" collection in the \"staging\" database.\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const staging = db.database(\"staging\");\n     * await db.clearUserAccessLevel(\"steve\", { database: staging });\n     * // The access level of the user \"steve\" has been cleared for the \"staging\"\n     * // database.\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const staging = db.database(\"staging\");\n     * await db.clearUserAccessLevel(\"steve\", {\n     *   collection: staging.collection(\"pokemons\")\n     * });\n     * // The access level of the user \"steve\" has been cleared for the\n     * // \"pokemons\" collection in database \"staging\".\n     * ```\n     */\n    clearUserAccessLevel(username, { database, collection }) {\n        var _a;\n        const databaseName = isArangoDatabase(database)\n            ? database.name\n            : (_a = database === null || database === void 0 ? void 0 : database.normalize(\"NFC\")) !== null && _a !== void 0 ? _a : (collection_1.isArangoCollection(collection)\n                ? collection._db.name\n                : this._name);\n        const suffix = collection\n            ? `/${encodeURIComponent(collection_1.isArangoCollection(collection)\n                ? collection.name\n                : collection.normalize(\"NFC\"))}`\n            : \"\";\n        return this.request({\n            absolutePath: true,\n            method: \"DELETE\",\n            path: `/_api/user/${encodeURIComponent(username)}/database/${encodeURIComponent(databaseName)}${suffix}`,\n        }, (res) => res.body);\n    }\n    getUserDatabases(username, full) {\n        return this.request({\n            absolutePath: true,\n            path: `/_api/user/${encodeURIComponent(username)}/database`,\n            qs: { full },\n        });\n    }\n    executeTransaction(collections, action, options) {\n        return this.request({\n            method: \"POST\",\n            path: \"/_api/transaction\",\n            body: {\n                collections: coerceTransactionCollections(collections),\n                action,\n                ...options,\n            },\n        }, (res) => res.body.result);\n    }\n    /**\n     * Returns a {@link Transaction} instance for an existing streaming\n     * transaction with the given `id`.\n     *\n     * See also {@link Database.beginTransaction}.\n     *\n     * @param id - The `id` of an existing stream transaction.\n     *\n     * @example\n     * ```js\n     * const trx1 = await db.beginTransaction(collections);\n     * const id = trx1.id;\n     * // later\n     * const trx2 = db.transaction(id);\n     * await trx2.commit();\n     * ```\n     */\n    transaction(transactionId) {\n        return new transaction_1.Transaction(this, transactionId);\n    }\n    beginTransaction(collections, options) {\n        return this.request({\n            method: \"POST\",\n            path: \"/_api/transaction/begin\",\n            body: {\n                collections: coerceTransactionCollections(collections),\n                ...options,\n            },\n        }, (res) => new transaction_1.Transaction(this, res.body.result.id));\n    }\n    /**\n     * Fetches all active transactions from the database and returns an array of\n     * transaction descriptions.\n     *\n     * See also {@link Database.transactions}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const transactions = await db.listTransactions();\n     * // transactions is an array of transaction descriptions\n     * ```\n     */\n    listTransactions() {\n        return this._connection.request({ path: \"/_api/transaction\" }, (res) => res.body.transactions);\n    }\n    /**\n     * Fetches all active transactions from the database and returns an array of\n     * {@link Transaction} instances for those transactions.\n     *\n     * See also {@link Database.listTransactions}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const transactions = await db.transactions();\n     * // transactions is an array of transactions\n     * ```\n     */\n    async transactions() {\n        const transactions = await this.listTransactions();\n        return transactions.map((data) => this.transaction(data.id));\n    }\n    query(query, bindVars, options) {\n        if (aql_1.isAqlQuery(query)) {\n            options = bindVars;\n            bindVars = query.bindVars;\n            query = query.query;\n        }\n        else if (aql_1.isAqlLiteral(query)) {\n            query = query.toAQL();\n        }\n        const { allowDirtyRead, count, batchSize, cache, memoryLimit, ttl, timeout, ...opts } = options || {};\n        return this.request({\n            method: \"POST\",\n            path: \"/_api/cursor\",\n            body: {\n                query,\n                bindVars,\n                count,\n                batchSize,\n                cache,\n                memoryLimit,\n                ttl,\n                options: opts,\n            },\n            allowDirtyRead,\n            timeout,\n        }, (res) => new cursor_1.BatchedArrayCursor(this, res.body, res.arangojsHostId, allowDirtyRead).items);\n    }\n    explain(query, bindVars, options) {\n        if (aql_1.isAqlQuery(query)) {\n            options = bindVars;\n            bindVars = query.bindVars;\n            query = query.query;\n        }\n        else if (aql_1.isAqlLiteral(query)) {\n            query = query.toAQL();\n        }\n        return this.request({\n            method: \"POST\",\n            path: \"/_api/explain\",\n            body: { query, bindVars, options },\n        }, (res) => res.body);\n    }\n    /**\n     * Parses the given query and returns the result.\n     *\n     * See the {@link aql} template string handler for information about how\n     * to create a query string without manually defining bind parameters nor\n     * having to worry about escaping variables.\n     *\n     * @param query - An AQL query string or an object containing an AQL query\n     * string and bind parameters, e.g. the object returned from an {@link aql}\n     * template string.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const collection = db.collection(\"some-collection\");\n     * const ast = await db.parse(aql`\n     *   FOR doc IN ${collection}\n     *   FILTER doc.flavor == \"strawberry\"\n     *   RETURN doc._key\n     * `);\n     * ```\n     */\n    parse(query) {\n        if (aql_1.isAqlQuery(query)) {\n            query = query.query;\n        }\n        else if (aql_1.isAqlLiteral(query)) {\n            query = query.toAQL();\n        }\n        return this.request({\n            method: \"POST\",\n            path: \"/_api/query\",\n            body: { query },\n        }, (res) => res.body);\n    }\n    queryTracking(options) {\n        return this.request(options\n            ? {\n                method: \"PUT\",\n                path: \"/_api/query/properties\",\n                body: options,\n            }\n            : {\n                method: \"GET\",\n                path: \"/_api/query/properties\",\n            }, (res) => res.body);\n    }\n    /**\n     * Fetches a list of information for all currently running queries.\n     *\n     * See also {@link Database.listSlowQueries} and {@link Database.killQuery}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const queries = await db.listRunningQueries();\n     * ```\n     */\n    listRunningQueries() {\n        return this.request({\n            method: \"GET\",\n            path: \"/_api/query/current\",\n        }, (res) => res.body);\n    }\n    /**\n     * Fetches a list of information for all recent slow queries.\n     *\n     * See also {@link Database.listRunningQueries} and\n     * {@link Database.clearSlowQueries}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const queries = await db.listSlowQueries();\n     * // Only works if slow query tracking is enabled\n     * ```\n     */\n    listSlowQueries() {\n        return this.request({\n            method: \"GET\",\n            path: \"/_api/query/slow\",\n        }, (res) => res.body);\n    }\n    /**\n     * Clears the list of recent slow queries.\n     *\n     * See also {@link Database.listSlowQueries}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * await db.clearSlowQueries();\n     * // Slow query list is now cleared\n     * ```\n     */\n    clearSlowQueries() {\n        return this.request({\n            method: \"DELETE\",\n            path: \"/_api/query/slow\",\n        }, () => undefined);\n    }\n    /**\n     * Kills a running query with the given `queryId`.\n     *\n     * See also {@link Database.listRunningQueries}.\n     *\n     * @param queryId - The ID of a currently running query.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const queries = await db.listRunningQueries();\n     * await Promise.all(queries.map(\n     *   async (query) => {\n     *     if (query.state === \"executing\") {\n     *       await db.killQuery(query.id);\n     *     }\n     *   }\n     * ));\n     * ```\n     */\n    killQuery(queryId) {\n        return this.request({\n            method: \"DELETE\",\n            path: `/_api/query/${encodeURIComponent(queryId)}`,\n        }, () => undefined);\n    }\n    //#endregion\n    //#region functions\n    /**\n     * Fetches a list of all AQL user functions registered with the database.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const functions = await db.listFunctions();\n     * const names = functions.map(fn => fn.name);\n     * ```\n     */\n    listFunctions() {\n        return this.request({ path: \"/_api/aqlfunction\" }, (res) => res.body.result);\n    }\n    /**\n     * Creates an AQL user function with the given _name_ and _code_ if it does\n     * not already exist or replaces it if a function with the same name already\n     * existed.\n     *\n     * @param name - A valid AQL function name. The function name must consist\n     * of at least two alphanumeric identifiers separated with double colons.\n     * @param code - A string evaluating to a JavaScript function (not a\n     * JavaScript function object).\n     * @param isDeterministic - If set to `true`, the function is expected to\n     * always return the same result for equivalent inputs. This option currently\n     * has no effect but may allow for optimizations in the future.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * await db.createFunction(\n     *   \"ACME::ACCOUNTING::CALCULATE_VAT\",\n     *   \"(price) => price * 0.19\"\n     * );\n     * // Use the new function in an AQL query with template handler:\n     * const cursor = await db.query(aql`\n     *   FOR product IN products\n     *   RETURN MERGE(\n     *     { vat: ACME::ACCOUNTING::CALCULATE_VAT(product.price) },\n     *     product\n     *   )\n     * `);\n     * // cursor is a cursor for the query result\n     * ```\n     */\n    createFunction(name, code, isDeterministic = false) {\n        return this.request({\n            method: \"POST\",\n            path: \"/_api/aqlfunction\",\n            body: { name, code, isDeterministic },\n        }, (res) => res.body);\n    }\n    /**\n     * Deletes the AQL user function with the given name from the database.\n     *\n     * @param name - The name of the user function to drop.\n     * @param group - If set to `true`, all functions with a name starting with\n     * `name` will be deleted, otherwise only the function with the exact name\n     * will be deleted.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * await db.dropFunction(\"ACME::ACCOUNTING::CALCULATE_VAT\");\n     * // the function no longer exists\n     * ```\n     */\n    dropFunction(name, group = false) {\n        return this.request({\n            method: \"DELETE\",\n            path: `/_api/aqlfunction/${encodeURIComponent(name)}`,\n            qs: { group },\n        }, (res) => res.body);\n    }\n    //#endregion\n    //#region services\n    /**\n     * Fetches a list of all installed service.\n     *\n     * @param excludeSystem - Whether system services should be excluded.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const services = await db.listServices();\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const services = await db.listServices(false); // all services\n     * ```\n     */\n    listServices(excludeSystem = true) {\n        return this.request({\n            path: \"/_api/foxx\",\n            qs: { excludeSystem },\n        }, (res) => res.body);\n    }\n    /**\n     * Installs a new service.\n     *\n     * @param mount - The service's mount point, relative to the database.\n     * @param source - The service bundle to install.\n     * @param options - Options for installing the service.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * // Using a node.js file stream as source\n     * const source = fs.createReadStream(\"./my-foxx-service.zip\");\n     * const info = await db.installService(\"/hello\", source);\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * // Using a node.js Buffer as source\n     * const source = fs.readFileSync(\"./my-foxx-service.zip\");\n     * const info = await db.installService(\"/hello\", source);\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * // Using a File (Blob) from a browser file input\n     * const element = document.getElementById(\"my-file-input\");\n     * const source = element.files[0];\n     * const info = await db.installService(\"/hello\", source);\n     * ```\n     */\n    async installService(mount, source, options = {}) {\n        const { configuration, dependencies, ...qs } = options;\n        const req = await multipart_1.toForm({\n            configuration,\n            dependencies,\n            source,\n        });\n        return await this.request({\n            ...req,\n            method: \"POST\",\n            path: \"/_api/foxx\",\n            isBinary: true,\n            qs: { ...qs, mount },\n        }, (res) => res.body);\n    }\n    /**\n     * Replaces an existing service with a new service by completely removing the\n     * old service and installing a new service at the same mount point.\n     *\n     * @param mount - The service's mount point, relative to the database.\n     * @param source - The service bundle to install.\n     * @param options - Options for replacing the service.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * // Using a node.js file stream as source\n     * const source = fs.createReadStream(\"./my-foxx-service.zip\");\n     * const info = await db.replaceService(\"/hello\", source);\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * // Using a node.js Buffer as source\n     * const source = fs.readFileSync(\"./my-foxx-service.zip\");\n     * const info = await db.replaceService(\"/hello\", source);\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * // Using a File (Blob) from a browser file input\n     * const element = document.getElementById(\"my-file-input\");\n     * const source = element.files[0];\n     * const info = await db.replaceService(\"/hello\", source);\n     * ```\n     */\n    async replaceService(mount, source, options = {}) {\n        const { configuration, dependencies, ...qs } = options;\n        const req = await multipart_1.toForm({\n            configuration,\n            dependencies,\n            source,\n        });\n        return await this.request({\n            ...req,\n            method: \"PUT\",\n            path: \"/_api/foxx/service\",\n            isBinary: true,\n            qs: { ...qs, mount },\n        }, (res) => res.body);\n    }\n    /**\n     * Replaces an existing service with a new service while retaining the old\n     * service's configuration and dependencies.\n     *\n     * @param mount - The service's mount point, relative to the database.\n     * @param source - The service bundle to install.\n     * @param options - Options for upgrading the service.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * // Using a node.js file stream as source\n     * const source = fs.createReadStream(\"./my-foxx-service.zip\");\n     * const info = await db.upgradeService(\"/hello\", source);\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * // Using a node.js Buffer as source\n     * const source = fs.readFileSync(\"./my-foxx-service.zip\");\n     * const info = await db.upgradeService(\"/hello\", source);\n     * ```\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * // Using a File (Blob) from a browser file input\n     * const element = document.getElementById(\"my-file-input\");\n     * const source = element.files[0];\n     * const info = await db.upgradeService(\"/hello\", source);\n     * ```\n     */\n    async upgradeService(mount, source, options = {}) {\n        const { configuration, dependencies, ...qs } = options;\n        const req = await multipart_1.toForm({\n            configuration,\n            dependencies,\n            source,\n        });\n        return await this.request({\n            ...req,\n            method: \"PATCH\",\n            path: \"/_api/foxx/service\",\n            isBinary: true,\n            qs: { ...qs, mount },\n        }, (res) => res.body);\n    }\n    /**\n     * Completely removes a service from the database.\n     *\n     * @param mount - The service's mount point, relative to the database.\n     * @param options - Options for uninstalling the service.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * await db.uninstallService(\"/my-foxx\");\n     * ```\n     */\n    uninstallService(mount, options) {\n        return this.request({\n            method: \"DELETE\",\n            path: \"/_api/foxx/service\",\n            qs: { ...options, mount },\n        }, () => undefined);\n    }\n    /**\n     * Retrieves information about a mounted service.\n     *\n     * @param mount - The service's mount point, relative to the database.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const info = await db.getService(\"/my-service\");\n     * // info contains detailed information about the service\n     * ```\n     */\n    getService(mount) {\n        return this.request({\n            path: \"/_api/foxx/service\",\n            qs: { mount },\n        }, (res) => res.body);\n    }\n    async getServiceConfiguration(mount, minimal = false) {\n        const result = await this.request({\n            path: \"/_api/foxx/configuration\",\n            qs: { mount, minimal },\n        }, (res) => res.body);\n        if (!minimal ||\n            !Object.keys(result).every((key) => result[key].title)) {\n            return result;\n        }\n        const values = {};\n        for (const key of Object.keys(result)) {\n            values[key] = result[key].current;\n        }\n        return values;\n    }\n    async replaceServiceConfiguration(mount, cfg, minimal = false) {\n        const result = await this.request({\n            method: \"PUT\",\n            path: \"/_api/foxx/configuration\",\n            body: cfg,\n            qs: { mount, minimal },\n        }, (res) => res.body);\n        if (minimal ||\n            !result.values ||\n            !Object.keys(result.values).every((key) => result.values[key].title)) {\n            return result;\n        }\n        const result2 = (await this.getServiceConfiguration(mount, false));\n        if (result.warnings) {\n            for (const key of Object.keys(result2)) {\n                result2[key].warning = result.warnings[key];\n            }\n        }\n        return result2;\n    }\n    async updateServiceConfiguration(mount, cfg, minimal = false) {\n        const result = await this.request({\n            method: \"PATCH\",\n            path: \"/_api/foxx/configuration\",\n            body: cfg,\n            qs: { mount, minimal },\n        }, (res) => res.body);\n        if (minimal ||\n            !result.values ||\n            !Object.keys(result.values).every((key) => result.values[key].title)) {\n            return result;\n        }\n        const result2 = (await this.getServiceConfiguration(mount, false));\n        if (result.warnings) {\n            for (const key of Object.keys(result2)) {\n                result2[key].warning = result.warnings[key];\n            }\n        }\n        return result2;\n    }\n    async getServiceDependencies(mount, minimal = false) {\n        const result = await this.request({\n            path: \"/_api/foxx/dependencies\",\n            qs: { mount, minimal },\n        }, (res) => res.body);\n        if (!minimal ||\n            !Object.keys(result).every((key) => result[key].title))\n            return result;\n        const values = {};\n        for (const key of Object.keys(result)) {\n            values[key] = result[key].current;\n        }\n        return values;\n    }\n    async replaceServiceDependencies(mount, deps, minimal = false) {\n        const result = await this.request({\n            method: \"PUT\",\n            path: \"/_api/foxx/dependencies\",\n            body: deps,\n            qs: { mount, minimal },\n        }, (res) => res.body);\n        if (minimal ||\n            !result.values ||\n            !Object.keys(result.values).every((key) => result.values[key].title)) {\n            return result;\n        }\n        // Work around \"minimal\" flag not existing in 3.3\n        const result2 = (await this.getServiceDependencies(mount, false));\n        if (result.warnings) {\n            for (const key of Object.keys(result2)) {\n                result2[key].warning = result.warnings[key];\n            }\n        }\n        return result2;\n    }\n    async updateServiceDependencies(mount, deps, minimal = false) {\n        const result = await this.request({\n            method: \"PATCH\",\n            path: \"/_api/foxx/dependencies\",\n            body: deps,\n            qs: { mount, minimal },\n        }, (res) => res.body);\n        if (minimal ||\n            !result.values ||\n            !Object.keys(result.values).every((key) => result.values[key].title)) {\n            return result;\n        }\n        // Work around \"minimal\" flag not existing in 3.3\n        const result2 = (await this.getServiceDependencies(mount, false));\n        if (result.warnings) {\n            for (const key of Object.keys(result2)) {\n                result2[key].warning = result.warnings[key];\n            }\n        }\n        return result2;\n    }\n    /**\n     * Enables or disables development mode for the given service.\n     *\n     * @param mount - The service's mount point, relative to the database.\n     * @param enabled - Whether development mode should be enabled or disabled.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * await db.setServiceDevelopmentMode(\"/my-service\", true);\n     * // the service is now in development mode\n     * await db.setServiceDevelopmentMode(\"/my-service\", false);\n     * // the service is now in production mode\n     * ```\n     */\n    setServiceDevelopmentMode(mount, enabled = true) {\n        return this.request({\n            method: enabled ? \"POST\" : \"DELETE\",\n            path: \"/_api/foxx/development\",\n            qs: { mount },\n        }, (res) => res.body);\n    }\n    /**\n     * Retrieves a list of scripts defined in the service manifest's \"scripts\"\n     * section mapped to their human readable representations.\n     *\n     * @param mount - The service's mount point, relative to the database.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const scripts = await db.listServiceScripts(\"/my-service\");\n     * for (const [name, title] of Object.entries(scripts)) {\n     *   console.log(`${name}: ${title}`);\n     * }\n     * ```\n     */\n    listServiceScripts(mount) {\n        return this.request({\n            path: \"/_api/foxx/scripts\",\n            qs: { mount },\n        }, (res) => res.body);\n    }\n    /**\n     * Executes a service script and retrieves its result exposed as\n     * `module.exports` (if any).\n     *\n     * @param mount - The service's mount point, relative to the database.\n     * @param name - Name of the service script to execute as defined in the\n     * service manifest.\n     * @param params - Arbitrary value that will be exposed to the script as\n     * `argv[0]` in the service context (e.g. `module.context.argv[0]`).\n     * Must be serializable to JSON.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const result = await db.runServiceScript(\n     *   \"/my-service\",\n     *   \"create-user\",\n     *   {\n     *     username: \"service_admin\",\n     *     password: \"hunter2\"\n     *   }\n     * );\n     * ```\n     */\n    runServiceScript(mount, name, params) {\n        return this.request({\n            method: \"POST\",\n            path: `/_api/foxx/scripts/${encodeURIComponent(name)}`,\n            body: params,\n            qs: { mount },\n        }, (res) => res.body);\n    }\n    runServiceTests(mount, options) {\n        return this.request({\n            method: \"POST\",\n            path: \"/_api/foxx/tests\",\n            qs: {\n                ...options,\n                mount,\n            },\n        }, (res) => res.body);\n    }\n    /**\n     * Retrieves the text content of the service's `README` or `README.md` file.\n     *\n     * Returns `undefined` if no such file could be found.\n     *\n     * @param mount - The service's mount point, relative to the database.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const readme = await db.getServiceReadme(\"/my-service\");\n     * if (readme !== undefined) console.log(readme);\n     * else console.warn(`No README found.`)\n     * ```\n     */\n    getServiceReadme(mount) {\n        return this.request({\n            path: \"/_api/foxx/readme\",\n            qs: { mount },\n        }, (res) => res.body);\n    }\n    /**\n     * Retrieves an Open API compatible Swagger API description object for the\n     * service installed at the given mount point.\n     *\n     * @param mount - The service's mount point, relative to the database.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const spec = await db.getServiceDocumentation(\"/my-service\");\n     * // spec is a Swagger API description of the service\n     * ```\n     */\n    getServiceDocumentation(mount) {\n        return this.request({\n            path: \"/_api/foxx/swagger\",\n            qs: { mount },\n        }, (res) => res.body);\n    }\n    /**\n     * Retrieves a zip bundle containing the service files.\n     *\n     * Returns a `Buffer` in node.js or `Blob` in the browser.\n     *\n     * @param mount - The service's mount point, relative to the database.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const serviceBundle = await db.downloadService(\"/my-foxx\");\n     * ```\n     */\n    downloadService(mount) {\n        return this.request({\n            method: \"POST\",\n            path: \"/_api/foxx/download\",\n            qs: { mount },\n            expectBinary: true,\n        }, (res) => res.body);\n    }\n    /**\n     * Writes all locally available services to the database and updates any\n     * service bundles missing in the database.\n     *\n     * @param replace - If set to `true`, outdated services will also be\n     * committed. This can be used to solve some consistency problems when\n     * service bundles are missing in the database or were deleted manually.\n     *\n     * @example\n     * ```js\n     * await db.commitLocalServiceState();\n     * // all services available on the coordinator have been written to the db\n     * ```\n     *\n     * @example\n     * ```js\n     * await db.commitLocalServiceState(true);\n     * // all service conflicts have been resolved in favor of this coordinator\n     * ```\n     */\n    commitLocalServiceState(replace = false) {\n        return this.request({\n            method: \"POST\",\n            path: \"/_api/foxx/commit\",\n            qs: { replace },\n        }, () => undefined);\n    }\n}\nexports.Database = Database;\n//# sourceMappingURL=database.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/arangojs/database.js\n");

/***/ }),

/***/ "./node_modules/arangojs/documents.js":
/*!********************************************!*\
  !*** ./node_modules/arangojs/documents.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\n/**\n * ```ts\n * import type { Document, Edge } from \"arangojs/documents\";\n * ```\n *\n * The \"documents\" module provides document/edge related types for TypeScript.\n *\n * @packageDocumentation\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports._documentHandle = void 0;\n/**\n * @internal\n * @hidden\n */\nfunction _documentHandle(selector, collectionName, strict = true) {\n    if (typeof selector !== \"string\") {\n        if (selector._id) {\n            return _documentHandle(selector._id, collectionName);\n        }\n        if (selector._key) {\n            return _documentHandle(selector._key, collectionName);\n        }\n        throw new Error(\"Document handle must be a string or an object with a _key or _id attribute\");\n    }\n    if (selector.includes(\"/\")) {\n        const [head, ...tail] = selector.split(\"/\");\n        const normalizedHead = head.normalize(\"NFC\");\n        if (strict && normalizedHead !== collectionName) {\n            throw new Error(`Document ID \"${selector}\" does not match collection name \"${collectionName}\"`);\n        }\n        return [normalizedHead, ...tail].join(\"/\");\n    }\n    return `${collectionName}/${selector}`;\n}\nexports._documentHandle = _documentHandle;\n//# sourceMappingURL=documents.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXJhbmdvanMvZG9jdW1lbnRzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBLGlCQUFpQixpQkFBaUI7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsU0FBUyxvQ0FBb0MsZUFBZTtBQUN4RztBQUNBO0FBQ0E7QUFDQSxjQUFjLGVBQWUsR0FBRyxTQUFTO0FBQ3pDO0FBQ0EsdUJBQXVCO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9hcmFuZ29qcy9kb2N1bWVudHMuanM/MjM3NyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogYGBgdHNcbiAqIGltcG9ydCB0eXBlIHsgRG9jdW1lbnQsIEVkZ2UgfSBmcm9tIFwiYXJhbmdvanMvZG9jdW1lbnRzXCI7XG4gKiBgYGBcbiAqXG4gKiBUaGUgXCJkb2N1bWVudHNcIiBtb2R1bGUgcHJvdmlkZXMgZG9jdW1lbnQvZWRnZSByZWxhdGVkIHR5cGVzIGZvciBUeXBlU2NyaXB0LlxuICpcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLl9kb2N1bWVudEhhbmRsZSA9IHZvaWQgMDtcbi8qKlxuICogQGludGVybmFsXG4gKiBAaGlkZGVuXG4gKi9cbmZ1bmN0aW9uIF9kb2N1bWVudEhhbmRsZShzZWxlY3RvciwgY29sbGVjdGlvbk5hbWUsIHN0cmljdCA9IHRydWUpIHtcbiAgICBpZiAodHlwZW9mIHNlbGVjdG9yICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGlmIChzZWxlY3Rvci5faWQpIHtcbiAgICAgICAgICAgIHJldHVybiBfZG9jdW1lbnRIYW5kbGUoc2VsZWN0b3IuX2lkLCBjb2xsZWN0aW9uTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNlbGVjdG9yLl9rZXkpIHtcbiAgICAgICAgICAgIHJldHVybiBfZG9jdW1lbnRIYW5kbGUoc2VsZWN0b3IuX2tleSwgY29sbGVjdGlvbk5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRvY3VtZW50IGhhbmRsZSBtdXN0IGJlIGEgc3RyaW5nIG9yIGFuIG9iamVjdCB3aXRoIGEgX2tleSBvciBfaWQgYXR0cmlidXRlXCIpO1xuICAgIH1cbiAgICBpZiAoc2VsZWN0b3IuaW5jbHVkZXMoXCIvXCIpKSB7XG4gICAgICAgIGNvbnN0IFtoZWFkLCAuLi50YWlsXSA9IHNlbGVjdG9yLnNwbGl0KFwiL1wiKTtcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZEhlYWQgPSBoZWFkLm5vcm1hbGl6ZShcIk5GQ1wiKTtcbiAgICAgICAgaWYgKHN0cmljdCAmJiBub3JtYWxpemVkSGVhZCAhPT0gY29sbGVjdGlvbk5hbWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRG9jdW1lbnQgSUQgXCIke3NlbGVjdG9yfVwiIGRvZXMgbm90IG1hdGNoIGNvbGxlY3Rpb24gbmFtZSBcIiR7Y29sbGVjdGlvbk5hbWV9XCJgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW25vcm1hbGl6ZWRIZWFkLCAuLi50YWlsXS5qb2luKFwiL1wiKTtcbiAgICB9XG4gICAgcmV0dXJuIGAke2NvbGxlY3Rpb25OYW1lfS8ke3NlbGVjdG9yfWA7XG59XG5leHBvcnRzLl9kb2N1bWVudEhhbmRsZSA9IF9kb2N1bWVudEhhbmRsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRvY3VtZW50cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/arangojs/documents.js\n");

/***/ }),

/***/ "./node_modules/arangojs/error.js":
/*!****************************************!*\
  !*** ./node_modules/arangojs/error.js ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HttpError = exports.ArangoError = exports.isSystemError = exports.isArangoErrorResponse = exports.isArangoError = void 0;\n/**\n * ```ts\n * import type { ArangoError, HttpError } from \"arangojs/error\";\n * ```\n *\n * The \"error\" module provides types and interfaces for TypeScript related\n * to arangojs error handling.\n *\n * @packageDocumentation\n */\nconst error_1 = __webpack_require__(/*! ./lib/error */ \"./node_modules/arangojs/lib/error.js\");\nconst messages = {\n    0: \"Network Error\",\n    400: \"Bad Request\",\n    401: \"Unauthorized\",\n    402: \"Payment Required\",\n    403: \"Forbidden\",\n    404: \"Not Found\",\n    405: \"Method Not Allowed\",\n    406: \"Not Acceptable\",\n    407: \"Proxy Authentication Required\",\n    408: \"Request Timeout\",\n    409: \"Conflict\",\n    410: \"Gone\",\n    411: \"Length Required\",\n    412: \"Precondition Failed\",\n    413: \"Payload Too Large\",\n    414: \"Request-URI Too Long\",\n    415: \"Unsupported Media Type\",\n    416: \"Requested Range Not Satisfiable\",\n    417: \"Expectation Failed\",\n    418: \"I'm a teapot\",\n    421: \"Misdirected Request\",\n    422: \"Unprocessable Entity\",\n    423: \"Locked\",\n    424: \"Failed Dependency\",\n    426: \"Upgrade Required\",\n    428: \"Precondition Required\",\n    429: \"Too Many Requests\",\n    431: \"Request Header Fields Too Large\",\n    444: \"Connection Closed Without Response\",\n    451: \"Unavailable For Legal Reasons\",\n    499: \"Client Closed Request\",\n    500: \"Internal Server Error\",\n    501: \"Not Implemented\",\n    502: \"Bad Gateway\",\n    503: \"Service Unavailable\",\n    504: \"Gateway Timeout\",\n    505: \"HTTP Version Not Supported\",\n    506: \"Variant Also Negotiates\",\n    507: \"Insufficient Storage\",\n    508: \"Loop Detected\",\n    510: \"Not Extended\",\n    511: \"Network Authentication Required\",\n    599: \"Network Connect Timeout Error\",\n};\nconst nativeErrorKeys = [\n    \"fileName\",\n    \"lineNumber\",\n    \"columnNumber\",\n    \"stack\",\n    \"description\",\n    \"number\",\n];\n/**\n * Indicates whether the given value represents an {@link ArangoError}.\n *\n * @param error - A value that might be an `ArangoError`.\n */\nfunction isArangoError(error) {\n    return Boolean(error && error.isArangoError);\n}\nexports.isArangoError = isArangoError;\n/**\n * Indicates whether the given value represents an ArangoDB error response.\n *\n * @internal\n */\nfunction isArangoErrorResponse(body) {\n    return (body &&\n        body.hasOwnProperty(\"error\") &&\n        body.hasOwnProperty(\"code\") &&\n        body.hasOwnProperty(\"errorMessage\") &&\n        body.hasOwnProperty(\"errorNum\"));\n}\nexports.isArangoErrorResponse = isArangoErrorResponse;\n/**\n * Indicates whether the given value represents a Node.js `SystemError`.\n */\nfunction isSystemError(err) {\n    return (Object.getPrototypeOf(err) === Error.prototype &&\n        err.hasOwnProperty(\"code\") &&\n        err.hasOwnProperty(\"errno\") &&\n        err.hasOwnProperty(\"syscall\"));\n}\nexports.isSystemError = isSystemError;\n/**\n * Represents an error returned by ArangoDB.\n */\nclass ArangoError extends error_1.ExtendableError {\n    /**\n     * @internal\n     * @hidden\n     */\n    constructor(response) {\n        super();\n        this.name = \"ArangoError\";\n        this.response = response;\n        this.message = response.body.errorMessage;\n        this.errorNum = response.body.errorNum;\n        this.code = response.body.code;\n        const err = new Error(this.message);\n        err.name = this.name;\n        for (const key of nativeErrorKeys) {\n            if (err[key])\n                this[key] = err[key];\n        }\n    }\n    /**\n     * @internal\n     *\n     * Indicates that this object represents an ArangoDB error.\n     */\n    get isArangoError() {\n        return true;\n    }\n    toJSON() {\n        return {\n            error: true,\n            errorMessage: this.message,\n            errorNum: this.errorNum,\n            code: this.code,\n        };\n    }\n}\nexports.ArangoError = ArangoError;\n/**\n * Represents a plain HTTP error response.\n */\nclass HttpError extends error_1.ExtendableError {\n    /**\n     * @internal\n     * @hidden\n     */\n    constructor(response) {\n        super();\n        this.name = \"HttpError\";\n        this.response = response;\n        this.code = response.statusCode || 500;\n        this.message = messages[this.code] || messages[500];\n        const err = new Error(this.message);\n        err.name = this.name;\n        for (const key of nativeErrorKeys) {\n            if (err[key])\n                this[key] = err[key];\n        }\n    }\n    toJSON() {\n        return {\n            error: true,\n            code: this.code,\n        };\n    }\n}\nexports.HttpError = HttpError;\n//# sourceMappingURL=error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/arangojs/error.js\n");

/***/ }),

/***/ "./node_modules/arangojs/graph.js":
/*!****************************************!*\
  !*** ./node_modules/arangojs/graph.js ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Graph = exports.GraphEdgeCollection = exports.GraphVertexCollection = exports.isArangoGraph = void 0;\n/**\n * ```ts\n * import type {\n *   Graph,\n *   GraphVertexCollection,\n *   GraphEdgeCollection,\n * } from \"arangojs/graph\";\n * ```\n *\n * The \"graph\" module provides graph related types and interfaces\n * for TypeScript.\n *\n * @packageDocumentation\n */\nconst collection_1 = __webpack_require__(/*! ./collection */ \"./node_modules/arangojs/collection.js\");\nconst documents_1 = __webpack_require__(/*! ./documents */ \"./node_modules/arangojs/documents.js\");\nconst error_1 = __webpack_require__(/*! ./error */ \"./node_modules/arangojs/error.js\");\nconst codes_1 = __webpack_require__(/*! ./lib/codes */ \"./node_modules/arangojs/lib/codes.js\");\n/**\n * Indicates whether the given value represents a {@link Graph}.\n *\n * @param graph - A value that might be a Graph.\n */\nfunction isArangoGraph(graph) {\n    return Boolean(graph && graph.isArangoGraph);\n}\nexports.isArangoGraph = isArangoGraph;\n/**\n * @internal\n * @hidden\n */\nfunction mungeGharialResponse(body, prop) {\n    const { new: newDoc, old: oldDoc, [prop]: doc, ...meta } = body;\n    const result = { ...meta, ...doc };\n    if (typeof newDoc !== \"undefined\")\n        result.new = newDoc;\n    if (typeof oldDoc !== \"undefined\")\n        result.old = oldDoc;\n    return result;\n}\n/**\n * @internal\n * @hidden\n */\nfunction coerceEdgeDefinition(options) {\n    const edgeDefinition = {};\n    edgeDefinition.collection = collection_1.collectionToString(options.collection);\n    edgeDefinition.from = Array.isArray(options.from)\n        ? options.from.map(collection_1.collectionToString)\n        : [collection_1.collectionToString(options.from)];\n    edgeDefinition.to = Array.isArray(options.to)\n        ? options.to.map(collection_1.collectionToString)\n        : [collection_1.collectionToString(options.to)];\n    return edgeDefinition;\n}\n/**\n * Represents a {@link DocumentCollection} of vertices in a {@link Graph}.\n *\n * @param T - Type to use for document data. Defaults to `any`.\n */\nclass GraphVertexCollection {\n    /**\n     * @internal\n     * @hidden\n     */\n    constructor(db, name, graph) {\n        this._db = db;\n        this._collection = db.collection(name);\n        this._name = this._collection.name;\n        this._graph = graph;\n    }\n    /**\n     * @internal\n     *\n     * Indicates that this object represents an ArangoDB collection.\n     */\n    get isArangoCollection() {\n        return true;\n    }\n    /**\n     * Name of the collection.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * A {@link DocumentCollection} instance for this vertex collection.\n     */\n    get collection() {\n        return this._collection;\n    }\n    /**\n     * The {@link Graph} instance this vertex collection is bound to.\n     */\n    get graph() {\n        return this._graph;\n    }\n    /**\n     * Checks whether a vertex matching the given key or id exists in this\n     * collection.\n     *\n     * Throws an exception when passed a vertex or `_id` from a different\n     * collection.\n     *\n     * @param selector - Document `_key`, `_id` or object with either of those\n     * properties (e.g. a vertex from this collection).\n     *\n     * @example\n     * ```js\n     * const graph = db.graph(\"some-graph\");\n     * const collection = graph.vertexCollection(\"vertices\");\n     * const exists = await collection.vertexExists(\"abc123\");\n     * if (!exists) {\n     *   console.log(\"Vertex does not exist\");\n     * }\n     * ```\n     */\n    async vertexExists(selector) {\n        try {\n            return await this._db.request({\n                method: \"HEAD\",\n                path: `/_api/gharial/${encodeURIComponent(this.graph.name)}/vertex/${encodeURI(documents_1._documentHandle(selector, this._name))}`,\n            }, () => true);\n        }\n        catch (err) {\n            if (err.code === 404) {\n                return false;\n            }\n            throw err;\n        }\n    }\n    async vertex(selector, options = {}) {\n        if (typeof options === \"boolean\") {\n            options = { graceful: options };\n        }\n        const { allowDirtyRead = undefined, graceful = false, rev, ...qs } = options;\n        const headers = {};\n        if (rev)\n            headers[\"if-match\"] = rev;\n        const result = this._db.request({\n            path: `/_api/gharial/${encodeURIComponent(this.graph.name)}/vertex/${encodeURI(documents_1._documentHandle(selector, this._name))}`,\n            headers,\n            qs,\n            allowDirtyRead,\n        }, (res) => res.body.vertex);\n        if (!graceful)\n            return result;\n        try {\n            return await result;\n        }\n        catch (err) {\n            if (error_1.isArangoError(err) && err.errorNum === codes_1.DOCUMENT_NOT_FOUND) {\n                return null;\n            }\n            throw err;\n        }\n    }\n    save(data, options) {\n        return this._db.request({\n            method: \"POST\",\n            path: `/_api/gharial/${encodeURIComponent(this.graph.name)}/vertex/${encodeURIComponent(this._name)}`,\n            body: data,\n            qs: options,\n        }, (res) => mungeGharialResponse(res.body, \"vertex\"));\n    }\n    replace(selector, newValue, options = {}) {\n        if (typeof options === \"string\") {\n            options = { rev: options };\n        }\n        const { rev, ...qs } = options;\n        const headers = {};\n        if (rev)\n            headers[\"if-match\"] = rev;\n        return this._db.request({\n            method: \"PUT\",\n            path: `/_api/gharial/${encodeURIComponent(this.graph.name)}/vertex/${encodeURI(documents_1._documentHandle(selector, this._name))}`,\n            body: newValue,\n            qs,\n            headers,\n        }, (res) => mungeGharialResponse(res.body, \"vertex\"));\n    }\n    update(selector, newValue, options = {}) {\n        if (typeof options === \"string\") {\n            options = { rev: options };\n        }\n        const headers = {};\n        const { rev, ...qs } = options;\n        if (rev)\n            headers[\"if-match\"] = rev;\n        return this._db.request({\n            method: \"PATCH\",\n            path: `/_api/gharial/${encodeURIComponent(this.graph.name)}/vertex/${encodeURI(documents_1._documentHandle(selector, this._name))}`,\n            body: newValue,\n            qs,\n            headers,\n        }, (res) => mungeGharialResponse(res.body, \"vertex\"));\n    }\n    remove(selector, options = {}) {\n        if (typeof options === \"string\") {\n            options = { rev: options };\n        }\n        const headers = {};\n        const { rev, ...qs } = options;\n        if (rev)\n            headers[\"if-match\"] = rev;\n        return this._db.request({\n            method: \"DELETE\",\n            path: `/_api/gharial/${encodeURIComponent(this.graph.name)}/vertex/${encodeURI(documents_1._documentHandle(selector, this._name))}`,\n            qs,\n            headers,\n        }, (res) => mungeGharialResponse(res.body, \"removed\"));\n    }\n}\nexports.GraphVertexCollection = GraphVertexCollection;\n/**\n * Represents a {@link EdgeCollection} of edges in a {@link Graph}.\n *\n * @param T - Type to use for document data. Defaults to `any`.\n */\nclass GraphEdgeCollection {\n    /**\n     * @internal\n     * @hidden\n     */\n    constructor(db, name, graph) {\n        this._db = db;\n        this._collection = db.collection(name);\n        this._name = this._collection.name;\n        this._graph = graph;\n    }\n    /**\n     * @internal\n     *\n     * Indicates that this object represents an ArangoDB collection.\n     */\n    get isArangoCollection() {\n        return true;\n    }\n    /**\n     * Name of the collection.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * A {@link EdgeCollection} instance for this edge collection.\n     */\n    get collection() {\n        return this._collection;\n    }\n    /**\n     * The {@link Graph} instance this edge collection is bound to.\n     */\n    get graph() {\n        return this._graph;\n    }\n    /**\n     * Checks whether a edge matching the given key or id exists in this\n     * collection.\n     *\n     * Throws an exception when passed a edge or `_id` from a different\n     * collection.\n     *\n     * @param selector - Document `_key`, `_id` or object with either of those\n     * properties (e.g. a edge from this collection).\n     *\n     * @example\n     * ```js\n     * const graph = db.graph(\"some-graph\");\n     * const collection = graph.edgeCollection(\"friends\")\n     * const exists = await collection.edgeExists(\"abc123\");\n     * if (!exists) {\n     *   console.log(\"Edge does not exist\");\n     * }\n     * ```\n     */\n    async edgeExists(selector) {\n        try {\n            return await this._db.request({\n                method: \"HEAD\",\n                path: `/_api/gharial/${encodeURIComponent(this.graph.name)}/edge/${encodeURI(documents_1._documentHandle(selector, this._name))}`,\n            }, () => true);\n        }\n        catch (err) {\n            if (err.code === 404) {\n                return false;\n            }\n            throw err;\n        }\n    }\n    async edge(selector, options = {}) {\n        if (typeof options === \"boolean\") {\n            options = { graceful: options };\n        }\n        const { allowDirtyRead = undefined, graceful = false, rev, ...qs } = options;\n        const headers = {};\n        if (rev)\n            headers[\"if-match\"] = rev;\n        const result = this._db.request({\n            path: `/_api/gharial/${encodeURIComponent(this.graph.name)}/edge/${encodeURI(documents_1._documentHandle(selector, this._name))}`,\n            qs,\n            allowDirtyRead,\n        }, (res) => res.body.edge);\n        if (!graceful)\n            return result;\n        try {\n            return await result;\n        }\n        catch (err) {\n            if (error_1.isArangoError(err) && err.errorNum === codes_1.DOCUMENT_NOT_FOUND) {\n                return null;\n            }\n            throw err;\n        }\n    }\n    save(data, options) {\n        return this._db.request({\n            method: \"POST\",\n            path: `/_api/gharial/${encodeURIComponent(this.graph.name)}/edge/${encodeURIComponent(this._name)}`,\n            body: data,\n            qs: options,\n        }, (res) => mungeGharialResponse(res.body, \"edge\"));\n    }\n    replace(selector, newValue, options = {}) {\n        if (typeof options === \"string\") {\n            options = { rev: options };\n        }\n        const { rev, ...qs } = options;\n        const headers = {};\n        if (rev)\n            headers[\"if-match\"] = rev;\n        return this._db.request({\n            method: \"PUT\",\n            path: `/_api/gharial/${encodeURIComponent(this.graph.name)}/edge/${encodeURI(documents_1._documentHandle(selector, this._name))}`,\n            body: newValue,\n            qs,\n            headers,\n        }, (res) => mungeGharialResponse(res.body, \"edge\"));\n    }\n    update(selector, newValue, options = {}) {\n        if (typeof options === \"string\") {\n            options = { rev: options };\n        }\n        const { rev, ...qs } = options;\n        const headers = {};\n        if (rev)\n            headers[\"if-match\"] = rev;\n        return this._db.request({\n            method: \"PATCH\",\n            path: `/_api/gharial/${encodeURIComponent(this.graph.name)}/edge/${encodeURI(documents_1._documentHandle(selector, this._name))}`,\n            body: newValue,\n            qs,\n            headers,\n        }, (res) => mungeGharialResponse(res.body, \"edge\"));\n    }\n    remove(selector, options = {}) {\n        if (typeof options === \"string\") {\n            options = { rev: options };\n        }\n        const { rev, ...qs } = options;\n        const headers = {};\n        if (rev)\n            headers[\"if-match\"] = rev;\n        return this._db.request({\n            method: \"DELETE\",\n            path: `/_api/gharial/${encodeURIComponent(this.graph.name)}/edge/${encodeURI(documents_1._documentHandle(selector, this._name))}`,\n            qs,\n            headers,\n        }, (res) => mungeGharialResponse(res.body, \"removed\"));\n    }\n}\nexports.GraphEdgeCollection = GraphEdgeCollection;\n/**\n * Represents a graph in a {@link Database}.\n */\nclass Graph {\n    /**\n     * @internal\n     * @hidden\n     */\n    constructor(db, name) {\n        this._name = name.normalize(\"NFC\");\n        this._db = db;\n    }\n    /**\n     * @internal\n     *\n     * Indicates that this object represents an ArangoDB Graph.\n     */\n    get isArangoGraph() {\n        return true;\n    }\n    /**\n     * Name of the graph.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * Checks whether the graph exists.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graph = db.graph(\"some-graph\");\n     * const result = await graph.exists();\n     * // result indicates whether the graph exists\n     * ```\n     */\n    async exists() {\n        try {\n            await this.get();\n            return true;\n        }\n        catch (err) {\n            if (error_1.isArangoError(err) && err.errorNum === codes_1.GRAPH_NOT_FOUND) {\n                return false;\n            }\n            throw err;\n        }\n    }\n    /**\n     * Retrieves general information about the graph.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graph = db.graph(\"some-graph\");\n     * const data = await graph.get();\n     * // data contains general information about the graph\n     * ```\n     */\n    get() {\n        return this._db.request({ path: `/_api/gharial/${encodeURIComponent(this._name)}` }, (res) => res.body.graph);\n    }\n    /**\n     * Creates a graph with the given `edgeDefinitions` and `options` for this\n     * graph's name.\n     *\n     * @param edgeDefinitions - Definitions for the relations of the graph.\n     * @param options - Options for creating the graph.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graph = db.graph(\"some-graph\");\n     * const info = await graph.create([\n     *   {\n     *     collection: \"edges\",\n     *     from: [\"start-vertices\"],\n     *     to: [\"end-vertices\"],\n     *   },\n     * ]);\n     * // graph now exists\n     * ```\n     */\n    create(edgeDefinitions, options) {\n        const { orphanCollections, satellites, waitForSync, isSmart, isDisjoint, ...opts } = options !== null && options !== void 0 ? options : {};\n        return this._db.request({\n            method: \"POST\",\n            path: \"/_api/gharial\",\n            body: {\n                orphanCollections: orphanCollections &&\n                    (Array.isArray(orphanCollections)\n                        ? orphanCollections.map(collection_1.collectionToString)\n                        : [collection_1.collectionToString(orphanCollections)]),\n                edgeDefinitions: edgeDefinitions.map(coerceEdgeDefinition),\n                isSmart,\n                isDisjoint,\n                name: this._name,\n                options: { ...opts, satellites: satellites === null || satellites === void 0 ? void 0 : satellites.map(collection_1.collectionToString) },\n            },\n            qs: { waitForSync },\n        }, (res) => res.body.graph);\n    }\n    /**\n     * Deletes the graph from the database.\n     *\n     * @param dropCollections - If set to `true`, the collections associated with\n     * the graph will also be deleted.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graph = db.graph(\"some-graph\");\n     * await graph.drop();\n     * // the graph \"some-graph\" no longer exists\n     * ```\n     */\n    drop(dropCollections = false) {\n        return this._db.request({\n            method: \"DELETE\",\n            path: `/_api/gharial/${encodeURIComponent(this._name)}`,\n            qs: { dropCollections },\n        }, (res) => res.body.removed);\n    }\n    /**\n     * Returns a {@link GraphVertexCollection} instance for the given collection\n     * name representing the collection in this graph.\n     *\n     * @param T - Type to use for document data. Defaults to `any`.\n     * @param collection - Name of the vertex collection.\n     */\n    vertexCollection(collection) {\n        return new GraphVertexCollection(this._db, collection_1.collectionToString(collection), this);\n    }\n    /**\n     * Fetches all vertex collections of this graph from the database and returns\n     * an array of their names.\n     *\n     * See also {@link Graph.vertexCollections}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graph = db.graph(\"some-graph\");\n     * const info = await graph.create([\n     *   {\n     *     collection: \"edges\",\n     *     from: [\"start-vertices\"],\n     *     to: [\"end-vertices\"],\n     *   },\n     * ]);\n     * const vertexCollectionNames = await graph.listVertexCollections();\n     * // [\"start-vertices\", \"end-vertices\"]\n     * ```\n     */\n    listVertexCollections() {\n        return this._db.request({ path: `/_api/gharial/${encodeURIComponent(this._name)}/vertex` }, (res) => res.body.collections);\n    }\n    /**\n     * Fetches all vertex collections of this graph from the database and returns\n     * an array of {@link GraphVertexCollection} instances.\n     *\n     * See also {@link Graph.listVertexCollections}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graph = db.graph(\"some-graph\");\n     * const info = await graph.create([\n     *   {\n     *     collection: \"edges\",\n     *     from: [\"start-vertices\"],\n     *     to: [\"end-vertices\"],\n     *   },\n     * ]);\n     * const vertexCollections = await graph.vertexCollections();\n     * for (const vertexCollection of vertexCollections) {\n     *   console.log(vertexCollection.name);\n     *   // \"start-vertices\"\n     *   // \"end-vertices\"\n     * }\n     * ```\n     */\n    async vertexCollections() {\n        const names = await this.listVertexCollections();\n        return names.map((name) => new GraphVertexCollection(this._db, name, this));\n    }\n    /**\n     * Adds the given collection to this graph as a vertex collection.\n     *\n     * @param collection - Collection to add to the graph.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graph = db.graph(\"some-graph\");\n     * await graph.addVertexCollection(\"more-vertices\");\n     * // The collection \"more-vertices\" has been added to the graph\n     * const extra = db.collection(\"extra-vertices\");\n     * await graph.addVertexCollection(extra);\n     * // The collection \"extra-vertices\" has been added to the graph\n     * ```\n     */\n    addVertexCollection(collection, options) {\n        const { satellites, ...opts } = options !== null && options !== void 0 ? options : {};\n        return this._db.request({\n            method: \"POST\",\n            path: `/_api/gharial/${encodeURIComponent(this._name)}/vertex`,\n            body: {\n                collection: collection_1.collectionToString(collection),\n                options: { ...opts, satellites: satellites === null || satellites === void 0 ? void 0 : satellites.map(collection_1.collectionToString) },\n            },\n        }, (res) => res.body.graph);\n    }\n    /**\n     * Removes the given collection from this graph as a vertex collection.\n     *\n     * @param collection - Collection to remove from the graph.\n     * @param dropCollection - If set to `true`, the collection will also be\n     * deleted from the database.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graph = db.graph(\"some-graph\");\n     * const info = await graph.create([\n     *   {\n     *     collection: \"edges\",\n     *     from: [\"start-vertices\"],\n     *     to: [\"end-vertices\"],\n     *   },\n     * ]);\n     * await graph.removeVertexCollection(\"start-vertices\");\n     * // The collection \"start-vertices\" is no longer part of the graph.\n     * ```\n     */\n    removeVertexCollection(collection, dropCollection = false) {\n        return this._db.request({\n            method: \"DELETE\",\n            path: `/_api/gharial/${encodeURIComponent(this._name)}/vertex/${encodeURIComponent(collection_1.collectionToString(collection))}`,\n            qs: {\n                dropCollection,\n            },\n        }, (res) => res.body.graph);\n    }\n    /**\n     * Returns a {@link GraphEdgeCollection} instance for the given collection\n     * name representing the collection in this graph.\n     *\n     * @param T - Type to use for document data. Defaults to `any`.\n     * @param collection - Name of the edge collection.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graph = db.graph(\"some-graph\");\n     * const info = await graph.create([\n     *   {\n     *     collection: \"edges\",\n     *     from: [\"start-vertices\"],\n     *     to: [\"end-vertices\"],\n     *   },\n     * ]);\n     * const graphEdgeCollection = graph.edgeCollection(\"edges\");\n     * // Access the underlying EdgeCollection API:\n     * const edgeCollection = graphEdgeCollection.collection;\n     * ```\n     */\n    edgeCollection(collection) {\n        return new GraphEdgeCollection(this._db, collection_1.collectionToString(collection), this);\n    }\n    /**\n     * Fetches all edge collections of this graph from the database and returns\n     * an array of their names.\n     *\n     * See also {@link Graph.edgeCollections}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graph = db.graph(\"some-graph\");\n     * const info = await graph.create([\n     *   {\n     *     collection: \"edges\",\n     *     from: [\"start-vertices\"],\n     *     to: [\"end-vertices\"],\n     *   },\n     * ]);\n     * const edgeCollectionNames = await graph.listEdgeCollections();\n     * // [\"edges\"]\n     * ```\n     */\n    listEdgeCollections() {\n        return this._db.request({ path: `/_api/gharial/${encodeURIComponent(this._name)}/edge` }, (res) => res.body.collections);\n    }\n    /**\n     * Fetches all edge collections of this graph from the database and returns\n     * an array of {@link GraphEdgeCollection} instances.\n     *\n     * See also {@link Graph.listEdgeCollections}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graph = db.graph(\"some-graph\");\n     * const info = await graph.create([\n     *   {\n     *     collection: \"edges\",\n     *     from: [\"start-vertices\"],\n     *     to: [\"end-vertices\"],\n     *   },\n     * ]);\n     * const graphEdgeCollections = await graph.edgeCollections();\n     * for (const collection of graphEdgeCollection) {\n     *   console.log(collection.name);\n     *   // \"edges\"\n     * }\n     * ```\n     */\n    async edgeCollections() {\n        const names = await this.listEdgeCollections();\n        return names.map((name) => new GraphEdgeCollection(this._db, name, this));\n    }\n    /**\n     * Adds an edge definition to this graph.\n     *\n     * @param edgeDefinition - Definition of a relation in this graph.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graph = db.graph(\"some-graph\");\n     * await graph.addEdgeDefinition({\n     *   collection: \"edges\",\n     *   from: [\"start-vertices\"],\n     *   to: [\"end-vertices\"],\n     * });\n     * // The edge definition has been added to the graph\n     * ```\n     */\n    addEdgeDefinition(edgeDefinition, options) {\n        const { satellites, ...opts } = options !== null && options !== void 0 ? options : {};\n        return this._db.request({\n            method: \"POST\",\n            path: `/_api/gharial/${encodeURIComponent(this._name)}/edge`,\n            body: {\n                ...coerceEdgeDefinition(edgeDefinition),\n                options: { ...opts, satellites: satellites === null || satellites === void 0 ? void 0 : satellites.map(collection_1.collectionToString) },\n            },\n        }, (res) => res.body.graph);\n    }\n    replaceEdgeDefinition(collectionOrEdgeDefinitionOptions, edgeDefinitionOrOptions, options) {\n        let collection = collectionOrEdgeDefinitionOptions;\n        let edgeDefinition = edgeDefinitionOrOptions;\n        if (edgeDefinitionOrOptions &&\n            !edgeDefinitionOrOptions.hasOwnProperty(\"collection\")) {\n            options = edgeDefinitionOrOptions;\n            edgeDefinitionOrOptions = undefined;\n        }\n        if (!edgeDefinitionOrOptions) {\n            edgeDefinition =\n                collectionOrEdgeDefinitionOptions;\n            collection = edgeDefinition.collection;\n        }\n        const { satellites, ...opts } = options !== null && options !== void 0 ? options : {};\n        return this._db.request({\n            method: \"PUT\",\n            path: `/_api/gharial/${encodeURIComponent(this._name)}/edge/${encodeURIComponent(collection_1.collectionToString(collection))}`,\n            body: {\n                ...coerceEdgeDefinition(edgeDefinition),\n                options: { ...opts, satellites: satellites === null || satellites === void 0 ? void 0 : satellites.map(collection_1.collectionToString) },\n            },\n        }, (res) => res.body.graph);\n    }\n    /**\n     * Removes the edge definition for the given edge collection from this graph.\n     *\n     * @param collection - Edge collection for which to remove the definition.\n     * @param dropCollection - If set to `true`, the collection will also be\n     * deleted from the database.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graph = db.graph(\"some-graph\");\n     * const info = await graph.create([\n     *   {\n     *     collection: \"edges\",\n     *     from: [\"start-vertices\"],\n     *     to: [\"end-vertices\"],\n     *   },\n     * ]);\n     * await graph.removeEdgeDefinition(\"edges\");\n     * // The edge definition for \"edges\" has been replaced\n     * ```\n     */\n    removeEdgeDefinition(collection, dropCollection = false) {\n        return this._db.request({\n            method: \"DELETE\",\n            path: `/_api/gharial/${encodeURIComponent(this._name)}/edge/${encodeURIComponent(collection_1.collectionToString(collection))}`,\n            qs: {\n                dropCollection,\n            },\n        }, (res) => res.body.graph);\n    }\n    /**\n     * Performs a traversal starting from the given `startVertex` and following\n     * edges contained in this graph.\n     *\n     * See also {@link EdgeCollection.traversal}.\n     *\n     * @param startVertex - Document `_id` of a vertex in this graph.\n     * @param options - Options for performing the traversal.\n     *\n     * @deprecated Simple Queries have been deprecated in ArangoDB 3.4 and can be\n     * replaced with AQL queries.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const graph = db.graph(\"my-graph\");\n     * const collection = graph.edgeCollection(\"edges\").collection;\n     * await collection.import([\n     *   [\"_key\", \"_from\", \"_to\"],\n     *   [\"x\", \"vertices/a\", \"vertices/b\"],\n     *   [\"y\", \"vertices/b\", \"vertices/c\"],\n     *   [\"z\", \"vertices/c\", \"vertices/d\"],\n     * ]);\n     * const result = await graph.traversal(\"vertices/a\", {\n     *   direction: \"outbound\",\n     *   init: \"result.vertices = [];\",\n     *   visitor: \"result.vertices.push(vertex._key);\",\n     * });\n     * console.log(result.vertices); // [\"a\", \"b\", \"c\", \"d\"]\n     * ```\n     */\n    traversal(startVertex, options) {\n        return this._db.request({\n            method: \"POST\",\n            path: `/_api/traversal`,\n            body: {\n                ...options,\n                startVertex,\n                graphName: this._name,\n            },\n        }, (res) => res.body.result);\n    }\n}\nexports.Graph = Graph;\n//# sourceMappingURL=graph.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/arangojs/graph.js\n");

/***/ }),

/***/ "./node_modules/arangojs/index.js":
/*!****************************************!*\
  !*** ./node_modules/arangojs/index.js ***!
  \****************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.arangojs = void 0;\nconst database_1 = __webpack_require__(/*! ./database */ \"./node_modules/arangojs/database.js\");\nmodule.exports = exports = arangojs;\nfunction arangojs(config, name) {\n    if (typeof config === \"string\" || Array.isArray(config)) {\n        const url = config;\n        return new database_1.Database(url, name);\n    }\n    return new database_1.Database(config);\n}\nexports.arangojs = arangojs;\nexports[\"default\"] = arangojs;\nvar aql_1 = __webpack_require__(/*! ./aql */ \"./node_modules/arangojs/aql.js\");\nObject.defineProperty(exports, \"aql\", ({ enumerable: true, get: function () { return aql_1.aql; } }));\nvar collection_1 = __webpack_require__(/*! ./collection */ \"./node_modules/arangojs/collection.js\");\nObject.defineProperty(exports, \"CollectionStatus\", ({ enumerable: true, get: function () { return collection_1.CollectionStatus; } }));\nObject.defineProperty(exports, \"CollectionType\", ({ enumerable: true, get: function () { return collection_1.CollectionType; } }));\nvar database_2 = __webpack_require__(/*! ./database */ \"./node_modules/arangojs/database.js\");\nObject.defineProperty(exports, \"Database\", ({ enumerable: true, get: function () { return database_2.Database; } }));\nvar view_1 = __webpack_require__(/*! ./view */ \"./node_modules/arangojs/view.js\");\nObject.defineProperty(exports, \"ViewType\", ({ enumerable: true, get: function () { return view_1.ViewType; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXJhbmdvanMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZ0JBQWdCO0FBQ2hCLG1CQUFtQixtQkFBTyxDQUFDLHVEQUFZO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEIsa0JBQWU7QUFDZixZQUFZLG1CQUFPLENBQUMsNkNBQU87QUFDM0IsdUNBQXNDLEVBQUUscUNBQXFDLHFCQUFxQixFQUFDO0FBQ25HLG1CQUFtQixtQkFBTyxDQUFDLDJEQUFjO0FBQ3pDLG9EQUFtRCxFQUFFLHFDQUFxQyx5Q0FBeUMsRUFBQztBQUNwSSxrREFBaUQsRUFBRSxxQ0FBcUMsdUNBQXVDLEVBQUM7QUFDaEksaUJBQWlCLG1CQUFPLENBQUMsdURBQVk7QUFDckMsNENBQTJDLEVBQUUscUNBQXFDLCtCQUErQixFQUFDO0FBQ2xILGFBQWEsbUJBQU8sQ0FBQywrQ0FBUTtBQUM3Qiw0Q0FBMkMsRUFBRSxxQ0FBcUMsMkJBQTJCLEVBQUM7QUFDOUciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2FyYW5nb2pzL2luZGV4LmpzPzRkYmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmFyYW5nb2pzID0gdm9pZCAwO1xuY29uc3QgZGF0YWJhc2VfMSA9IHJlcXVpcmUoXCIuL2RhdGFiYXNlXCIpO1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gYXJhbmdvanM7XG5mdW5jdGlvbiBhcmFuZ29qcyhjb25maWcsIG5hbWUpIHtcbiAgICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KGNvbmZpZykpIHtcbiAgICAgICAgY29uc3QgdXJsID0gY29uZmlnO1xuICAgICAgICByZXR1cm4gbmV3IGRhdGFiYXNlXzEuRGF0YWJhc2UodXJsLCBuYW1lKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBkYXRhYmFzZV8xLkRhdGFiYXNlKGNvbmZpZyk7XG59XG5leHBvcnRzLmFyYW5nb2pzID0gYXJhbmdvanM7XG5leHBvcnRzLmRlZmF1bHQgPSBhcmFuZ29qcztcbnZhciBhcWxfMSA9IHJlcXVpcmUoXCIuL2FxbFwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImFxbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYXFsXzEuYXFsOyB9IH0pO1xudmFyIGNvbGxlY3Rpb25fMSA9IHJlcXVpcmUoXCIuL2NvbGxlY3Rpb25cIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDb2xsZWN0aW9uU3RhdHVzXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb2xsZWN0aW9uXzEuQ29sbGVjdGlvblN0YXR1czsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkNvbGxlY3Rpb25UeXBlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb2xsZWN0aW9uXzEuQ29sbGVjdGlvblR5cGU7IH0gfSk7XG52YXIgZGF0YWJhc2VfMiA9IHJlcXVpcmUoXCIuL2RhdGFiYXNlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGF0YWJhc2VcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRhdGFiYXNlXzIuRGF0YWJhc2U7IH0gfSk7XG52YXIgdmlld18xID0gcmVxdWlyZShcIi4vdmlld1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlZpZXdUeXBlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB2aWV3XzEuVmlld1R5cGU7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/arangojs/index.js\n");

/***/ }),

/***/ "./node_modules/arangojs/indexes.js":
/*!******************************************!*\
  !*** ./node_modules/arangojs/indexes.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\n/**\n * ```ts\n * import type {\n *   FulltextIndex,\n *   GeoIndex,\n *   HashIndex,\n *   PersistentIndex,\n *   PrimaryIndex,\n *   SkiplistIndex,\n *   TtlIndex,\n * } from \"arangojs/indexes\";\n * ```\n *\n * The \"indexes\" module provides index-related types for TypeScript.\n *\n * @packageDocumentation\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports._indexHandle = void 0;\n/**\n * @internal\n * @hidden\n */\nfunction _indexHandle(selector, collectionName) {\n    if (typeof selector !== \"string\") {\n        if (selector.id) {\n            return _indexHandle(selector.id, collectionName);\n        }\n        throw new Error(\"Index handle must be a string or an object with an id attribute\");\n    }\n    if (selector.includes(\"/\")) {\n        const [head, ...tail] = selector.split(\"/\");\n        const normalizedHead = head.normalize(\"NFC\");\n        if (normalizedHead !== collectionName) {\n            throw new Error(`Index ID \"${selector}\" does not match collection name \"${collectionName}\"`);\n        }\n        return [normalizedHead, ...tail].join(\"/\");\n    }\n    return `${collectionName}/${selector}`;\n}\nexports._indexHandle = _indexHandle;\n//# sourceMappingURL=indexes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXJhbmdvanMvaW5kZXhlcy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0I7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLFNBQVMsb0NBQW9DLGVBQWU7QUFDckc7QUFDQTtBQUNBO0FBQ0EsY0FBYyxlQUFlLEdBQUcsU0FBUztBQUN6QztBQUNBLG9CQUFvQjtBQUNwQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvYXJhbmdvanMvaW5kZXhlcy5qcz8zZjdlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBgYGB0c1xuICogaW1wb3J0IHR5cGUge1xuICogICBGdWxsdGV4dEluZGV4LFxuICogICBHZW9JbmRleCxcbiAqICAgSGFzaEluZGV4LFxuICogICBQZXJzaXN0ZW50SW5kZXgsXG4gKiAgIFByaW1hcnlJbmRleCxcbiAqICAgU2tpcGxpc3RJbmRleCxcbiAqICAgVHRsSW5kZXgsXG4gKiB9IGZyb20gXCJhcmFuZ29qcy9pbmRleGVzXCI7XG4gKiBgYGBcbiAqXG4gKiBUaGUgXCJpbmRleGVzXCIgbW9kdWxlIHByb3ZpZGVzIGluZGV4LXJlbGF0ZWQgdHlwZXMgZm9yIFR5cGVTY3JpcHQuXG4gKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuX2luZGV4SGFuZGxlID0gdm9pZCAwO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIEBoaWRkZW5cbiAqL1xuZnVuY3Rpb24gX2luZGV4SGFuZGxlKHNlbGVjdG9yLCBjb2xsZWN0aW9uTmFtZSkge1xuICAgIGlmICh0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgaWYgKHNlbGVjdG9yLmlkKSB7XG4gICAgICAgICAgICByZXR1cm4gX2luZGV4SGFuZGxlKHNlbGVjdG9yLmlkLCBjb2xsZWN0aW9uTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW5kZXggaGFuZGxlIG11c3QgYmUgYSBzdHJpbmcgb3IgYW4gb2JqZWN0IHdpdGggYW4gaWQgYXR0cmlidXRlXCIpO1xuICAgIH1cbiAgICBpZiAoc2VsZWN0b3IuaW5jbHVkZXMoXCIvXCIpKSB7XG4gICAgICAgIGNvbnN0IFtoZWFkLCAuLi50YWlsXSA9IHNlbGVjdG9yLnNwbGl0KFwiL1wiKTtcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZEhlYWQgPSBoZWFkLm5vcm1hbGl6ZShcIk5GQ1wiKTtcbiAgICAgICAgaWYgKG5vcm1hbGl6ZWRIZWFkICE9PSBjb2xsZWN0aW9uTmFtZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbmRleCBJRCBcIiR7c2VsZWN0b3J9XCIgZG9lcyBub3QgbWF0Y2ggY29sbGVjdGlvbiBuYW1lIFwiJHtjb2xsZWN0aW9uTmFtZX1cImApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbbm9ybWFsaXplZEhlYWQsIC4uLnRhaWxdLmpvaW4oXCIvXCIpO1xuICAgIH1cbiAgICByZXR1cm4gYCR7Y29sbGVjdGlvbk5hbWV9LyR7c2VsZWN0b3J9YDtcbn1cbmV4cG9ydHMuX2luZGV4SGFuZGxlID0gX2luZGV4SGFuZGxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXhlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/arangojs/indexes.js\n");

/***/ }),

/***/ "./node_modules/arangojs/lib/btoa.web.js":
/*!***********************************************!*\
  !*** ./node_modules/arangojs/lib/btoa.web.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\n/**\n * Wrapper around browser `btoa` function to allow substituting a\n * Node.js-specific implementation.\n *\n * @packageDocumentation\n * @internal\n * @hidden\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.btoa = void 0;\n/**\n * @internal\n * @hidden\n */\nfunction btoa(str) {\n    return window.btoa(str);\n}\nexports.btoa = btoa;\n//# sourceMappingURL=btoa.web.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXJhbmdvanMvbGliL2J0b2Eud2ViLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2FyYW5nb2pzL2xpYi9idG9hLndlYi5qcz9jNTkwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBXcmFwcGVyIGFyb3VuZCBicm93c2VyIGBidG9hYCBmdW5jdGlvbiB0byBhbGxvdyBzdWJzdGl0dXRpbmcgYVxuICogTm9kZS5qcy1zcGVjaWZpYyBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBpbnRlcm5hbFxuICogQGhpZGRlblxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmJ0b2EgPSB2b2lkIDA7XG4vKipcbiAqIEBpbnRlcm5hbFxuICogQGhpZGRlblxuICovXG5mdW5jdGlvbiBidG9hKHN0cikge1xuICAgIHJldHVybiB3aW5kb3cuYnRvYShzdHIpO1xufVxuZXhwb3J0cy5idG9hID0gYnRvYTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJ0b2Eud2ViLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/arangojs/lib/btoa.web.js\n");

/***/ }),

/***/ "./node_modules/arangojs/lib/codes.js":
/*!********************************************!*\
  !*** ./node_modules/arangojs/lib/codes.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\n/**\n * Error codes handled by arangojs.\n *\n * See also {@link https://www.arangodb.com/docs/stable/appendix-error-codes.html | ArangoDB error documentation}.\n *\n * @packageDocumentation\n * @internal\n * @hidden\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GRAPH_NOT_FOUND = exports.DATABASE_NOT_FOUND = exports.VIEW_NOT_FOUND = exports.COLLECTION_NOT_FOUND = exports.DOCUMENT_NOT_FOUND = exports.ANALYZER_NOT_FOUND = exports.TRANSACTION_NOT_FOUND = void 0;\nexports.TRANSACTION_NOT_FOUND = 10;\nexports.ANALYZER_NOT_FOUND = 1202;\nexports.DOCUMENT_NOT_FOUND = 1202;\nexports.COLLECTION_NOT_FOUND = 1203;\nexports.VIEW_NOT_FOUND = 1203;\nexports.DATABASE_NOT_FOUND = 1228;\nexports.GRAPH_NOT_FOUND = 1924;\n//# sourceMappingURL=codes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXJhbmdvanMvbGliL2NvZGVzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsYUFBYSxvR0FBb0c7QUFDakg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx1QkFBdUIsR0FBRywwQkFBMEIsR0FBRyxzQkFBc0IsR0FBRyw0QkFBNEIsR0FBRywwQkFBMEIsR0FBRywwQkFBMEIsR0FBRyw2QkFBNkI7QUFDdE0sNkJBQTZCO0FBQzdCLDBCQUEwQjtBQUMxQiwwQkFBMEI7QUFDMUIsNEJBQTRCO0FBQzVCLHNCQUFzQjtBQUN0QiwwQkFBMEI7QUFDMUIsdUJBQXVCO0FBQ3ZCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9hcmFuZ29qcy9saWIvY29kZXMuanM/ZGYzYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogRXJyb3IgY29kZXMgaGFuZGxlZCBieSBhcmFuZ29qcy5cbiAqXG4gKiBTZWUgYWxzbyB7QGxpbmsgaHR0cHM6Ly93d3cuYXJhbmdvZGIuY29tL2RvY3Mvc3RhYmxlL2FwcGVuZGl4LWVycm9yLWNvZGVzLmh0bWwgfCBBcmFuZ29EQiBlcnJvciBkb2N1bWVudGF0aW9ufS5cbiAqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBpbnRlcm5hbFxuICogQGhpZGRlblxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkdSQVBIX05PVF9GT1VORCA9IGV4cG9ydHMuREFUQUJBU0VfTk9UX0ZPVU5EID0gZXhwb3J0cy5WSUVXX05PVF9GT1VORCA9IGV4cG9ydHMuQ09MTEVDVElPTl9OT1RfRk9VTkQgPSBleHBvcnRzLkRPQ1VNRU5UX05PVF9GT1VORCA9IGV4cG9ydHMuQU5BTFlaRVJfTk9UX0ZPVU5EID0gZXhwb3J0cy5UUkFOU0FDVElPTl9OT1RfRk9VTkQgPSB2b2lkIDA7XG5leHBvcnRzLlRSQU5TQUNUSU9OX05PVF9GT1VORCA9IDEwO1xuZXhwb3J0cy5BTkFMWVpFUl9OT1RfRk9VTkQgPSAxMjAyO1xuZXhwb3J0cy5ET0NVTUVOVF9OT1RfRk9VTkQgPSAxMjAyO1xuZXhwb3J0cy5DT0xMRUNUSU9OX05PVF9GT1VORCA9IDEyMDM7XG5leHBvcnRzLlZJRVdfTk9UX0ZPVU5EID0gMTIwMztcbmV4cG9ydHMuREFUQUJBU0VfTk9UX0ZPVU5EID0gMTIyODtcbmV4cG9ydHMuR1JBUEhfTk9UX0ZPVU5EID0gMTkyNDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvZGVzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/arangojs/lib/codes.js\n");

/***/ }),

/***/ "./node_modules/arangojs/lib/error.js":
/*!********************************************!*\
  !*** ./node_modules/arangojs/lib/error.js ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Wrapper around the `es6-error` module.\n *\n * @packageDocumentation\n * @internal\n * @hidden\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ExtendableError = void 0;\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst Es6Error = __webpack_require__(/*! es6-error */ \"./node_modules/es6-error/es6/index.js\");\n/**\n * @internal\n * @hidden\n */\nexports.ExtendableError = Es6Error.default || Es6Error;\n//# sourceMappingURL=error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXJhbmdvanMvbGliL2Vycm9yLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCO0FBQ3ZCO0FBQ0EsaUJBQWlCLG1CQUFPLENBQUMsd0RBQVc7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2FyYW5nb2pzL2xpYi9lcnJvci5qcz8zYTQ4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBXcmFwcGVyIGFyb3VuZCB0aGUgYGVzNi1lcnJvcmAgbW9kdWxlLlxuICpcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQGludGVybmFsXG4gKiBAaGlkZGVuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRXh0ZW5kYWJsZUVycm9yID0gdm9pZCAwO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby12YXItcmVxdWlyZXNcbmNvbnN0IEVzNkVycm9yID0gcmVxdWlyZShcImVzNi1lcnJvclwiKTtcbi8qKlxuICogQGludGVybmFsXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydHMuRXh0ZW5kYWJsZUVycm9yID0gRXM2RXJyb3IuZGVmYXVsdCB8fCBFczZFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/arangojs/lib/error.js\n");

/***/ }),

/***/ "./node_modules/arangojs/lib/joinPath.web.js":
/*!***************************************************!*\
  !*** ./node_modules/arangojs/lib/joinPath.web.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Wrapper around the browser-specific implementation of the path module.\n *\n * @packageDocumentation\n * @internal\n * @hidden\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * @internal\n * @hidden\n */\nvar path_1 = __webpack_require__(/*! path */ \"./node_modules/next/dist/compiled/path-browserify/index.js\");\nObject.defineProperty(exports, \"joinPath\", ({ enumerable: true, get: function () { return path_1.join; } }));\n//# sourceMappingURL=joinPath.web.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXJhbmdvanMvbGliL2pvaW5QYXRoLndlYi5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxtQkFBTyxDQUFDLHdFQUFNO0FBQzNCLDRDQUEyQyxFQUFFLHFDQUFxQyx1QkFBdUIsRUFBQztBQUMxRyIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvYXJhbmdvanMvbGliL2pvaW5QYXRoLndlYi5qcz82NzU1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBXcmFwcGVyIGFyb3VuZCB0aGUgYnJvd3Nlci1zcGVjaWZpYyBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgcGF0aCBtb2R1bGUuXG4gKlxuICogQHBhY2thZ2VEb2N1bWVudGF0aW9uXG4gKiBAaW50ZXJuYWxcbiAqIEBoaWRkZW5cbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLyoqXG4gKiBAaW50ZXJuYWxcbiAqIEBoaWRkZW5cbiAqL1xudmFyIHBhdGhfMSA9IHJlcXVpcmUoXCJwYXRoXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiam9pblBhdGhcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBhdGhfMS5qb2luOyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9am9pblBhdGgud2ViLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/arangojs/lib/joinPath.web.js\n");

/***/ }),

/***/ "./node_modules/arangojs/lib/multipart.web.js":
/*!****************************************************!*\
  !*** ./node_modules/arangojs/lib/multipart.web.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\n/**\n * Utility function for constructing a multipart form in the browser.\n *\n * @packageDocumentation\n * @internal\n * @hidden\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.toForm = void 0;\n/**\n * @internal\n * @hidden\n */\nfunction toForm(fields, callback) {\n    let form;\n    try {\n        form = new FormData();\n        for (const key of Object.keys(fields)) {\n            let value = fields[key];\n            if (value === undefined)\n                continue;\n            if (!(value instanceof Blob) &&\n                (typeof value === \"object\" || typeof value === \"function\")) {\n                value = JSON.stringify(value);\n            }\n            form.append(key, value);\n        }\n    }\n    catch (e) {\n        callback(e);\n        return;\n    }\n    callback(null, { body: form });\n}\nexports.toForm = toForm;\n//# sourceMappingURL=multipart.web.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXJhbmdvanMvbGliL211bHRpcGFydC53ZWIuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixZQUFZO0FBQ2pDO0FBQ0EsY0FBYztBQUNkIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9hcmFuZ29qcy9saWIvbXVsdGlwYXJ0LndlYi5qcz9mYjljIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIGZvciBjb25zdHJ1Y3RpbmcgYSBtdWx0aXBhcnQgZm9ybSBpbiB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBpbnRlcm5hbFxuICogQGhpZGRlblxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnRvRm9ybSA9IHZvaWQgMDtcbi8qKlxuICogQGludGVybmFsXG4gKiBAaGlkZGVuXG4gKi9cbmZ1bmN0aW9uIHRvRm9ybShmaWVsZHMsIGNhbGxiYWNrKSB7XG4gICAgbGV0IGZvcm07XG4gICAgdHJ5IHtcbiAgICAgICAgZm9ybSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBPYmplY3Qua2V5cyhmaWVsZHMpKSB7XG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBmaWVsZHNba2V5XTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKCEodmFsdWUgaW5zdGFuY2VvZiBCbG9iKSAmJlxuICAgICAgICAgICAgICAgICh0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3JtLmFwcGVuZChrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICBjYWxsYmFjayhlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjYWxsYmFjayhudWxsLCB7IGJvZHk6IGZvcm0gfSk7XG59XG5leHBvcnRzLnRvRm9ybSA9IHRvRm9ybTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW11bHRpcGFydC53ZWIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/arangojs/lib/multipart.web.js\n");

/***/ }),

/***/ "./node_modules/arangojs/lib/normalizeUrl.js":
/*!***************************************************!*\
  !*** ./node_modules/arangojs/lib/normalizeUrl.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\n/**\n * Utility function for normalizing URLs.\n *\n * @packageDocumentation\n * @internal\n * @hidden\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.normalizeUrl = void 0;\n/**\n * @internal\n * @hidden\n */\nfunction normalizeUrl(url) {\n    const raw = url.match(/^(tcp|ssl|tls)((?::|\\+).+)/);\n    if (raw)\n        url = (raw[1] === \"tcp\" ? \"http\" : \"https\") + raw[2];\n    const unix = url.match(/^(?:(http|https)\\+)?unix:\\/\\/(\\/.+)/);\n    if (unix)\n        url = `${unix[1] || \"http\"}://unix:${unix[2]}`;\n    return url;\n}\nexports.normalizeUrl = normalizeUrl;\n//# sourceMappingURL=normalizeUrl.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXJhbmdvanMvbGliL25vcm1hbGl6ZVVybC5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixrQkFBa0IsVUFBVSxRQUFRO0FBQ3JEO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2FyYW5nb2pzL2xpYi9ub3JtYWxpemVVcmwuanM/Y2M5OSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3Igbm9ybWFsaXppbmcgVVJMcy5cbiAqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBpbnRlcm5hbFxuICogQGhpZGRlblxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm5vcm1hbGl6ZVVybCA9IHZvaWQgMDtcbi8qKlxuICogQGludGVybmFsXG4gKiBAaGlkZGVuXG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVVybCh1cmwpIHtcbiAgICBjb25zdCByYXcgPSB1cmwubWF0Y2goL14odGNwfHNzbHx0bHMpKCg/Ojp8XFwrKS4rKS8pO1xuICAgIGlmIChyYXcpXG4gICAgICAgIHVybCA9IChyYXdbMV0gPT09IFwidGNwXCIgPyBcImh0dHBcIiA6IFwiaHR0cHNcIikgKyByYXdbMl07XG4gICAgY29uc3QgdW5peCA9IHVybC5tYXRjaCgvXig/OihodHRwfGh0dHBzKVxcKyk/dW5peDpcXC9cXC8oXFwvLispLyk7XG4gICAgaWYgKHVuaXgpXG4gICAgICAgIHVybCA9IGAke3VuaXhbMV0gfHwgXCJodHRwXCJ9Oi8vdW5peDoke3VuaXhbMl19YDtcbiAgICByZXR1cm4gdXJsO1xufVxuZXhwb3J0cy5ub3JtYWxpemVVcmwgPSBub3JtYWxpemVVcmw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub3JtYWxpemVVcmwuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/arangojs/lib/normalizeUrl.js\n");

/***/ }),

/***/ "./node_modules/arangojs/lib/omit.js":
/*!*******************************************!*\
  !*** ./node_modules/arangojs/lib/omit.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\n/**\n * Utility function for omitting properties by key.\n *\n * @packageDocumentation\n * @internal\n * @hidden\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.omit = void 0;\n/**\n * @internal\n * @hidden\n */\nfunction omit(obj, keys) {\n    const result = {};\n    for (const key of Object.keys(obj)) {\n        if (keys.includes(key))\n            continue;\n        result[key] = obj[key];\n    }\n    return result;\n}\nexports.omit = omit;\n//# sourceMappingURL=omit.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXJhbmdvanMvbGliL29taXQuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2FyYW5nb2pzL2xpYi9vbWl0LmpzPzg5YTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKipcbiAqIFV0aWxpdHkgZnVuY3Rpb24gZm9yIG9taXR0aW5nIHByb3BlcnRpZXMgYnkga2V5LlxuICpcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQGludGVybmFsXG4gKiBAaGlkZGVuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMub21pdCA9IHZvaWQgMDtcbi8qKlxuICogQGludGVybmFsXG4gKiBAaGlkZGVuXG4gKi9cbmZ1bmN0aW9uIG9taXQob2JqLCBrZXlzKSB7XG4gICAgY29uc3QgcmVzdWx0ID0ge307XG4gICAgZm9yIChjb25zdCBrZXkgb2YgT2JqZWN0LmtleXMob2JqKSkge1xuICAgICAgICBpZiAoa2V5cy5pbmNsdWRlcyhrZXkpKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIHJlc3VsdFtrZXldID0gb2JqW2tleV07XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLm9taXQgPSBvbWl0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b21pdC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/arangojs/lib/omit.js\n");

/***/ }),

/***/ "./node_modules/arangojs/lib/request.web.js":
/*!**************************************************!*\
  !*** ./node_modules/arangojs/lib/request.web.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Node.js implementation of the HTTP(S) request function.\n *\n * @packageDocumentation\n * @internal\n * @hidden\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createRequest = exports.isBrowser = void 0;\nconst url_1 = __webpack_require__(/*! url */ \"./node_modules/next/dist/compiled/native-url/index.js\");\nconst btoa_1 = __webpack_require__(/*! ./btoa */ \"./node_modules/arangojs/lib/btoa.web.js\");\nconst joinPath_1 = __webpack_require__(/*! ./joinPath */ \"./node_modules/arangojs/lib/joinPath.web.js\");\nconst omit_1 = __webpack_require__(/*! ./omit */ \"./node_modules/arangojs/lib/omit.js\");\nconst xhr_1 = __webpack_require__(/*! ./xhr */ \"./node_modules/arangojs/lib/xhr.js\");\nexports.isBrowser = true;\n/**\n * Create a function for performing requests against a given host.\n *\n * @param baseUrl - Base URL of the host, i.e. protocol, port and domain name.\n * @param agentOptions - Options to use for performing requests.\n *\n * @param baseUrl\n * @param agentOptions\n *\n * @internal\n * @hidden\n */\nfunction createRequest(baseUrl, agentOptions) {\n    const { auth, ...baseUrlParts } = url_1.parse(baseUrl);\n    const options = omit_1.omit(agentOptions, [\"maxSockets\"]);\n    return function request({ method, url, headers, body, timeout, expectBinary }, cb) {\n        const urlParts = {\n            ...baseUrlParts,\n            pathname: url.pathname\n                ? baseUrlParts.pathname\n                    ? joinPath_1.joinPath(baseUrlParts.pathname, url.pathname)\n                    : url.pathname\n                : baseUrlParts.pathname,\n            search: url.search\n                ? baseUrlParts.search\n                    ? `${baseUrlParts.search}&${url.search.slice(1)}`\n                    : url.search\n                : baseUrlParts.search,\n        };\n        if (!headers[\"authorization\"]) {\n            headers[\"authorization\"] = `Basic ${btoa_1.btoa(auth || \"root:\")}`;\n        }\n        let callback = (err, res) => {\n            callback = () => undefined;\n            cb(err, res);\n        };\n        const req = xhr_1.default({\n            useXDR: true,\n            withCredentials: true,\n            ...options,\n            responseType: expectBinary ? \"blob\" : \"text\",\n            url: url_1.format(urlParts),\n            body,\n            method,\n            headers,\n            timeout,\n        }, (err, res) => {\n            if (!err) {\n                const response = res;\n                response.request = req;\n                if (!response.body)\n                    response.body = \"\";\n                if (options.after) {\n                    options.after(null, response);\n                }\n                callback(null, response);\n            }\n            else {\n                const error = err;\n                error.request = req;\n                if (options.after) {\n                    options.after(error);\n                }\n                callback(error);\n            }\n        });\n        if (options.before) {\n            options.before(req);\n        }\n    };\n}\nexports.createRequest = createRequest;\n//# sourceMappingURL=request.web.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXJhbmdvanMvbGliL3JlcXVlc3Qud2ViLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUJBQXFCLEdBQUcsaUJBQWlCO0FBQ3pDLGNBQWMsbUJBQU8sQ0FBQyxrRUFBSztBQUMzQixlQUFlLG1CQUFPLENBQUMsdURBQVE7QUFDL0IsbUJBQW1CLG1CQUFPLENBQUMsK0RBQVk7QUFDdkMsZUFBZSxtQkFBTyxDQUFDLG1EQUFRO0FBQy9CLGNBQWMsbUJBQU8sQ0FBQyxpREFBTztBQUM3QixpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHdCQUF3QjtBQUNwQztBQUNBLDhCQUE4QixtREFBbUQ7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLG9CQUFvQixHQUFHLG9CQUFvQjtBQUNwRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCw2QkFBNkI7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9hcmFuZ29qcy9saWIvcmVxdWVzdC53ZWIuanM/ZDI2MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogTm9kZS5qcyBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgSFRUUChTKSByZXF1ZXN0IGZ1bmN0aW9uLlxuICpcbiAqIEBwYWNrYWdlRG9jdW1lbnRhdGlvblxuICogQGludGVybmFsXG4gKiBAaGlkZGVuXG4gKi9cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlUmVxdWVzdCA9IGV4cG9ydHMuaXNCcm93c2VyID0gdm9pZCAwO1xuY29uc3QgdXJsXzEgPSByZXF1aXJlKFwidXJsXCIpO1xuY29uc3QgYnRvYV8xID0gcmVxdWlyZShcIi4vYnRvYVwiKTtcbmNvbnN0IGpvaW5QYXRoXzEgPSByZXF1aXJlKFwiLi9qb2luUGF0aFwiKTtcbmNvbnN0IG9taXRfMSA9IHJlcXVpcmUoXCIuL29taXRcIik7XG5jb25zdCB4aHJfMSA9IHJlcXVpcmUoXCIuL3hoclwiKTtcbmV4cG9ydHMuaXNCcm93c2VyID0gdHJ1ZTtcbi8qKlxuICogQ3JlYXRlIGEgZnVuY3Rpb24gZm9yIHBlcmZvcm1pbmcgcmVxdWVzdHMgYWdhaW5zdCBhIGdpdmVuIGhvc3QuXG4gKlxuICogQHBhcmFtIGJhc2VVcmwgLSBCYXNlIFVSTCBvZiB0aGUgaG9zdCwgaS5lLiBwcm90b2NvbCwgcG9ydCBhbmQgZG9tYWluIG5hbWUuXG4gKiBAcGFyYW0gYWdlbnRPcHRpb25zIC0gT3B0aW9ucyB0byB1c2UgZm9yIHBlcmZvcm1pbmcgcmVxdWVzdHMuXG4gKlxuICogQHBhcmFtIGJhc2VVcmxcbiAqIEBwYXJhbSBhZ2VudE9wdGlvbnNcbiAqXG4gKiBAaW50ZXJuYWxcbiAqIEBoaWRkZW5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlUmVxdWVzdChiYXNlVXJsLCBhZ2VudE9wdGlvbnMpIHtcbiAgICBjb25zdCB7IGF1dGgsIC4uLmJhc2VVcmxQYXJ0cyB9ID0gdXJsXzEucGFyc2UoYmFzZVVybCk7XG4gICAgY29uc3Qgb3B0aW9ucyA9IG9taXRfMS5vbWl0KGFnZW50T3B0aW9ucywgW1wibWF4U29ja2V0c1wiXSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIHJlcXVlc3QoeyBtZXRob2QsIHVybCwgaGVhZGVycywgYm9keSwgdGltZW91dCwgZXhwZWN0QmluYXJ5IH0sIGNiKSB7XG4gICAgICAgIGNvbnN0IHVybFBhcnRzID0ge1xuICAgICAgICAgICAgLi4uYmFzZVVybFBhcnRzLFxuICAgICAgICAgICAgcGF0aG5hbWU6IHVybC5wYXRobmFtZVxuICAgICAgICAgICAgICAgID8gYmFzZVVybFBhcnRzLnBhdGhuYW1lXG4gICAgICAgICAgICAgICAgICAgID8gam9pblBhdGhfMS5qb2luUGF0aChiYXNlVXJsUGFydHMucGF0aG5hbWUsIHVybC5wYXRobmFtZSlcbiAgICAgICAgICAgICAgICAgICAgOiB1cmwucGF0aG5hbWVcbiAgICAgICAgICAgICAgICA6IGJhc2VVcmxQYXJ0cy5wYXRobmFtZSxcbiAgICAgICAgICAgIHNlYXJjaDogdXJsLnNlYXJjaFxuICAgICAgICAgICAgICAgID8gYmFzZVVybFBhcnRzLnNlYXJjaFxuICAgICAgICAgICAgICAgICAgICA/IGAke2Jhc2VVcmxQYXJ0cy5zZWFyY2h9JiR7dXJsLnNlYXJjaC5zbGljZSgxKX1gXG4gICAgICAgICAgICAgICAgICAgIDogdXJsLnNlYXJjaFxuICAgICAgICAgICAgICAgIDogYmFzZVVybFBhcnRzLnNlYXJjaCxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKCFoZWFkZXJzW1wiYXV0aG9yaXphdGlvblwiXSkge1xuICAgICAgICAgICAgaGVhZGVyc1tcImF1dGhvcml6YXRpb25cIl0gPSBgQmFzaWMgJHtidG9hXzEuYnRvYShhdXRoIHx8IFwicm9vdDpcIil9YDtcbiAgICAgICAgfVxuICAgICAgICBsZXQgY2FsbGJhY2sgPSAoZXJyLCByZXMpID0+IHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gKCkgPT4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgY2IoZXJyLCByZXMpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXEgPSB4aHJfMS5kZWZhdWx0KHtcbiAgICAgICAgICAgIHVzZVhEUjogdHJ1ZSxcbiAgICAgICAgICAgIHdpdGhDcmVkZW50aWFsczogdHJ1ZSxcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICByZXNwb25zZVR5cGU6IGV4cGVjdEJpbmFyeSA/IFwiYmxvYlwiIDogXCJ0ZXh0XCIsXG4gICAgICAgICAgICB1cmw6IHVybF8xLmZvcm1hdCh1cmxQYXJ0cyksXG4gICAgICAgICAgICBib2R5LFxuICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgICAgaGVhZGVycyxcbiAgICAgICAgICAgIHRpbWVvdXQsXG4gICAgICAgIH0sIChlcnIsIHJlcykgPT4ge1xuICAgICAgICAgICAgaWYgKCFlcnIpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IHJlcztcbiAgICAgICAgICAgICAgICByZXNwb25zZS5yZXF1ZXN0ID0gcmVxO1xuICAgICAgICAgICAgICAgIGlmICghcmVzcG9uc2UuYm9keSlcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuYm9keSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuYWZ0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5hZnRlcihudWxsLCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gZXJyO1xuICAgICAgICAgICAgICAgIGVycm9yLnJlcXVlc3QgPSByZXE7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuYWZ0ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5hZnRlcihlcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChvcHRpb25zLmJlZm9yZSkge1xuICAgICAgICAgICAgb3B0aW9ucy5iZWZvcmUocmVxKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5leHBvcnRzLmNyZWF0ZVJlcXVlc3QgPSBjcmVhdGVSZXF1ZXN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVxdWVzdC53ZWIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/arangojs/lib/request.web.js\n");

/***/ }),

/***/ "./node_modules/arangojs/lib/xhr.js":
/*!******************************************!*\
  !*** ./node_modules/arangojs/lib/xhr.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/**\n * Wrapper around the `xhr` module for HTTP(S) requests in the browser.\n *\n * @packageDocumentation\n * @internal\n * @hidden\n */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n/**\n * @internal\n * @hidden\n */\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nexports[\"default\"] = __webpack_require__(/*! xhr */ \"./node_modules/xhr/index.js\");\n//# sourceMappingURL=xhr.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXJhbmdvanMvbGliL3hoci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRkFBZ0M7QUFDaEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2FyYW5nb2pzL2xpYi94aHIuanM/ZTNlYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qKlxuICogV3JhcHBlciBhcm91bmQgdGhlIGB4aHJgIG1vZHVsZSBmb3IgSFRUUChTKSByZXF1ZXN0cyBpbiB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAcGFja2FnZURvY3VtZW50YXRpb25cbiAqIEBpbnRlcm5hbFxuICogQGhpZGRlblxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vKipcbiAqIEBpbnRlcm5hbFxuICogQGhpZGRlblxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXZhci1yZXF1aXJlc1xuZXhwb3J0cy5kZWZhdWx0ID0gcmVxdWlyZShcInhoclwiKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXhoci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/arangojs/lib/xhr.js\n");

/***/ }),

/***/ "./node_modules/arangojs/route.js":
/*!****************************************!*\
  !*** ./node_modules/arangojs/route.js ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Route = void 0;\n/**\n * Represents an arbitrary route relative to an ArangoDB database.\n */\nclass Route {\n    /**\n     * @internal\n     * @hidden\n     */\n    constructor(db, path = \"\", headers = {}) {\n        if (!path)\n            path = \"\";\n        else if (path.charAt(0) !== \"/\")\n            path = `/${path}`;\n        this._db = db;\n        this._path = path;\n        this._headers = headers;\n    }\n    /**\n     * Creates a new route relative to this route that inherits any of its default\n     * HTTP headers.\n     *\n     * @param path - Path relative to this route.\n     * @param headers - Additional headers that will be sent with each request.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const foxx = db.route(\"/my-foxx-service\");\n     * const users = foxx.route(\"/users\");\n     * ```\n     */\n    route(path, headers) {\n        if (!path)\n            path = \"\";\n        else if (path.charAt(0) !== \"/\")\n            path = `/${path}`;\n        return new Route(this._db, this._path + path, {\n            ...this._headers,\n            ...headers,\n        });\n    }\n    /**\n     * Performs an arbitrary HTTP request relative to this route and returns the\n     * server response.\n     *\n     * @param options - Options for performing the request.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const foxx = db.route(\"/my-foxx-service\");\n     * const res = await foxx.request({\n     *   method: \"POST\",\n     *   path: \"/users\",\n     *   body: {\n     *     username: \"admin\",\n     *     password: \"hunter2\"\n     *   }\n     * });\n     * ```\n     */\n    request(options) {\n        const opts = { ...options };\n        if (!opts.path || opts.path === \"/\")\n            opts.path = \"\";\n        else if (!this._path || opts.path.charAt(0) === \"/\")\n            opts.path = opts.path;\n        else\n            opts.path = `/${opts.path}`;\n        opts.basePath = this._path;\n        opts.headers = { ...this._headers, ...opts.headers };\n        opts.method = opts.method ? opts.method.toUpperCase() : \"GET\";\n        return this._db.request(opts);\n    }\n    delete(...args) {\n        const path = typeof args[0] === \"string\" ? args.shift() : undefined;\n        const [qs, headers] = args;\n        return this.request({ method: \"DELETE\", path, qs, headers });\n    }\n    get(...args) {\n        const path = typeof args[0] === \"string\" ? args.shift() : undefined;\n        const [qs, headers] = args;\n        return this.request({ method: \"GET\", path, qs, headers });\n    }\n    head(...args) {\n        const path = typeof args[0] === \"string\" ? args.shift() : undefined;\n        const [qs, headers] = args;\n        return this.request({ method: \"HEAD\", path, qs, headers });\n    }\n    patch(...args) {\n        const path = typeof args[0] === \"string\" ? args.shift() : undefined;\n        const [body, qs, headers] = args;\n        return this.request({ method: \"PATCH\", path, body, qs, headers });\n    }\n    post(...args) {\n        const path = typeof args[0] === \"string\" ? args.shift() : undefined;\n        const [body, qs, headers] = args;\n        return this.request({ method: \"POST\", path, body, qs, headers });\n    }\n    put(...args) {\n        const path = typeof args[0] === \"string\" ? args.shift() : undefined;\n        const [body, qs, headers] = args;\n        return this.request({ method: \"PUT\", path, body, qs, headers });\n    }\n}\nexports.Route = Route;\n//# sourceMappingURL=route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYXJhbmdvanMvcm91dGUuanMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLEtBQUs7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsS0FBSztBQUM1QjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLFVBQVU7QUFDdEM7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLHFDQUFxQztBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixrQ0FBa0M7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsbUNBQW1DO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLDBDQUEwQztBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qix5Q0FBeUM7QUFDdkU7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsd0NBQXdDO0FBQ3RFO0FBQ0E7QUFDQSxhQUFhO0FBQ2IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL2FyYW5nb2pzL3JvdXRlLmpzP2YxMzEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlJvdXRlID0gdm9pZCAwO1xuLyoqXG4gKiBSZXByZXNlbnRzIGFuIGFyYml0cmFyeSByb3V0ZSByZWxhdGl2ZSB0byBhbiBBcmFuZ29EQiBkYXRhYmFzZS5cbiAqL1xuY2xhc3MgUm91dGUge1xuICAgIC8qKlxuICAgICAqIEBpbnRlcm5hbFxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihkYiwgcGF0aCA9IFwiXCIsIGhlYWRlcnMgPSB7fSkge1xuICAgICAgICBpZiAoIXBhdGgpXG4gICAgICAgICAgICBwYXRoID0gXCJcIjtcbiAgICAgICAgZWxzZSBpZiAocGF0aC5jaGFyQXQoMCkgIT09IFwiL1wiKVxuICAgICAgICAgICAgcGF0aCA9IGAvJHtwYXRofWA7XG4gICAgICAgIHRoaXMuX2RiID0gZGI7XG4gICAgICAgIHRoaXMuX3BhdGggPSBwYXRoO1xuICAgICAgICB0aGlzLl9oZWFkZXJzID0gaGVhZGVycztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyByb3V0ZSByZWxhdGl2ZSB0byB0aGlzIHJvdXRlIHRoYXQgaW5oZXJpdHMgYW55IG9mIGl0cyBkZWZhdWx0XG4gICAgICogSFRUUCBoZWFkZXJzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhdGggLSBQYXRoIHJlbGF0aXZlIHRvIHRoaXMgcm91dGUuXG4gICAgICogQHBhcmFtIGhlYWRlcnMgLSBBZGRpdGlvbmFsIGhlYWRlcnMgdGhhdCB3aWxsIGJlIHNlbnQgd2l0aCBlYWNoIHJlcXVlc3QuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGBgYGpzXG4gICAgICogY29uc3QgZGIgPSBuZXcgRGF0YWJhc2UoKTtcbiAgICAgKiBjb25zdCBmb3h4ID0gZGIucm91dGUoXCIvbXktZm94eC1zZXJ2aWNlXCIpO1xuICAgICAqIGNvbnN0IHVzZXJzID0gZm94eC5yb3V0ZShcIi91c2Vyc1wiKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICByb3V0ZShwYXRoLCBoZWFkZXJzKSB7XG4gICAgICAgIGlmICghcGF0aClcbiAgICAgICAgICAgIHBhdGggPSBcIlwiO1xuICAgICAgICBlbHNlIGlmIChwYXRoLmNoYXJBdCgwKSAhPT0gXCIvXCIpXG4gICAgICAgICAgICBwYXRoID0gYC8ke3BhdGh9YDtcbiAgICAgICAgcmV0dXJuIG5ldyBSb3V0ZSh0aGlzLl9kYiwgdGhpcy5fcGF0aCArIHBhdGgsIHtcbiAgICAgICAgICAgIC4uLnRoaXMuX2hlYWRlcnMsXG4gICAgICAgICAgICAuLi5oZWFkZXJzLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYW4gYXJiaXRyYXJ5IEhUVFAgcmVxdWVzdCByZWxhdGl2ZSB0byB0aGlzIHJvdXRlIGFuZCByZXR1cm5zIHRoZVxuICAgICAqIHNlcnZlciByZXNwb25zZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0gT3B0aW9ucyBmb3IgcGVyZm9ybWluZyB0aGUgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBganNcbiAgICAgKiBjb25zdCBkYiA9IG5ldyBEYXRhYmFzZSgpO1xuICAgICAqIGNvbnN0IGZveHggPSBkYi5yb3V0ZShcIi9teS1mb3h4LXNlcnZpY2VcIik7XG4gICAgICogY29uc3QgcmVzID0gYXdhaXQgZm94eC5yZXF1ZXN0KHtcbiAgICAgKiAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICogICBwYXRoOiBcIi91c2Vyc1wiLFxuICAgICAqICAgYm9keToge1xuICAgICAqICAgICB1c2VybmFtZTogXCJhZG1pblwiLFxuICAgICAqICAgICBwYXNzd29yZDogXCJodW50ZXIyXCJcbiAgICAgKiAgIH1cbiAgICAgKiB9KTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICByZXF1ZXN0KG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3Qgb3B0cyA9IHsgLi4ub3B0aW9ucyB9O1xuICAgICAgICBpZiAoIW9wdHMucGF0aCB8fCBvcHRzLnBhdGggPT09IFwiL1wiKVxuICAgICAgICAgICAgb3B0cy5wYXRoID0gXCJcIjtcbiAgICAgICAgZWxzZSBpZiAoIXRoaXMuX3BhdGggfHwgb3B0cy5wYXRoLmNoYXJBdCgwKSA9PT0gXCIvXCIpXG4gICAgICAgICAgICBvcHRzLnBhdGggPSBvcHRzLnBhdGg7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIG9wdHMucGF0aCA9IGAvJHtvcHRzLnBhdGh9YDtcbiAgICAgICAgb3B0cy5iYXNlUGF0aCA9IHRoaXMuX3BhdGg7XG4gICAgICAgIG9wdHMuaGVhZGVycyA9IHsgLi4udGhpcy5faGVhZGVycywgLi4ub3B0cy5oZWFkZXJzIH07XG4gICAgICAgIG9wdHMubWV0aG9kID0gb3B0cy5tZXRob2QgPyBvcHRzLm1ldGhvZC50b1VwcGVyQ2FzZSgpIDogXCJHRVRcIjtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RiLnJlcXVlc3Qob3B0cyk7XG4gICAgfVxuICAgIGRlbGV0ZSguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IHBhdGggPSB0eXBlb2YgYXJnc1swXSA9PT0gXCJzdHJpbmdcIiA/IGFyZ3Muc2hpZnQoKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3QgW3FzLCBoZWFkZXJzXSA9IGFyZ3M7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoeyBtZXRob2Q6IFwiREVMRVRFXCIsIHBhdGgsIHFzLCBoZWFkZXJzIH0pO1xuICAgIH1cbiAgICBnZXQoLi4uYXJncykge1xuICAgICAgICBjb25zdCBwYXRoID0gdHlwZW9mIGFyZ3NbMF0gPT09IFwic3RyaW5nXCIgPyBhcmdzLnNoaWZ0KCkgOiB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IFtxcywgaGVhZGVyc10gPSBhcmdzO1xuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHsgbWV0aG9kOiBcIkdFVFwiLCBwYXRoLCBxcywgaGVhZGVycyB9KTtcbiAgICB9XG4gICAgaGVhZCguLi5hcmdzKSB7XG4gICAgICAgIGNvbnN0IHBhdGggPSB0eXBlb2YgYXJnc1swXSA9PT0gXCJzdHJpbmdcIiA/IGFyZ3Muc2hpZnQoKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3QgW3FzLCBoZWFkZXJzXSA9IGFyZ3M7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3QoeyBtZXRob2Q6IFwiSEVBRFwiLCBwYXRoLCBxcywgaGVhZGVycyB9KTtcbiAgICB9XG4gICAgcGF0Y2goLi4uYXJncykge1xuICAgICAgICBjb25zdCBwYXRoID0gdHlwZW9mIGFyZ3NbMF0gPT09IFwic3RyaW5nXCIgPyBhcmdzLnNoaWZ0KCkgOiB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IFtib2R5LCBxcywgaGVhZGVyc10gPSBhcmdzO1xuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHsgbWV0aG9kOiBcIlBBVENIXCIsIHBhdGgsIGJvZHksIHFzLCBoZWFkZXJzIH0pO1xuICAgIH1cbiAgICBwb3N0KC4uLmFyZ3MpIHtcbiAgICAgICAgY29uc3QgcGF0aCA9IHR5cGVvZiBhcmdzWzBdID09PSBcInN0cmluZ1wiID8gYXJncy5zaGlmdCgpIDogdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBbYm9keSwgcXMsIGhlYWRlcnNdID0gYXJncztcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCh7IG1ldGhvZDogXCJQT1NUXCIsIHBhdGgsIGJvZHksIHFzLCBoZWFkZXJzIH0pO1xuICAgIH1cbiAgICBwdXQoLi4uYXJncykge1xuICAgICAgICBjb25zdCBwYXRoID0gdHlwZW9mIGFyZ3NbMF0gPT09IFwic3RyaW5nXCIgPyBhcmdzLnNoaWZ0KCkgOiB1bmRlZmluZWQ7XG4gICAgICAgIGNvbnN0IFtib2R5LCBxcywgaGVhZGVyc10gPSBhcmdzO1xuICAgICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KHsgbWV0aG9kOiBcIlBVVFwiLCBwYXRoLCBib2R5LCBxcywgaGVhZGVycyB9KTtcbiAgICB9XG59XG5leHBvcnRzLlJvdXRlID0gUm91dGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/arangojs/route.js\n");

/***/ }),

/***/ "./node_modules/arangojs/transaction.js":
/*!**********************************************!*\
  !*** ./node_modules/arangojs/transaction.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Transaction = exports.isArangoTransaction = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"./node_modules/arangojs/error.js\");\nconst codes_1 = __webpack_require__(/*! ./lib/codes */ \"./node_modules/arangojs/lib/codes.js\");\n/**\n * Indicates whether the given value represents a {@link Transaction}.\n *\n * @param transaction - A value that might be a transaction.\n */\nfunction isArangoTransaction(transaction) {\n    return Boolean(transaction && transaction.isArangoTransaction);\n}\nexports.isArangoTransaction = isArangoTransaction;\n/**\n * Represents a streaming transaction in a {@link Database}.\n */\nclass Transaction {\n    /**\n     * @internal\n     * @hidden\n     */\n    constructor(db, id) {\n        this._db = db;\n        this._id = id;\n    }\n    /**\n     * @internal\n     *\n     * Indicates that this object represents an ArangoDB transaction.\n     */\n    get isArangoTransaction() {\n        return true;\n    }\n    /**\n     * Unique identifier of this transaction.\n     *\n     * See {@link Database.transaction}.\n     */\n    get id() {\n        return this._id;\n    }\n    /**\n     * Checks whether the transaction exists.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const trx = db.transaction(\"some-transaction\");\n     * const result = await trx.exists();\n     * // result indicates whether the transaction exists\n     * ```\n     */\n    async exists() {\n        try {\n            await this.get();\n            return true;\n        }\n        catch (err) {\n            if (error_1.isArangoError(err) && err.errorNum === codes_1.TRANSACTION_NOT_FOUND) {\n                return false;\n            }\n            throw err;\n        }\n    }\n    /**\n     * Retrieves general information about the transaction.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const col = db.collection(\"some-collection\");\n     * const trx = db.beginTransaction(col);\n     * await trx.step(() => col.save({ hello: \"world\" }));\n     * const info = await trx.get();\n     * // the transaction exists\n     * ```\n     */\n    get() {\n        return this._db.request({\n            path: `/_api/transaction/${encodeURIComponent(this.id)}`,\n        }, (res) => res.body.result);\n    }\n    /**\n     * Attempts to commit the transaction to the databases.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const col = db.collection(\"some-collection\");\n     * const trx = db.beginTransaction(col);\n     * await trx.step(() => col.save({ hello: \"world\" }));\n     * const result = await trx.commit();\n     * // result indicates the updated transaction status\n     * ```\n     */\n    commit() {\n        return this._db.request({\n            method: \"PUT\",\n            path: `/_api/transaction/${encodeURIComponent(this.id)}`,\n        }, (res) => res.body.result);\n    }\n    /**\n     * Attempts to abort the transaction to the databases.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const col = db.collection(\"some-collection\");\n     * const trx = db.beginTransaction(col);\n     * await trx.step(() => col.save({ hello: \"world\" }));\n     * const result = await trx.abort();\n     * // result indicates the updated transaction status\n     * ```\n     */\n    abort() {\n        return this._db.request({\n            method: \"DELETE\",\n            path: `/_api/transaction/${encodeURIComponent(this.id)}`,\n        }, (res) => res.body.result);\n    }\n    /**\n     * Executes the given function locally as a single step of the transaction.\n     *\n     * @param T - Type of the callback's returned promise.\n     * @param callback - Callback function returning a promise.\n     *\n     * **Warning**: The callback function should wrap a single call of an async\n     * arangojs method (e.g. a method on a `Collection` object of a collection\n     * that is involved in the transaction or the `db.query` method).\n     * If the callback function is async, only the first promise-returning (or\n     * async) method call will be executed as part of the transaction. See the\n     * examples below for how to avoid common mistakes when using this method.\n     *\n     * **Note**: Avoid defining the callback as an async function if possible\n     * as arangojs will throw an error if the callback did not return a promise.\n     * Async functions will return an empty promise by default, making it harder\n     * to notice if you forgot to return something from the callback.\n     *\n     * **Note**: Although almost anything can be wrapped in a callback and passed\n     * to this method, that does not guarantee ArangoDB can actually do it in a\n     * transaction. Refer to the ArangoDB documentation if you are unsure whether\n     * a given operation can be executed as part of a transaction. Generally any\n     * modification or retrieval of data is eligible but modifications of\n     * collections or databases are not.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const vertices = db.collection(\"vertices\");\n     * const edges = db.collection(\"edges\");\n     * const trx = await db.beginTransaction({ write: [vertices, edges] });\n     *\n     * // The following code will be part of the transaction\n     * const left = await trx.step(() => vertices.save({ label: \"left\" }));\n     * const right = await trx.step(() => vertices.save({ label: \"right\" }));\n     *\n     * // Results from preceding actions can be used normally\n     * await trx.step(() => edges.save({\n     *   _from: left._id,\n     *   _to: right._id,\n     *   data: \"potato\"\n     * }));\n     *\n     * // Transaction must be committed for changes to take effected\n     * // Always call either trx.commit or trx.abort to end a transaction\n     * await trx.commit();\n     * ```\n     *\n     * @example\n     * ```js\n     * // BAD! If the callback is an async function it must only use await once!\n     * await trx.step(async () => {\n     *   await collection.save(data);\n     *   await collection.save(moreData); // WRONG\n     * });\n     *\n     * // BAD! Callback function must use only one arangojs call!\n     * await trx.step(() => {\n     *  return collection.save(data)\n     *    .then(() => collection.save(moreData)); // WRONG\n     * });\n     *\n     * // BETTER: Wrap every arangojs method call that should be part of the\n     * // transaction in a separate `trx.step` call\n     * await trx.step(() => collection.save(data));\n     * await trx.step(() => collection.save(moreData));\n     * ```\n     *\n     * @example\n     * ```js\n     * // BAD! If the callback is an async function it must not await before\n     * // calling an arangojs method!\n     * await trx.step(async () => {\n     *   await doSomethingElse();\n     *   return collection.save(data); // WRONG\n     * });\n     *\n     * // BAD! Any arangojs inside the callback must not happen inside a promise\n     * // method!\n     * await trx.step(() => {\n     *   return doSomethingElse()\n     *     .then(() => collection.save(data)); // WRONG\n     * });\n     *\n     * // BETTER: Perform any async logic needed outside the `trx.step` call\n     * await doSomethingElse();\n     * await trx.step(() => collection.save(data));\n     *\n     * // OKAY: You can perform async logic in the callback after the arangojs\n     * // method call as long as it does not involve additional arangojs method\n     * // calls, but this makes it easy to make mistakes later\n     * await trx.step(async () => {\n     *   await collection.save(data);\n     *   await doSomethingDifferent(); // no arangojs method calls allowed\n     * });\n     * ```\n     *\n     * @example\n     * ```js\n     * // BAD! The callback should not use any functions that themselves use any\n     * // arangojs methods!\n     * async function saveSomeData() {\n     *   await collection.save(data);\n     *   await collection.save(moreData);\n     * }\n     * await trx.step(() => saveSomeData()); // WRONG\n     *\n     * // BETTER: Pass the transaction to functions that need to call arangojs\n     * // methods inside a transaction\n     * async function saveSomeData(trx) {\n     *   await trx.step(() => collection.save(data));\n     *   await trx.step(() => collection.save(moreData));\n     * }\n     * await saveSomeData(); // no `trx.step` call needed\n     * ```\n     *\n     * @example\n     * ```js\n     * // BAD! You must wait for the promise to resolve (or await on the\n     * // `trx.step` call) before calling `trx.step` again!\n     * trx.step(() => collection.save(data)); // WRONG\n     * await trx.step(() => collection.save(moreData));\n     *\n     * // BAD! The trx.step callback can not make multiple calls to async arangojs\n     * // methods, not even using Promise.all!\n     * await trx.step(() => Promise.all([ // WRONG\n     *   collection.save(data),\n     *   collection.save(moreData),\n     * ]));\n     *\n     * // BAD! Multiple `trx.step` calls can not run in parallel!\n     * await Promise.all([ // WRONG\n     *   trx.step(() => collection.save(data)),\n     *   trx.step(() => collection.save(moreData)),\n     * ]));\n     *\n     * // BETTER: Always call `trx.step` sequentially, one after the other\n     * await trx.step(() => collection.save(data));\n     * await trx.step(() => collection.save(moreData));\n     *\n     * // OKAY: The then callback can be used if async/await is not available\n     * trx.step(() => collection.save(data))\n     *   .then(() => trx.step(() => collection.save(moreData)));\n     * ```\n     *\n     * @example\n     * ```js\n     * // BAD! The callback will return an empty promise that resolves before\n     * // the inner arangojs method call has even talked to ArangoDB!\n     * await trx.step(async () => {\n     *   collection.save(data); // WRONG\n     * });\n     *\n     * // BETTER: Use an arrow function so you don't forget to return\n     * await trx.step(() => collection.save(data));\n     *\n     * // OKAY: Remember to always return when using a function body\n     * await trx.step(() => {\n     *   return collection.save(data); // easy to forget!\n     * });\n     *\n     * // OKAY: You do not have to use arrow functions but it helps\n     * await trx.step(function () {\n     *   return collection.save(data);\n     * });\n     * ```\n     *\n     * @example\n     * ```js\n     * // BAD! You can not pass promises instead of a callback!\n     * await trx.step(collection.save(data)); // WRONG\n     *\n     * // BETTER: Wrap the code in a function and pass the function instead\n     * await trx.step(() => collection.save(data));\n     * ```\n     *\n     * @example\n     * ```js\n     * // WORSE: Calls to non-async arangojs methods don't need to be performed\n     * // as part of a transaction\n     * const collection = await trx.step(() => db.collection(\"my-documents\"));\n     *\n     * // BETTER: If an arangojs method is not async and doesn't return promises,\n     * // call it without `trx.step`\n     * const collection = db.collection(\"my-documents\");\n     * ```\n     */\n    step(callback) {\n        const conn = this._db._connection;\n        conn.setTransactionId(this.id);\n        try {\n            const promise = callback();\n            if (!promise) {\n                throw new Error(\"Transaction callback was not an async function or did not return a promise!\");\n            }\n            return Promise.resolve(promise);\n        }\n        finally {\n            conn.clearTransactionId();\n        }\n    }\n}\nexports.Transaction = Transaction;\n//# sourceMappingURL=transaction.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/arangojs/transaction.js\n");

/***/ }),

/***/ "./node_modules/arangojs/view.js":
/*!***************************************!*\
  !*** ./node_modules/arangojs/view.js ***!
  \***************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.View = exports.isArangoView = exports.ViewType = void 0;\nconst error_1 = __webpack_require__(/*! ./error */ \"./node_modules/arangojs/error.js\");\nconst codes_1 = __webpack_require__(/*! ./lib/codes */ \"./node_modules/arangojs/lib/codes.js\");\n/**\n * String values indicating the View type.\n */\nvar ViewType;\n(function (ViewType) {\n    ViewType[\"ARANGOSEARCH_VIEW\"] = \"arangosearch\";\n})(ViewType = exports.ViewType || (exports.ViewType = {}));\n/**\n * Indicates whether the given value represents a {@link View}.\n *\n * @param view - A value that might be a View.\n */\nfunction isArangoView(view) {\n    return Boolean(view && view.isArangoView);\n}\nexports.isArangoView = isArangoView;\n/**\n * Represents a View in a {@link Database}.\n *\n * See {@link ArangoSearchView} for the concrete type representing an\n * ArangoSearch View.\n */\nclass View {\n    /**\n     * @internal\n     * @hidden\n     */\n    constructor(db, name) {\n        this._db = db;\n        this._name = name.normalize(\"NFC\");\n    }\n    /**\n     * @internal\n     *\n     * Indicates that this object represents an ArangoDB View.\n     */\n    get isArangoView() {\n        return true;\n    }\n    /**\n     * Name of the View.\n     */\n    get name() {\n        return this._name;\n    }\n    /**\n     * Retrieves general information about the View.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const view = db.view(\"some-view\");\n     * const data = await view.get();\n     * // data contains general information about the View\n     * ```\n     */\n    get() {\n        return this._db.request({ path: `/_api/view/${encodeURIComponent(this._name)}` }, (res) => res.body);\n    }\n    /**\n     * Checks whether the View exists.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const view = db.view(\"some-view\");\n     * const exists = await view.exists();\n     * console.log(exists); // indicates whether the View exists\n     * ```\n     */\n    async exists() {\n        try {\n            await this.get();\n            return true;\n        }\n        catch (err) {\n            if (error_1.isArangoError(err) && err.errorNum === codes_1.VIEW_NOT_FOUND) {\n                return false;\n            }\n            throw err;\n        }\n    }\n    /**\n     * Creates a View with the given `options` and the instance's name.\n     *\n     * See also {@link Database.createView}.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const view = db.view(\"potatoes\");\n     * await view.create();\n     * // the ArangoSearch View \"potatoes\" now exists\n     * ```\n     */\n    create(options) {\n        return this._db.request({\n            method: \"POST\",\n            path: \"/_api/view\",\n            body: {\n                type: ViewType.ARANGOSEARCH_VIEW,\n                ...(options || {}),\n                name: this._name,\n            },\n        }, (res) => res.body);\n    }\n    /**\n     * Renames the View and updates the instance's `name` to `newName`.\n     *\n     * Additionally removes the instance from the {@link Database}'s internal\n     * cache.\n     *\n     * **Note**: Renaming Views may not be supported when ArangoDB is\n     * running in a cluster configuration.\n     *\n     * @param newName - The new name of the View.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const view1 = db.view(\"some-view\");\n     * await view1.rename(\"other-view\");\n     * const view2 = db.view(\"some-view\");\n     * const view3 = db.view(\"other-view\");\n     * // Note all three View instances are different objects but\n     * // view1 and view3 represent the same ArangoDB view!\n     * ```\n     */\n    async rename(newName) {\n        const result = this._db.renameView(this._name, newName);\n        this._name = newName.normalize(\"NFC\");\n        return result;\n    }\n    /**\n     * Retrieves the View's properties.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const view = db.view(\"some-view\");\n     * const data = await view.properties();\n     * // data contains the View's properties\n     * ```\n     */\n    properties() {\n        return this._db.request({ path: `/_api/view/${encodeURIComponent(this._name)}/properties` }, (res) => res.body);\n    }\n    /**\n     * Updates the properties of the View.\n     *\n     * @param properties - Properties of the View to update.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const view = db.view(\"some-view\");\n     * const result = await view.updateProperties({\n     *   consolidationIntervalMsec: 234\n     * });\n     * console.log(result.consolidationIntervalMsec); // 234\n     * ```\n     */\n    updateProperties(properties) {\n        return this._db.request({\n            method: \"PATCH\",\n            path: `/_api/view/${encodeURIComponent(this._name)}/properties`,\n            body: properties || {},\n        }, (res) => res.body);\n    }\n    /**\n     * Replaces the properties of the View.\n     *\n     * @param properties - New properties of the View.\n     *\n     * @example\n     * ```js\n     * const db = new Database();\n     * const view = db.view(\"some-view\");\n     * const result = await view.replaceProperties({\n     *   consolidationIntervalMsec: 234\n     * });\n     * console.log(result.consolidationIntervalMsec); // 234\n     * ```\n     */\n    replaceProperties(properties) {\n        return this._db.request({\n            method: \"PUT\",\n            path: `/_api/view/${encodeURIComponent(this._name)}/properties`,\n            body: properties || {},\n        }, (res) => res.body);\n    }\n    /**\n     * Deletes the View from the database.\n     *\n     * @example\n     *\n     * ```js\n     * const db = new Database();\n     * const view = db.view(\"some-view\");\n     * await view.drop();\n     * // the View \"some-view\" no longer exists\n     * ```\n     */\n    drop() {\n        return this._db.request({\n            method: \"DELETE\",\n            path: `/_api/view/${encodeURIComponent(this._name)}`,\n        }, (res) => res.body.result);\n    }\n}\nexports.View = View;\n//# sourceMappingURL=view.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/arangojs/view.js\n");

/***/ }),

/***/ "./node_modules/es6-error/es6/index.js":
/*!*********************************************!*\
  !*** ./node_modules/es6-error/es6/index.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _extendableBuiltin(cls) {\n  function ExtendableBuiltin() {\n    cls.apply(this, arguments);\n  }\n\n  ExtendableBuiltin.prototype = Object.create(cls.prototype, {\n    constructor: {\n      value: cls,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n\n  if (Object.setPrototypeOf) {\n    Object.setPrototypeOf(ExtendableBuiltin, cls);\n  } else {\n    ExtendableBuiltin.__proto__ = cls;\n  }\n\n  return ExtendableBuiltin;\n}\n\nvar ExtendableError = function (_extendableBuiltin2) {\n  _inherits(ExtendableError, _extendableBuiltin2);\n\n  function ExtendableError() {\n    var message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n    _classCallCheck(this, ExtendableError);\n\n    // extending Error is weird and does not propagate `message`\n    var _this = _possibleConstructorReturn(this, (ExtendableError.__proto__ || Object.getPrototypeOf(ExtendableError)).call(this, message));\n\n    Object.defineProperty(_this, 'message', {\n      configurable: true,\n      enumerable: false,\n      value: message,\n      writable: true\n    });\n\n    Object.defineProperty(_this, 'name', {\n      configurable: true,\n      enumerable: false,\n      value: _this.constructor.name,\n      writable: true\n    });\n\n    if (Error.hasOwnProperty('captureStackTrace')) {\n      Error.captureStackTrace(_this, _this.constructor);\n      return _possibleConstructorReturn(_this);\n    }\n\n    Object.defineProperty(_this, 'stack', {\n      configurable: true,\n      enumerable: false,\n      value: new Error(message).stack,\n      writable: true\n    });\n    return _this;\n  }\n\n  return ExtendableError;\n}(_extendableBuiltin(Error));\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (ExtendableError);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXM2LWVycm9yL2VzNi9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsa0RBQWtELDBDQUEwQzs7QUFFNUYsa0RBQWtELGFBQWEseUZBQXlGOztBQUV4SiwyQ0FBMkMsK0RBQStELHVHQUF1Ryx5RUFBeUUsZUFBZSwwRUFBMEUsR0FBRzs7QUFFdFg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQsK0RBQWUsZUFBZSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9lczYtZXJyb3IvZXM2L2luZGV4LmpzPzRhNTAiXSwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kYWJsZUJ1aWx0aW4oY2xzKSB7XG4gIGZ1bmN0aW9uIEV4dGVuZGFibGVCdWlsdGluKCkge1xuICAgIGNscy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG5cbiAgRXh0ZW5kYWJsZUJ1aWx0aW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShjbHMucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBjbHMsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfVxuICB9KTtcblxuICBpZiAoT2JqZWN0LnNldFByb3RvdHlwZU9mKSB7XG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKEV4dGVuZGFibGVCdWlsdGluLCBjbHMpO1xuICB9IGVsc2Uge1xuICAgIEV4dGVuZGFibGVCdWlsdGluLl9fcHJvdG9fXyA9IGNscztcbiAgfVxuXG4gIHJldHVybiBFeHRlbmRhYmxlQnVpbHRpbjtcbn1cblxudmFyIEV4dGVuZGFibGVFcnJvciA9IGZ1bmN0aW9uIChfZXh0ZW5kYWJsZUJ1aWx0aW4yKSB7XG4gIF9pbmhlcml0cyhFeHRlbmRhYmxlRXJyb3IsIF9leHRlbmRhYmxlQnVpbHRpbjIpO1xuXG4gIGZ1bmN0aW9uIEV4dGVuZGFibGVFcnJvcigpIHtcbiAgICB2YXIgbWVzc2FnZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJyc7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRXh0ZW5kYWJsZUVycm9yKTtcblxuICAgIC8vIGV4dGVuZGluZyBFcnJvciBpcyB3ZWlyZCBhbmQgZG9lcyBub3QgcHJvcGFnYXRlIGBtZXNzYWdlYFxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChFeHRlbmRhYmxlRXJyb3IuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihFeHRlbmRhYmxlRXJyb3IpKS5jYWxsKHRoaXMsIG1lc3NhZ2UpKTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpcywgJ21lc3NhZ2UnLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHZhbHVlOiBtZXNzYWdlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShfdGhpcywgJ25hbWUnLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHZhbHVlOiBfdGhpcy5jb25zdHJ1Y3Rvci5uYW1lLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcblxuICAgIGlmIChFcnJvci5oYXNPd25Qcm9wZXJ0eSgnY2FwdHVyZVN0YWNrVHJhY2UnKSkge1xuICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UoX3RoaXMsIF90aGlzLmNvbnN0cnVjdG9yKTtcbiAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcyk7XG4gICAgfVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KF90aGlzLCAnc3RhY2snLCB7XG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHZhbHVlOiBuZXcgRXJyb3IobWVzc2FnZSkuc3RhY2ssXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHJldHVybiBFeHRlbmRhYmxlRXJyb3I7XG59KF9leHRlbmRhYmxlQnVpbHRpbihFcnJvcikpO1xuXG5leHBvcnQgZGVmYXVsdCBFeHRlbmRhYmxlRXJyb3I7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/es6-error/es6/index.js\n");

/***/ }),

/***/ "./node_modules/global/window.js":
/*!***************************************!*\
  !*** ./node_modules/global/window.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("var win;\n\nif (typeof window !== \"undefined\") {\n    win = window;\n} else if (typeof __webpack_require__.g !== \"undefined\") {\n    win = __webpack_require__.g;\n} else if (typeof self !== \"undefined\"){\n    win = self;\n} else {\n    win = {};\n}\n\nmodule.exports = win;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZ2xvYmFsL3dpbmRvdy5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRSxnQkFBZ0IscUJBQU07QUFDeEIsVUFBVSxxQkFBTTtBQUNoQixFQUFFO0FBQ0Y7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvZ2xvYmFsL3dpbmRvdy5qcz81NjYxIl0sInNvdXJjZXNDb250ZW50IjpbInZhciB3aW47XG5cbmlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgd2luID0gd2luZG93O1xufSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgd2luID0gZ2xvYmFsO1xufSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIil7XG4gICAgd2luID0gc2VsZjtcbn0gZWxzZSB7XG4gICAgd2luID0ge307XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2luO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/global/window.js\n");

/***/ }),

/***/ "./node_modules/is-function/index.js":
/*!*******************************************!*\
  !*** ./node_modules/is-function/index.js ***!
  \*******************************************/
/***/ (function(module) {

eval("module.exports = isFunction\n\nvar toString = Object.prototype.toString\n\nfunction isFunction (fn) {\n  if (!fn) {\n    return false\n  }\n  var string = toString.call(fn)\n  return string === '[object Function]' ||\n    (typeof fn === 'function' && string !== '[object RegExp]') ||\n    (typeof window !== 'undefined' &&\n     // IE8 and below\n     (fn === window.setTimeout ||\n      fn === window.alert ||\n      fn === window.confirm ||\n      fn === window.prompt))\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvaXMtZnVuY3Rpb24vaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvaXMtZnVuY3Rpb24vaW5kZXguanM/MTgxNCJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IGlzRnVuY3Rpb25cblxudmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ1xuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uIChmbikge1xuICBpZiAoIWZuKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdmFyIHN0cmluZyA9IHRvU3RyaW5nLmNhbGwoZm4pXG4gIHJldHVybiBzdHJpbmcgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXScgfHxcbiAgICAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nICYmIHN0cmluZyAhPT0gJ1tvYmplY3QgUmVnRXhwXScpIHx8XG4gICAgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gICAgIC8vIElFOCBhbmQgYmVsb3dcbiAgICAgKGZuID09PSB3aW5kb3cuc2V0VGltZW91dCB8fFxuICAgICAgZm4gPT09IHdpbmRvdy5hbGVydCB8fFxuICAgICAgZm4gPT09IHdpbmRvdy5jb25maXJtIHx8XG4gICAgICBmbiA9PT0gd2luZG93LnByb21wdCkpXG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/is-function/index.js\n");

/***/ }),

/***/ "./lib/arangoDb.js":
/*!*************************!*\
  !*** ./lib/arangoDb.js ***!
  \*************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"allOutlet\": function() { return /* binding */ allOutlet; },\n/* harmony export */   \"checkUid\": function() { return /* binding */ checkUid; }\n/* harmony export */ });\n/* harmony import */ var G_SKI_Dashboard_node_modules_next_dist_compiled_regenerator_runtime_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/next/dist/compiled/regenerator-runtime/runtime.js */ \"./node_modules/next/dist/compiled/regenerator-runtime/runtime.js\");\n/* harmony import */ var G_SKI_Dashboard_node_modules_next_dist_compiled_regenerator_runtime_runtime_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(G_SKI_Dashboard_node_modules_next_dist_compiled_regenerator_runtime_runtime_js__WEBPACK_IMPORTED_MODULE_0__);\nfunction _asyncIterator(iterable) {\n    var method;\n    if (typeof Symbol === \"function\") {\n        if (Symbol.asyncIterator) {\n            method = iterable[Symbol.asyncIterator];\n            if (method != null) return method.call(iterable);\n        }\n        if (Symbol.iterator) {\n            method = iterable[Symbol.iterator];\n            if (method != null) return method.call(iterable);\n        }\n    }\n    throw new TypeError(\"Object is not async iterable\");\n}\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n    try {\n        var info = gen[key](arg);\n        var value = info.value;\n    } catch (error) {\n        reject(error);\n        return;\n    }\n    if (info.done) {\n        resolve(value);\n    } else {\n        Promise.resolve(value).then(_next, _throw);\n    }\n}\nfunction _asyncToGenerator(fn) {\n    return function() {\n        var self = this, args = arguments;\n        return new Promise(function(resolve, reject) {\n            var gen = fn.apply(self, args);\n            function _next(value) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n            }\n            function _throw(err) {\n                asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n            }\n            _next(undefined);\n        });\n    };\n}\nfunction _taggedTemplateLiteral(strings, raw) {\n    if (!raw) {\n        raw = strings.slice(0);\n    }\n    return Object.freeze(Object.defineProperties(strings, {\n        raw: {\n            value: Object.freeze(raw)\n        }\n    }));\n}\n\nfunction _templateObject() {\n    var data = _taggedTemplateLiteral([\n        \"\\n    FOR u IN user_ski\\n      FILTER u._key == \",\n        \"\\n    RETURN u\\n  \"\n    ]);\n    _templateObject = function _templateObject() {\n        return data;\n    };\n    return data;\n}\nfunction _templateObject1() {\n    var data = _taggedTemplateLiteral([\n        '\\n    for i in outlet\\nlet orders = (\\nfor j in order\\nfilter i._key == j.outlet.key and j.status == \"1758745\"\\ncollect with count into a\\nreturn a\\n)\\nlet products = (\\nfor k in product\\nfilter k.outlet == i._key\\ncollect with count into b\\nreturn b\\n)\\nlet sub_categories = (\\nfor l in sub_category\\nfilter l.outlet == i._key\\ncollect with count into c\\nreturn c\\n)\\nreturn \\n{\\n    \"key\" : i._key,\\n    \"name\" : i.name,\\n    \"pict\" : i.pict,\\n    \"description\" : i.description,\\n    \"orders\" : orders[0],\\n    \"products\" : products[0],\\n    \"sub_categories\" : sub_categories[0],\\n    \"active\" : i.active,\\n    \"created_at\" : i.created_at\\n}\\n  '\n    ]);\n    _templateObject1 = function _templateObject1() {\n        return data;\n    };\n    return data;\n}\nvar ref = __webpack_require__(/*! arangojs */ \"./node_modules/arangojs/index.js\"), Database = ref.Database, aql = ref.aql;\nvar getConnection = function() {\n    return new Database({\n        url: \"http://192.168.254.197:8529/\",\n        databaseName: \"SKI\",\n        auth: {\n            username: \"ski\",\n            password: \"ski12345\"\n        }\n    });\n};\nvar getCollection = function() {\n    var _ref = _asyncToGenerator(G_SKI_Dashboard_node_modules_next_dist_compiled_regenerator_runtime_runtime_js__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee(cName, db) {\n        var collections;\n        return G_SKI_Dashboard_node_modules_next_dist_compiled_regenerator_runtime_runtime_js__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee$(_ctx) {\n            while(1)switch(_ctx.prev = _ctx.next){\n                case 0:\n                    _ctx.next = 2;\n                    return db.collections();\n                case 2:\n                    collections = _ctx.sent;\n                    if (!collections.find(function(c) {\n                        return c._name === cName;\n                    })) {\n                        _ctx.next = 9;\n                        break;\n                    }\n                    _ctx.next = 6;\n                    return db.collection(cName);\n                case 6:\n                    return _ctx.abrupt(\"return\", _ctx.sent);\n                case 9:\n                    return _ctx.abrupt(\"return\", db.createCollection(cName));\n                case 10:\n                case \"end\":\n                    return _ctx.stop();\n            }\n        }, _callee);\n    }));\n    return function getCollection(cName, db) {\n        return _ref.apply(this, arguments);\n    };\n}();\n// export const findMerchant = async (kex) => {\n//   const db = getConnection();\n//   await getCollection(\"merchant\", db);\n//   let result = [];\n//   const resx = await db.query(aql`\n//     FOR u IN merchant\n//       FILTER u.owner == ${kex}\n//     RETURN u\n//   `);\n//   for await (let config of resx) {\n//     result.push(config);\n//   }\n//   return result;\n// };\n// export const taggingList = async () => {\n//   const db = getConnection();\n//   await getCollection(\"tag\", db);\n//   let result = [];\n//   const resx = await db.query(aql`\n//     FOR u IN tag\n//     RETURN {name: u.name, _key: u._key}\n//   `);\n//   for await (let config of resx) {\n//     result.push(config);\n//   }\n//   return result;\n// };\n// export const businessTypeList = async () => {\n//   const db = getConnection();\n//   await getCollection(\"user_alamerchant\", db);\n//   let result = [];\n//   const resx = await db.query(aql`\n//     FOR u IN global\n//       FILTER u.type == \"business_type\"\n//     RETURN u\n//   `);\n//   for await (let config of resx) {\n//     result.push(config);\n//   }\n//   return result;\n// };\nvar checkUid = function() {\n    var _ref = _asyncToGenerator(G_SKI_Dashboard_node_modules_next_dist_compiled_regenerator_runtime_runtime_js__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee(uid) {\n        var db, result, resx, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, config;\n        return G_SKI_Dashboard_node_modules_next_dist_compiled_regenerator_runtime_runtime_js__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee$(_ctx) {\n            while(1)switch(_ctx.prev = _ctx.next){\n                case 0:\n                    db = getConnection();\n                    _ctx.next = 3;\n                    return getCollection(\"user_ski\", db);\n                case 3:\n                    result = [];\n                    _ctx.next = 6;\n                    return db.query(aql(_templateObject(), uid));\n                case 6:\n                    resx = _ctx.sent;\n                    _iteratorAbruptCompletion = false, _didIteratorError = false;\n                    _ctx.prev = 8;\n                    _iterator = _asyncIterator(resx);\n                case 10:\n                    _ctx.next = 12;\n                    return _iterator.next();\n                case 12:\n                    if (!(_iteratorAbruptCompletion = !(_step = _ctx.sent).done)) {\n                        _ctx.next = 17;\n                        break;\n                    }\n                    {\n                        _value = _step.value;\n                        config = _value;\n                        result.push(config);\n                    }\n                case 14:\n                    _iteratorAbruptCompletion = false;\n                    _ctx.next = 10;\n                    break;\n                case 17:\n                    _ctx.next = 23;\n                    break;\n                case 19:\n                    _ctx.prev = 19;\n                    _ctx.t0 = _ctx[\"catch\"](8);\n                    _didIteratorError = true;\n                    _iteratorError = _ctx.t0;\n                case 23:\n                    _ctx.prev = 23;\n                    _ctx.prev = 24;\n                    if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                        _ctx.next = 28;\n                        break;\n                    }\n                    _ctx.next = 28;\n                    return _iteratorError.return();\n                case 28:\n                    _ctx.prev = 28;\n                    if (!_didIteratorError) {\n                        _ctx.next = 31;\n                        break;\n                    }\n                    throw _iteratorError;\n                case 31:\n                    return _ctx.finish(28);\n                case 32:\n                    return _ctx.finish(23);\n                case 33:\n                    return _ctx.abrupt(\"return\", result);\n                case 34:\n                case \"end\":\n                    return _ctx.stop();\n            }\n        }, _callee, null, [\n            [\n                8,\n                19,\n                23,\n                33\n            ],\n            [\n                24,\n                ,\n                28,\n                32\n            ]\n        ]);\n    }));\n    return function checkUid(uid) {\n        return _ref.apply(this, arguments);\n    };\n}();\nvar allOutlet = function() {\n    var _ref = _asyncToGenerator(G_SKI_Dashboard_node_modules_next_dist_compiled_regenerator_runtime_runtime_js__WEBPACK_IMPORTED_MODULE_0___default().mark(function _callee() {\n        var db, result, resx, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, config;\n        return G_SKI_Dashboard_node_modules_next_dist_compiled_regenerator_runtime_runtime_js__WEBPACK_IMPORTED_MODULE_0___default().wrap(function _callee$(_ctx) {\n            while(1)switch(_ctx.prev = _ctx.next){\n                case 0:\n                    db = getConnection();\n                    _ctx.next = 3;\n                    return getCollection(\"outlet\", db);\n                case 3:\n                    result = [];\n                    _ctx.next = 6;\n                    return db.query(aql(_templateObject1()));\n                case 6:\n                    resx = _ctx.sent;\n                    _iteratorAbruptCompletion = false, _didIteratorError = false;\n                    _ctx.prev = 8;\n                    _iterator = _asyncIterator(resx);\n                case 10:\n                    _ctx.next = 12;\n                    return _iterator.next();\n                case 12:\n                    if (!(_iteratorAbruptCompletion = !(_step = _ctx.sent).done)) {\n                        _ctx.next = 17;\n                        break;\n                    }\n                    {\n                        _value = _step.value;\n                        config = _value;\n                        result.push(config);\n                    }\n                case 14:\n                    _iteratorAbruptCompletion = false;\n                    _ctx.next = 10;\n                    break;\n                case 17:\n                    _ctx.next = 23;\n                    break;\n                case 19:\n                    _ctx.prev = 19;\n                    _ctx.t0 = _ctx[\"catch\"](8);\n                    _didIteratorError = true;\n                    _iteratorError = _ctx.t0;\n                case 23:\n                    _ctx.prev = 23;\n                    _ctx.prev = 24;\n                    if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                        _ctx.next = 28;\n                        break;\n                    }\n                    _ctx.next = 28;\n                    return _iteratorError.return();\n                case 28:\n                    _ctx.prev = 28;\n                    if (!_didIteratorError) {\n                        _ctx.next = 31;\n                        break;\n                    }\n                    throw _iteratorError;\n                case 31:\n                    return _ctx.finish(28);\n                case 32:\n                    return _ctx.finish(23);\n                case 33:\n                    return _ctx.abrupt(\"return\", result);\n                case 34:\n                case \"end\":\n                    return _ctx.stop();\n            }\n        }, _callee, null, [\n            [\n                8,\n                19,\n                23,\n                33\n            ],\n            [\n                24,\n                ,\n                28,\n                32\n            ]\n        ]);\n    }));\n    return function allOutlet() {\n        return _ref.apply(this, arguments);\n    };\n}(); // export const bankList = async () => {\n //   const db = getConnection();\n //   await getCollection(\"global\", db);\n //   let result = [];\n //   const resx = await db.query(aql`\n //     FOR u IN global\n //       FILTER u.type == \"bank_list\"\n //     RETURN u\n //   `);\n //   for await (let config of resx) {\n //     result.push(config);\n //   }\n //   return result;\n // };\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/arangoDb.js\n");

/***/ }),

/***/ "./pages/dashboardSKI/outlet.js":
/*!**************************************!*\
  !*** ./pages/dashboardSKI/outlet.js ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"__N_SSP\": function() { return /* binding */ __N_SSP; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var components_layout_Navbar__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! components/layout/Navbar */ \"./components/layout/Navbar.js\");\n/* harmony import */ var components_card_DashboardCardSKI__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! components/card/DashboardCardSKI */ \"./components/card/DashboardCardSKI.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! next/router */ \"./node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var context_global__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! context/global */ \"./context/global.js\");\n/* harmony import */ var components_card_AddOtlet__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! components/card/AddOtlet */ \"./components/card/AddOtlet.js\");\n/* harmony import */ var lib_arangoDb__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! lib/arangoDb */ \"./lib/arangoDb.js\");\nvar _this = undefined;\n\n\n\n\n\n\n\n\nvar _s = $RefreshSig$();\nvar Otlets = function(props) {\n    var _this1 = _this;\n    _s();\n    var router = (0,next_router__WEBPACK_IMPORTED_MODULE_4__.useRouter)();\n    {\n    /* Default */ }\n    var ref = (0,react__WEBPACK_IMPORTED_MODULE_3__.useContext)(context_global__WEBPACK_IMPORTED_MODULE_5__.GlobalContext), globalCtx = ref.globalCtx, globalAct = ref.globalAct;\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(function() {\n        globalAct.setIsFetch(false);\n        globalAct.setErrorMsg(\"\");\n    // router.prefetch(\"/config/dashboard\");\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(function() {\n        console.log(\"fetch data status : \", globalCtx.isFetch);\n    }, [\n        globalCtx\n    ]);\n    {\n    /* Default */ }\n    var data = [\n        {\n            outlet: \"Red White Coffee\",\n            order: \"120\",\n            product: \"321\",\n            subcategory: \"11\",\n            route: \"/dashboard\"\n        },\n        {\n            outlet: \"Blue Green Coffee\",\n            order: \"55\",\n            product: \"98\",\n            subcategory: \"87\",\n            route: \"/dashboard\"\n        },\n        {\n            outlet: \"White Black Coffee\",\n            order: \"80\",\n            product: \"90\",\n            subcategory: \"9\",\n            route: \"/dashboard\"\n        },\n        {\n            outlet: \"Red White Coffee\",\n            order: \"88\",\n            product: \"108\",\n            subcategory: \"8\",\n            route: \"/dashboard\"\n        },\n        {\n            outlet: \"Blue Green Coffee\",\n            order: \"11\",\n            product: \"201\",\n            subcategory: \"7\",\n            route: \"/dashboard\"\n        },\n        {\n            outlet: \"White Black Coffee\",\n            order: \"51\",\n            product: \"100\",\n            subcategory: \"5\",\n            route: \"/dashboard\"\n        }, \n    ];\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"w-full p-3 flex flex-col gap-y-4\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(components_card_AddOtlet__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                globalAct: globalAct,\n                globalCtx: globalCtx\n            }, void 0, false, {\n                fileName: \"G:\\\\SKI-Dashboard\\\\pages\\\\dashboardSKI\\\\outlet.js\",\n                lineNumber: 120,\n                columnNumber: 7\n            }, _this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"hr\", {}, void 0, false, {\n                    fileName: \"G:\\\\SKI-Dashboard\\\\pages\\\\dashboardSKI\\\\outlet.js\",\n                    lineNumber: 122,\n                    columnNumber: 9\n                }, _this)\n            }, void 0, false, {\n                fileName: \"G:\\\\SKI-Dashboard\\\\pages\\\\dashboardSKI\\\\outlet.js\",\n                lineNumber: 121,\n                columnNumber: 7\n            }, _this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"w-full grid grid-cols-3 items-center gap-4\",\n                children: data.map(function(dat, idx) {\n                    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"w-full\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(components_card_DashboardCardSKI__WEBPACK_IMPORTED_MODULE_2__[\"default\"], {\n                            globalAct: globalAct,\n                            globalCtx: globalCtx,\n                            otlet: dat.outlet,\n                            order: dat.order,\n                            products: dat.product,\n                            subCategory: dat.subcategory,\n                            route: dat.route\n                        }, void 0, false, {\n                            fileName: \"G:\\\\SKI-Dashboard\\\\pages\\\\dashboardSKI\\\\outlet.js\",\n                            lineNumber: 129,\n                            columnNumber: 15\n                        }, _this1)\n                    }, void 0, false, {\n                        fileName: \"G:\\\\SKI-Dashboard\\\\pages\\\\dashboardSKI\\\\outlet.js\",\n                        lineNumber: 128,\n                        columnNumber: 13\n                    }, _this1);\n                })\n            }, void 0, false, {\n                fileName: \"G:\\\\SKI-Dashboard\\\\pages\\\\dashboardSKI\\\\outlet.js\",\n                lineNumber: 125,\n                columnNumber: 7\n            }, _this)\n        ]\n    }, void 0, true, {\n        fileName: \"G:\\\\SKI-Dashboard\\\\pages\\\\dashboardSKI\\\\outlet.js\",\n        lineNumber: 119,\n        columnNumber: 5\n    }, _this);\n};\n_s(Otlets, \"eyEEQkTuQYfvjf5LBYKGf/smWfc=\", false, function() {\n    return [\n        next_router__WEBPACK_IMPORTED_MODULE_4__.useRouter\n    ];\n});\n_c = Otlets;\nvar __N_SSP = true;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Otlets);\nOtlets.getLayout = components_layout_Navbar__WEBPACK_IMPORTED_MODULE_1__.getLayout;\nvar _c;\n$RefreshReg$(_c, \"Otlets\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/dashboardSKI/outlet.js\n");

/***/ }),

/***/ "./node_modules/next/dist/compiled/native-url/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/next/dist/compiled/native-url/index.js ***!
  \*************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("var __dirname = \"/\";\n(function(){var e={477:function(e){\"use strict\";e.exports=__webpack_require__(/*! querystring */ \"./node_modules/next/dist/compiled/querystring-es3/index.js\")}};var t={};function __nccwpck_require__(o){var a=t[o];if(a!==undefined){return a.exports}var s=t[o]={exports:{}};var n=true;try{e[o](s,s.exports,__nccwpck_require__);n=false}finally{if(n)delete t[o]}return s.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var o={};!function(){var e=o;var t,a=(t=__nccwpck_require__(477))&&\"object\"==typeof t&&\"default\"in t?t.default:t,s=/https?|ftp|gopher|file/;function r(e){\"string\"==typeof e&&(e=d(e));var t=function(e,t,o){var a=e.auth,s=e.hostname,n=e.protocol||\"\",p=e.pathname||\"\",c=e.hash||\"\",i=e.query||\"\",u=!1;a=a?encodeURIComponent(a).replace(/%3A/i,\":\")+\"@\":\"\",e.host?u=a+e.host:s&&(u=a+(~s.indexOf(\":\")?\"[\"+s+\"]\":s),e.port&&(u+=\":\"+e.port)),i&&\"object\"==typeof i&&(i=t.encode(i));var f=e.search||i&&\"?\"+i||\"\";return n&&\":\"!==n.substr(-1)&&(n+=\":\"),e.slashes||(!n||o.test(n))&&!1!==u?(u=\"//\"+(u||\"\"),p&&\"/\"!==p[0]&&(p=\"/\"+p)):u||(u=\"\"),c&&\"#\"!==c[0]&&(c=\"#\"+c),f&&\"?\"!==f[0]&&(f=\"?\"+f),{protocol:n,host:u,pathname:p=p.replace(/[?#]/g,encodeURIComponent),search:f=f.replace(\"#\",\"%23\"),hash:c}}(e,a,s);return\"\"+t.protocol+t.host+t.pathname+t.search+t.hash}var n=\"http://\",p=\"w.w\",c=n+p,i=/^([a-z0-9.+-]*:\\/\\/\\/)([a-z0-9.+-]:\\/*)?/i,u=/https?|ftp|gopher|file/;function h(e,t){var o=\"string\"==typeof e?d(e):e;e=\"object\"==typeof e?r(e):e;var a=d(t),s=\"\";o.protocol&&!o.slashes&&(s=o.protocol,e=e.replace(o.protocol,\"\"),s+=\"/\"===t[0]||\"/\"===e[0]?\"/\":\"\"),s&&a.protocol&&(s=\"\",a.slashes||(s=a.protocol,t=t.replace(a.protocol,\"\")));var p=e.match(i);p&&!a.protocol&&(e=e.substr((s=p[1]+(p[2]||\"\")).length),/^\\/\\/[^/]/.test(t)&&(s=s.slice(0,-1)));var f=new URL(e,c+\"/\"),m=new URL(t,f).toString().replace(c,\"\"),v=a.protocol||o.protocol;return v+=o.slashes||a.slashes?\"//\":\"\",!s&&v?m=m.replace(n,v):s&&(m=m.replace(n,\"\")),u.test(m)||~t.indexOf(\".\")||\"/\"===e.slice(-1)||\"/\"===t.slice(-1)||\"/\"!==m.slice(-1)||(m=m.slice(0,-1)),s&&(m=s+(\"/\"===m[0]?m.substr(1):m)),m}function l(){}l.prototype.parse=d,l.prototype.format=r,l.prototype.resolve=h,l.prototype.resolveObject=h;var f=/^https?|ftp|gopher|file/,m=/^(.*?)([#?].*)/,v=/^([a-z0-9.+-]*:)(\\/{0,3})(.*)/i,_=/^([a-z0-9.+-]*:)?\\/\\/\\/*/i,b=/^([a-z0-9.+-]*:)(\\/{0,2})\\[(.*)\\]$/i;function d(e,t,o){if(void 0===t&&(t=!1),void 0===o&&(o=!1),e&&\"object\"==typeof e&&e instanceof l)return e;var s=(e=e.trim()).match(m);e=s?s[1].replace(/\\\\/g,\"/\")+s[2]:e.replace(/\\\\/g,\"/\"),b.test(e)&&\"/\"!==e.slice(-1)&&(e+=\"/\");var n=!/(^javascript)/.test(e)&&e.match(v),i=_.test(e),u=\"\";n&&(f.test(n[1])||(u=n[1].toLowerCase(),e=\"\"+n[2]+n[3]),n[2]||(i=!1,f.test(n[1])?(u=n[1],e=\"\"+n[3]):e=\"//\"+n[3]),3!==n[2].length&&1!==n[2].length||(u=n[1],e=\"/\"+n[3]));var g,y=(s?s[1]:e).match(/^https?:\\/\\/[^/]+(:[0-9]+)(?=\\/|$)/),w=y&&y[1],C=new l,U=\"\",j=\"\";try{g=new URL(e)}catch(t){U=t,u||o||!/^\\/\\//.test(e)||/^\\/\\/.+[@.]/.test(e)||(j=\"/\",e=e.substr(1));try{g=new URL(e,c)}catch(e){return C.protocol=u,C.href=u,C}}C.slashes=i&&!j,C.host=g.host===p?\"\":g.host,C.hostname=g.hostname===p?\"\":g.hostname.replace(/(\\[|\\])/g,\"\"),C.protocol=U?u||null:g.protocol,C.search=g.search.replace(/\\\\/g,\"%5C\"),C.hash=g.hash.replace(/\\\\/g,\"%5C\");var x=e.split(\"#\");!C.search&&~x[0].indexOf(\"?\")&&(C.search=\"?\"),C.hash||\"\"!==x[1]||(C.hash=\"#\"),C.query=t?a.decode(g.search.substr(1)):C.search.substr(1),C.pathname=j+(n?function(e){return e.replace(/['^|`]/g,(function(e){return\"%\"+e.charCodeAt().toString(16).toUpperCase()})).replace(/((?:%[0-9A-F]{2})+)/g,(function(e,t){try{return decodeURIComponent(t).split(\"\").map((function(e){var t=e.charCodeAt();return t>256||/^[a-z0-9]$/i.test(e)?e:\"%\"+t.toString(16).toUpperCase()})).join(\"\")}catch(e){return t}}))}(g.pathname):g.pathname),\"about:\"===C.protocol&&\"blank\"===C.pathname&&(C.protocol=\"\",C.pathname=\"\"),U&&\"/\"!==e[0]&&(C.pathname=C.pathname.substr(1)),u&&!f.test(u)&&\"/\"!==e.slice(-1)&&\"/\"===C.pathname&&(C.pathname=\"\"),C.path=C.pathname+C.search,C.auth=[g.username,g.password].map(decodeURIComponent).filter(Boolean).join(\":\"),C.port=g.port,w&&!C.host.endsWith(w)&&(C.host+=w,C.port=w.slice(1)),C.href=j?\"\"+C.pathname+C.search+C.hash:r(C);var q=/^(file)/.test(C.href)?[\"host\",\"hostname\"]:[];return Object.keys(C).forEach((function(e){~q.indexOf(e)||(C[e]=C[e]||null)})),C}e.parse=d,e.format=r,e.resolve=h,e.resolveObject=function(e,t){return d(h(e,t))},e.Url=l}();module.exports=o})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL25hdGl2ZS11cmwvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IjtBQUFBLFlBQVksT0FBTyxnQkFBZ0IsYUFBYSxVQUFVLG1CQUFPLENBQUMsK0VBQWEsSUFBSSxTQUFTLGdDQUFnQyxXQUFXLGtCQUFrQixpQkFBaUIsWUFBWSxZQUFZLFdBQVcsSUFBSSxzQ0FBc0MsUUFBUSxRQUFRLGlCQUFpQixpQkFBaUIsbUVBQW1FLFNBQVMsS0FBSyxTQUFTLFlBQVksUUFBUSwrR0FBK0csY0FBYyw2QkFBNkIsc0JBQXNCLDRGQUE0Riw2S0FBNkssNkJBQTZCLGlMQUFpTCx5R0FBeUcsUUFBUSxzREFBc0QsdUdBQXVHLGdCQUFnQixnQ0FBZ0MsNEJBQTRCLGdCQUFnQiw4S0FBOEssaUJBQWlCLGdHQUFnRyx3RkFBd0Ysa09BQWtPLGNBQWMsMkZBQTJGLDBFQUEwRSxJQUFJLDZEQUE2RCxJQUFJLGFBQWEsa0JBQWtCLHdGQUF3Riw0QkFBNEIsNkZBQTZGLDREQUE0RCx3S0FBd0ssMkZBQTJGLElBQUksYUFBYSxTQUFTLHlFQUF5RSxJQUFJLGVBQWUsU0FBUyxnQ0FBZ0MscU5BQXFOLG1CQUFtQixvS0FBb0ssd0NBQXdDLG9EQUFvRCwwQkFBMEIsRUFBRSxxQkFBcUIsSUFBSSx3REFBd0QscUJBQXFCLHVFQUF1RSxZQUFZLFNBQVMsVUFBVSxHQUFHLHFiQUFxYixvREFBb0QsMkNBQTJDLGlDQUFpQyxLQUFLLCtEQUErRCxpQkFBaUIsU0FBUyxHQUFHLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL25hdGl2ZS11cmwvaW5kZXguanM/NzI0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXt2YXIgZT17NDc3OmZ1bmN0aW9uKGUpe1widXNlIHN0cmljdFwiO2UuZXhwb3J0cz1yZXF1aXJlKFwicXVlcnlzdHJpbmdcIil9fTt2YXIgdD17fTtmdW5jdGlvbiBfX25jY3dwY2tfcmVxdWlyZV9fKG8pe3ZhciBhPXRbb107aWYoYSE9PXVuZGVmaW5lZCl7cmV0dXJuIGEuZXhwb3J0c312YXIgcz10W29dPXtleHBvcnRzOnt9fTt2YXIgbj10cnVlO3RyeXtlW29dKHMscy5leHBvcnRzLF9fbmNjd3Bja19yZXF1aXJlX18pO249ZmFsc2V9ZmluYWxseXtpZihuKWRlbGV0ZSB0W29dfXJldHVybiBzLmV4cG9ydHN9aWYodHlwZW9mIF9fbmNjd3Bja19yZXF1aXJlX18hPT1cInVuZGVmaW5lZFwiKV9fbmNjd3Bja19yZXF1aXJlX18uYWI9X19kaXJuYW1lK1wiL1wiO3ZhciBvPXt9OyFmdW5jdGlvbigpe3ZhciBlPW87dmFyIHQsYT0odD1fX25jY3dwY2tfcmVxdWlyZV9fKDQ3NykpJiZcIm9iamVjdFwiPT10eXBlb2YgdCYmXCJkZWZhdWx0XCJpbiB0P3QuZGVmYXVsdDp0LHM9L2h0dHBzP3xmdHB8Z29waGVyfGZpbGUvO2Z1bmN0aW9uIHIoZSl7XCJzdHJpbmdcIj09dHlwZW9mIGUmJihlPWQoZSkpO3ZhciB0PWZ1bmN0aW9uKGUsdCxvKXt2YXIgYT1lLmF1dGgscz1lLmhvc3RuYW1lLG49ZS5wcm90b2NvbHx8XCJcIixwPWUucGF0aG5hbWV8fFwiXCIsYz1lLmhhc2h8fFwiXCIsaT1lLnF1ZXJ5fHxcIlwiLHU9ITE7YT1hP2VuY29kZVVSSUNvbXBvbmVudChhKS5yZXBsYWNlKC8lM0EvaSxcIjpcIikrXCJAXCI6XCJcIixlLmhvc3Q/dT1hK2UuaG9zdDpzJiYodT1hKyh+cy5pbmRleE9mKFwiOlwiKT9cIltcIitzK1wiXVwiOnMpLGUucG9ydCYmKHUrPVwiOlwiK2UucG9ydCkpLGkmJlwib2JqZWN0XCI9PXR5cGVvZiBpJiYoaT10LmVuY29kZShpKSk7dmFyIGY9ZS5zZWFyY2h8fGkmJlwiP1wiK2l8fFwiXCI7cmV0dXJuIG4mJlwiOlwiIT09bi5zdWJzdHIoLTEpJiYobis9XCI6XCIpLGUuc2xhc2hlc3x8KCFufHxvLnRlc3QobikpJiYhMSE9PXU/KHU9XCIvL1wiKyh1fHxcIlwiKSxwJiZcIi9cIiE9PXBbMF0mJihwPVwiL1wiK3ApKTp1fHwodT1cIlwiKSxjJiZcIiNcIiE9PWNbMF0mJihjPVwiI1wiK2MpLGYmJlwiP1wiIT09ZlswXSYmKGY9XCI/XCIrZikse3Byb3RvY29sOm4saG9zdDp1LHBhdGhuYW1lOnA9cC5yZXBsYWNlKC9bPyNdL2csZW5jb2RlVVJJQ29tcG9uZW50KSxzZWFyY2g6Zj1mLnJlcGxhY2UoXCIjXCIsXCIlMjNcIiksaGFzaDpjfX0oZSxhLHMpO3JldHVyblwiXCIrdC5wcm90b2NvbCt0Lmhvc3QrdC5wYXRobmFtZSt0LnNlYXJjaCt0Lmhhc2h9dmFyIG49XCJodHRwOi8vXCIscD1cIncud1wiLGM9bitwLGk9L14oW2EtejAtOS4rLV0qOlxcL1xcL1xcLykoW2EtejAtOS4rLV06XFwvKik/L2ksdT0vaHR0cHM/fGZ0cHxnb3BoZXJ8ZmlsZS87ZnVuY3Rpb24gaChlLHQpe3ZhciBvPVwic3RyaW5nXCI9PXR5cGVvZiBlP2QoZSk6ZTtlPVwib2JqZWN0XCI9PXR5cGVvZiBlP3IoZSk6ZTt2YXIgYT1kKHQpLHM9XCJcIjtvLnByb3RvY29sJiYhby5zbGFzaGVzJiYocz1vLnByb3RvY29sLGU9ZS5yZXBsYWNlKG8ucHJvdG9jb2wsXCJcIikscys9XCIvXCI9PT10WzBdfHxcIi9cIj09PWVbMF0/XCIvXCI6XCJcIikscyYmYS5wcm90b2NvbCYmKHM9XCJcIixhLnNsYXNoZXN8fChzPWEucHJvdG9jb2wsdD10LnJlcGxhY2UoYS5wcm90b2NvbCxcIlwiKSkpO3ZhciBwPWUubWF0Y2goaSk7cCYmIWEucHJvdG9jb2wmJihlPWUuc3Vic3RyKChzPXBbMV0rKHBbMl18fFwiXCIpKS5sZW5ndGgpLC9eXFwvXFwvW14vXS8udGVzdCh0KSYmKHM9cy5zbGljZSgwLC0xKSkpO3ZhciBmPW5ldyBVUkwoZSxjK1wiL1wiKSxtPW5ldyBVUkwodCxmKS50b1N0cmluZygpLnJlcGxhY2UoYyxcIlwiKSx2PWEucHJvdG9jb2x8fG8ucHJvdG9jb2w7cmV0dXJuIHYrPW8uc2xhc2hlc3x8YS5zbGFzaGVzP1wiLy9cIjpcIlwiLCFzJiZ2P209bS5yZXBsYWNlKG4sdik6cyYmKG09bS5yZXBsYWNlKG4sXCJcIikpLHUudGVzdChtKXx8fnQuaW5kZXhPZihcIi5cIil8fFwiL1wiPT09ZS5zbGljZSgtMSl8fFwiL1wiPT09dC5zbGljZSgtMSl8fFwiL1wiIT09bS5zbGljZSgtMSl8fChtPW0uc2xpY2UoMCwtMSkpLHMmJihtPXMrKFwiL1wiPT09bVswXT9tLnN1YnN0cigxKTptKSksbX1mdW5jdGlvbiBsKCl7fWwucHJvdG90eXBlLnBhcnNlPWQsbC5wcm90b3R5cGUuZm9ybWF0PXIsbC5wcm90b3R5cGUucmVzb2x2ZT1oLGwucHJvdG90eXBlLnJlc29sdmVPYmplY3Q9aDt2YXIgZj0vXmh0dHBzP3xmdHB8Z29waGVyfGZpbGUvLG09L14oLio/KShbIz9dLiopLyx2PS9eKFthLXowLTkuKy1dKjopKFxcL3swLDN9KSguKikvaSxfPS9eKFthLXowLTkuKy1dKjopP1xcL1xcL1xcLyovaSxiPS9eKFthLXowLTkuKy1dKjopKFxcL3swLDJ9KVxcWyguKilcXF0kL2k7ZnVuY3Rpb24gZChlLHQsbyl7aWYodm9pZCAwPT09dCYmKHQ9ITEpLHZvaWQgMD09PW8mJihvPSExKSxlJiZcIm9iamVjdFwiPT10eXBlb2YgZSYmZSBpbnN0YW5jZW9mIGwpcmV0dXJuIGU7dmFyIHM9KGU9ZS50cmltKCkpLm1hdGNoKG0pO2U9cz9zWzFdLnJlcGxhY2UoL1xcXFwvZyxcIi9cIikrc1syXTplLnJlcGxhY2UoL1xcXFwvZyxcIi9cIiksYi50ZXN0KGUpJiZcIi9cIiE9PWUuc2xpY2UoLTEpJiYoZSs9XCIvXCIpO3ZhciBuPSEvKF5qYXZhc2NyaXB0KS8udGVzdChlKSYmZS5tYXRjaCh2KSxpPV8udGVzdChlKSx1PVwiXCI7biYmKGYudGVzdChuWzFdKXx8KHU9blsxXS50b0xvd2VyQ2FzZSgpLGU9XCJcIituWzJdK25bM10pLG5bMl18fChpPSExLGYudGVzdChuWzFdKT8odT1uWzFdLGU9XCJcIituWzNdKTplPVwiLy9cIituWzNdKSwzIT09blsyXS5sZW5ndGgmJjEhPT1uWzJdLmxlbmd0aHx8KHU9blsxXSxlPVwiL1wiK25bM10pKTt2YXIgZyx5PShzP3NbMV06ZSkubWF0Y2goL15odHRwcz86XFwvXFwvW14vXSsoOlswLTldKykoPz1cXC98JCkvKSx3PXkmJnlbMV0sQz1uZXcgbCxVPVwiXCIsaj1cIlwiO3RyeXtnPW5ldyBVUkwoZSl9Y2F0Y2godCl7VT10LHV8fG98fCEvXlxcL1xcLy8udGVzdChlKXx8L15cXC9cXC8uK1tALl0vLnRlc3QoZSl8fChqPVwiL1wiLGU9ZS5zdWJzdHIoMSkpO3RyeXtnPW5ldyBVUkwoZSxjKX1jYXRjaChlKXtyZXR1cm4gQy5wcm90b2NvbD11LEMuaHJlZj11LEN9fUMuc2xhc2hlcz1pJiYhaixDLmhvc3Q9Zy5ob3N0PT09cD9cIlwiOmcuaG9zdCxDLmhvc3RuYW1lPWcuaG9zdG5hbWU9PT1wP1wiXCI6Zy5ob3N0bmFtZS5yZXBsYWNlKC8oXFxbfFxcXSkvZyxcIlwiKSxDLnByb3RvY29sPVU/dXx8bnVsbDpnLnByb3RvY29sLEMuc2VhcmNoPWcuc2VhcmNoLnJlcGxhY2UoL1xcXFwvZyxcIiU1Q1wiKSxDLmhhc2g9Zy5oYXNoLnJlcGxhY2UoL1xcXFwvZyxcIiU1Q1wiKTt2YXIgeD1lLnNwbGl0KFwiI1wiKTshQy5zZWFyY2gmJn54WzBdLmluZGV4T2YoXCI/XCIpJiYoQy5zZWFyY2g9XCI/XCIpLEMuaGFzaHx8XCJcIiE9PXhbMV18fChDLmhhc2g9XCIjXCIpLEMucXVlcnk9dD9hLmRlY29kZShnLnNlYXJjaC5zdWJzdHIoMSkpOkMuc2VhcmNoLnN1YnN0cigxKSxDLnBhdGhuYW1lPWorKG4/ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZSgvWydefGBdL2csKGZ1bmN0aW9uKGUpe3JldHVyblwiJVwiK2UuY2hhckNvZGVBdCgpLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpfSkpLnJlcGxhY2UoLygoPzolWzAtOUEtRl17Mn0pKykvZywoZnVuY3Rpb24oZSx0KXt0cnl7cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCh0KS5zcGxpdChcIlwiKS5tYXAoKGZ1bmN0aW9uKGUpe3ZhciB0PWUuY2hhckNvZGVBdCgpO3JldHVybiB0PjI1Nnx8L15bYS16MC05XSQvaS50ZXN0KGUpP2U6XCIlXCIrdC50b1N0cmluZygxNikudG9VcHBlckNhc2UoKX0pKS5qb2luKFwiXCIpfWNhdGNoKGUpe3JldHVybiB0fX0pKX0oZy5wYXRobmFtZSk6Zy5wYXRobmFtZSksXCJhYm91dDpcIj09PUMucHJvdG9jb2wmJlwiYmxhbmtcIj09PUMucGF0aG5hbWUmJihDLnByb3RvY29sPVwiXCIsQy5wYXRobmFtZT1cIlwiKSxVJiZcIi9cIiE9PWVbMF0mJihDLnBhdGhuYW1lPUMucGF0aG5hbWUuc3Vic3RyKDEpKSx1JiYhZi50ZXN0KHUpJiZcIi9cIiE9PWUuc2xpY2UoLTEpJiZcIi9cIj09PUMucGF0aG5hbWUmJihDLnBhdGhuYW1lPVwiXCIpLEMucGF0aD1DLnBhdGhuYW1lK0Muc2VhcmNoLEMuYXV0aD1bZy51c2VybmFtZSxnLnBhc3N3b3JkXS5tYXAoZGVjb2RlVVJJQ29tcG9uZW50KS5maWx0ZXIoQm9vbGVhbikuam9pbihcIjpcIiksQy5wb3J0PWcucG9ydCx3JiYhQy5ob3N0LmVuZHNXaXRoKHcpJiYoQy5ob3N0Kz13LEMucG9ydD13LnNsaWNlKDEpKSxDLmhyZWY9aj9cIlwiK0MucGF0aG5hbWUrQy5zZWFyY2grQy5oYXNoOnIoQyk7dmFyIHE9L14oZmlsZSkvLnRlc3QoQy5ocmVmKT9bXCJob3N0XCIsXCJob3N0bmFtZVwiXTpbXTtyZXR1cm4gT2JqZWN0LmtleXMoQykuZm9yRWFjaCgoZnVuY3Rpb24oZSl7fnEuaW5kZXhPZihlKXx8KENbZV09Q1tlXXx8bnVsbCl9KSksQ31lLnBhcnNlPWQsZS5mb3JtYXQ9cixlLnJlc29sdmU9aCxlLnJlc29sdmVPYmplY3Q9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZChoKGUsdCkpfSxlLlVybD1sfSgpO21vZHVsZS5leHBvcnRzPW99KSgpOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/compiled/native-url/index.js\n");

/***/ }),

/***/ "./node_modules/next/dist/compiled/path-browserify/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/path-browserify/index.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("var __dirname = \"/\";\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/process/browser.js\");\n(function(){\"use strict\";var e={977:function(e){function assertPath(e){if(typeof e!==\"string\"){throw new TypeError(\"Path must be a string. Received \"+JSON.stringify(e))}}function normalizeStringPosix(e,r){var t=\"\";var i=0;var n=-1;var a=0;var f;for(var l=0;l<=e.length;++l){if(l<e.length)f=e.charCodeAt(l);else if(f===47)break;else f=47;if(f===47){if(n===l-1||a===1){}else if(n!==l-1&&a===2){if(t.length<2||i!==2||t.charCodeAt(t.length-1)!==46||t.charCodeAt(t.length-2)!==46){if(t.length>2){var s=t.lastIndexOf(\"/\");if(s!==t.length-1){if(s===-1){t=\"\";i=0}else{t=t.slice(0,s);i=t.length-1-t.lastIndexOf(\"/\")}n=l;a=0;continue}}else if(t.length===2||t.length===1){t=\"\";i=0;n=l;a=0;continue}}if(r){if(t.length>0)t+=\"/..\";else t=\"..\";i=2}}else{if(t.length>0)t+=\"/\"+e.slice(n+1,l);else t=e.slice(n+1,l);i=l-n-1}n=l;a=0}else if(f===46&&a!==-1){++a}else{a=-1}}return t}function _format(e,r){var t=r.dir||r.root;var i=r.base||(r.name||\"\")+(r.ext||\"\");if(!t){return i}if(t===r.root){return t+i}return t+e+i}var r={resolve:function resolve(){var e=\"\";var r=false;var t;for(var i=arguments.length-1;i>=-1&&!r;i--){var n;if(i>=0)n=arguments[i];else{if(t===undefined)t=process.cwd();n=t}assertPath(n);if(n.length===0){continue}e=n+\"/\"+e;r=n.charCodeAt(0)===47}e=normalizeStringPosix(e,!r);if(r){if(e.length>0)return\"/\"+e;else return\"/\"}else if(e.length>0){return e}else{return\".\"}},normalize:function normalize(e){assertPath(e);if(e.length===0)return\".\";var r=e.charCodeAt(0)===47;var t=e.charCodeAt(e.length-1)===47;e=normalizeStringPosix(e,!r);if(e.length===0&&!r)e=\".\";if(e.length>0&&t)e+=\"/\";if(r)return\"/\"+e;return e},isAbsolute:function isAbsolute(e){assertPath(e);return e.length>0&&e.charCodeAt(0)===47},join:function join(){if(arguments.length===0)return\".\";var e;for(var t=0;t<arguments.length;++t){var i=arguments[t];assertPath(i);if(i.length>0){if(e===undefined)e=i;else e+=\"/\"+i}}if(e===undefined)return\".\";return r.normalize(e)},relative:function relative(e,t){assertPath(e);assertPath(t);if(e===t)return\"\";e=r.resolve(e);t=r.resolve(t);if(e===t)return\"\";var i=1;for(;i<e.length;++i){if(e.charCodeAt(i)!==47)break}var n=e.length;var a=n-i;var f=1;for(;f<t.length;++f){if(t.charCodeAt(f)!==47)break}var l=t.length;var s=l-f;var o=a<s?a:s;var u=-1;var h=0;for(;h<=o;++h){if(h===o){if(s>o){if(t.charCodeAt(f+h)===47){return t.slice(f+h+1)}else if(h===0){return t.slice(f+h)}}else if(a>o){if(e.charCodeAt(i+h)===47){u=h}else if(h===0){u=0}}break}var c=e.charCodeAt(i+h);var v=t.charCodeAt(f+h);if(c!==v)break;else if(c===47)u=h}var g=\"\";for(h=i+u+1;h<=n;++h){if(h===n||e.charCodeAt(h)===47){if(g.length===0)g+=\"..\";else g+=\"/..\"}}if(g.length>0)return g+t.slice(f+u);else{f+=u;if(t.charCodeAt(f)===47)++f;return t.slice(f)}},_makeLong:function _makeLong(e){return e},dirname:function dirname(e){assertPath(e);if(e.length===0)return\".\";var r=e.charCodeAt(0);var t=r===47;var i=-1;var n=true;for(var a=e.length-1;a>=1;--a){r=e.charCodeAt(a);if(r===47){if(!n){i=a;break}}else{n=false}}if(i===-1)return t?\"/\":\".\";if(t&&i===1)return\"//\";return e.slice(0,i)},basename:function basename(e,r){if(r!==undefined&&typeof r!==\"string\")throw new TypeError('\"ext\" argument must be a string');assertPath(e);var t=0;var i=-1;var n=true;var a;if(r!==undefined&&r.length>0&&r.length<=e.length){if(r.length===e.length&&r===e)return\"\";var f=r.length-1;var l=-1;for(a=e.length-1;a>=0;--a){var s=e.charCodeAt(a);if(s===47){if(!n){t=a+1;break}}else{if(l===-1){n=false;l=a+1}if(f>=0){if(s===r.charCodeAt(f)){if(--f===-1){i=a}}else{f=-1;i=l}}}}if(t===i)i=l;else if(i===-1)i=e.length;return e.slice(t,i)}else{for(a=e.length-1;a>=0;--a){if(e.charCodeAt(a)===47){if(!n){t=a+1;break}}else if(i===-1){n=false;i=a+1}}if(i===-1)return\"\";return e.slice(t,i)}},extname:function extname(e){assertPath(e);var r=-1;var t=0;var i=-1;var n=true;var a=0;for(var f=e.length-1;f>=0;--f){var l=e.charCodeAt(f);if(l===47){if(!n){t=f+1;break}continue}if(i===-1){n=false;i=f+1}if(l===46){if(r===-1)r=f;else if(a!==1)a=1}else if(r!==-1){a=-1}}if(r===-1||i===-1||a===0||a===1&&r===i-1&&r===t+1){return\"\"}return e.slice(r,i)},format:function format(e){if(e===null||typeof e!==\"object\"){throw new TypeError('The \"pathObject\" argument must be of type Object. Received type '+typeof e)}return _format(\"/\",e)},parse:function parse(e){assertPath(e);var r={root:\"\",dir:\"\",base:\"\",ext:\"\",name:\"\"};if(e.length===0)return r;var t=e.charCodeAt(0);var i=t===47;var n;if(i){r.root=\"/\";n=1}else{n=0}var a=-1;var f=0;var l=-1;var s=true;var o=e.length-1;var u=0;for(;o>=n;--o){t=e.charCodeAt(o);if(t===47){if(!s){f=o+1;break}continue}if(l===-1){s=false;l=o+1}if(t===46){if(a===-1)a=o;else if(u!==1)u=1}else if(a!==-1){u=-1}}if(a===-1||l===-1||u===0||u===1&&a===l-1&&a===f+1){if(l!==-1){if(f===0&&i)r.base=r.name=e.slice(1,l);else r.base=r.name=e.slice(f,l)}}else{if(f===0&&i){r.name=e.slice(1,a);r.base=e.slice(1,l)}else{r.name=e.slice(f,a);r.base=e.slice(f,l)}r.ext=e.slice(a,l)}if(f>0)r.dir=e.slice(0,f-1);else if(i)r.dir=\"/\";return r},sep:\"/\",delimiter:\":\",win32:null,posix:null};r.posix=r;e.exports=r}};var r={};function __nccwpck_require__(t){var i=r[t];if(i!==undefined){return i.exports}var n=r[t]={exports:{}};var a=true;try{e[t](n,n.exports,__nccwpck_require__);a=false}finally{if(a)delete r[t]}return n.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var t=__nccwpck_require__(977);module.exports=t})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3BhdGgtYnJvd3NlcmlmeS9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiOztBQUFBLFlBQVksYUFBYSxPQUFPLGdCQUFnQix1QkFBdUIsd0JBQXdCLDJFQUEyRSxtQ0FBbUMsU0FBUyxRQUFRLFNBQVMsUUFBUSxNQUFNLFlBQVksWUFBWSxLQUFLLGdDQUFnQyxxQkFBcUIsVUFBVSxXQUFXLG9CQUFvQix3QkFBd0Isb0ZBQW9GLGVBQWUseUJBQXlCLG1CQUFtQixXQUFXLEtBQUssSUFBSSxLQUFLLGVBQWUsZ0NBQWdDLElBQUksSUFBSSxVQUFVLG9DQUFvQyxLQUFLLElBQUksSUFBSSxJQUFJLFVBQVUsTUFBTSx1QkFBdUIsWUFBWSxLQUFLLEtBQUssb0NBQW9DLHNCQUFzQixRQUFRLElBQUksSUFBSSx3QkFBd0IsSUFBSSxLQUFLLE1BQU0sU0FBUyxzQkFBc0Isb0JBQW9CLHVDQUF1QyxPQUFPLFNBQVMsZUFBZSxXQUFXLGFBQWEsT0FBTywyQkFBMkIsU0FBUyxZQUFZLE1BQU0sNkJBQTZCLFVBQVUsS0FBSyxNQUFNLHVCQUF1QixLQUFLLG1CQUFtQixPQUFPLE9BQU8sSUFBSSxjQUFjLGlCQUFpQixTQUFTLFVBQVUsdUJBQXVCLDZCQUE2QixNQUFNLDBCQUEwQixlQUFlLG9CQUFvQixTQUFTLEtBQUssV0FBVyxpQ0FBaUMsY0FBYywwQkFBMEIsMkJBQTJCLG9DQUFvQyw2QkFBNkIsMEJBQTBCLHdCQUF3QixpQkFBaUIsU0FBUyxtQ0FBbUMsY0FBYyx3Q0FBd0Msc0JBQXNCLGtDQUFrQyxNQUFNLFlBQVksbUJBQW1CLEtBQUssbUJBQW1CLGNBQWMsZUFBZSxxQkFBcUIsZUFBZSwyQkFBMkIsc0JBQXNCLGlDQUFpQyxjQUFjLGNBQWMsa0JBQWtCLGVBQWUsZUFBZSxrQkFBa0IsUUFBUSxLQUFLLFdBQVcsS0FBSyw4QkFBOEIsZUFBZSxVQUFVLFFBQVEsS0FBSyxXQUFXLEtBQUssOEJBQThCLGVBQWUsVUFBVSxjQUFjLFNBQVMsUUFBUSxLQUFLLEtBQUssS0FBSyxVQUFVLFFBQVEsMkJBQTJCLHNCQUFzQixlQUFlLHFCQUFxQixhQUFhLDJCQUEyQixJQUFJLGVBQWUsS0FBSyxNQUFNLHdCQUF3Qix3QkFBd0IsZUFBZSxtQkFBbUIsU0FBUyxZQUFZLEtBQUssS0FBSyxnQ0FBZ0Msd0JBQXdCLGVBQWUsb0NBQW9DLEtBQUssS0FBSyw0QkFBNEIsbUJBQW1CLGlDQUFpQyxTQUFTLDZCQUE2QixjQUFjLDBCQUEwQixzQkFBc0IsYUFBYSxTQUFTLFdBQVcscUJBQXFCLEtBQUssS0FBSyxrQkFBa0IsV0FBVyxPQUFPLElBQUksT0FBTyxLQUFLLFNBQVMsMkJBQTJCLHVCQUF1QixvQkFBb0IsaUNBQWlDLDZGQUE2RixjQUFjLFFBQVEsU0FBUyxXQUFXLE1BQU0sa0RBQWtELHVDQUF1QyxpQkFBaUIsU0FBUyxpQkFBaUIsS0FBSyxLQUFLLHNCQUFzQixXQUFXLE9BQU8sTUFBTSxPQUFPLEtBQUssV0FBVyxRQUFRLE1BQU0sU0FBUyx3QkFBd0IsYUFBYSxLQUFLLEtBQUssS0FBSyxPQUFPLGFBQWEsMEJBQTBCLG9CQUFvQixLQUFLLGlCQUFpQixLQUFLLEtBQUsseUJBQXlCLE9BQU8sTUFBTSxPQUFPLGdCQUFnQixRQUFRLE9BQU8sbUJBQW1CLHFCQUFxQiw2QkFBNkIsY0FBYyxTQUFTLFFBQVEsU0FBUyxXQUFXLFFBQVEscUJBQXFCLEtBQUssS0FBSyxzQkFBc0IsV0FBVyxPQUFPLE1BQU0sTUFBTSxTQUFTLFdBQVcsUUFBUSxNQUFNLFdBQVcsY0FBYyxrQkFBa0IsZ0JBQWdCLE1BQU0sbURBQW1ELFNBQVMsb0JBQW9CLDJCQUEyQixrQ0FBa0MsaUdBQWlHLHNCQUFzQix5QkFBeUIsY0FBYyxPQUFPLHVDQUF1Qyx5QkFBeUIsc0JBQXNCLGFBQWEsTUFBTSxNQUFNLFdBQVcsSUFBSSxLQUFLLElBQUksU0FBUyxRQUFRLFNBQVMsV0FBVyxpQkFBaUIsUUFBUSxLQUFLLEtBQUssS0FBSyxrQkFBa0IsV0FBVyxPQUFPLE1BQU0sTUFBTSxTQUFTLFdBQVcsUUFBUSxNQUFNLFdBQVcsY0FBYyxrQkFBa0IsZ0JBQWdCLE1BQU0sbURBQW1ELFdBQVcsdUNBQXVDLGlDQUFpQyxLQUFLLGFBQWEsb0JBQW9CLG9CQUFvQixLQUFLLG9CQUFvQixvQkFBb0IsbUJBQW1CLDRCQUE0QixvQkFBb0IsU0FBUyw4Q0FBOEMsVUFBVSxjQUFjLFNBQVMsZ0NBQWdDLFdBQVcsa0JBQWtCLGlCQUFpQixZQUFZLFlBQVksV0FBVyxJQUFJLHNDQUFzQyxRQUFRLFFBQVEsaUJBQWlCLGlCQUFpQixtRUFBbUUsU0FBUyxLQUFLLCtCQUErQixpQkFBaUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vbm9kZV9tb2R1bGVzL25leHQvZGlzdC9jb21waWxlZC9wYXRoLWJyb3dzZXJpZnkvaW5kZXguanM/M2NkMSJdLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjt2YXIgZT17OTc3OmZ1bmN0aW9uKGUpe2Z1bmN0aW9uIGFzc2VydFBhdGgoZSl7aWYodHlwZW9mIGUhPT1cInN0cmluZ1wiKXt0aHJvdyBuZXcgVHlwZUVycm9yKFwiUGF0aCBtdXN0IGJlIGEgc3RyaW5nLiBSZWNlaXZlZCBcIitKU09OLnN0cmluZ2lmeShlKSl9fWZ1bmN0aW9uIG5vcm1hbGl6ZVN0cmluZ1Bvc2l4KGUscil7dmFyIHQ9XCJcIjt2YXIgaT0wO3ZhciBuPS0xO3ZhciBhPTA7dmFyIGY7Zm9yKHZhciBsPTA7bDw9ZS5sZW5ndGg7KytsKXtpZihsPGUubGVuZ3RoKWY9ZS5jaGFyQ29kZUF0KGwpO2Vsc2UgaWYoZj09PTQ3KWJyZWFrO2Vsc2UgZj00NztpZihmPT09NDcpe2lmKG49PT1sLTF8fGE9PT0xKXt9ZWxzZSBpZihuIT09bC0xJiZhPT09Mil7aWYodC5sZW5ndGg8Mnx8aSE9PTJ8fHQuY2hhckNvZGVBdCh0Lmxlbmd0aC0xKSE9PTQ2fHx0LmNoYXJDb2RlQXQodC5sZW5ndGgtMikhPT00Nil7aWYodC5sZW5ndGg+Mil7dmFyIHM9dC5sYXN0SW5kZXhPZihcIi9cIik7aWYocyE9PXQubGVuZ3RoLTEpe2lmKHM9PT0tMSl7dD1cIlwiO2k9MH1lbHNle3Q9dC5zbGljZSgwLHMpO2k9dC5sZW5ndGgtMS10Lmxhc3RJbmRleE9mKFwiL1wiKX1uPWw7YT0wO2NvbnRpbnVlfX1lbHNlIGlmKHQubGVuZ3RoPT09Mnx8dC5sZW5ndGg9PT0xKXt0PVwiXCI7aT0wO249bDthPTA7Y29udGludWV9fWlmKHIpe2lmKHQubGVuZ3RoPjApdCs9XCIvLi5cIjtlbHNlIHQ9XCIuLlwiO2k9Mn19ZWxzZXtpZih0Lmxlbmd0aD4wKXQrPVwiL1wiK2Uuc2xpY2UobisxLGwpO2Vsc2UgdD1lLnNsaWNlKG4rMSxsKTtpPWwtbi0xfW49bDthPTB9ZWxzZSBpZihmPT09NDYmJmEhPT0tMSl7KythfWVsc2V7YT0tMX19cmV0dXJuIHR9ZnVuY3Rpb24gX2Zvcm1hdChlLHIpe3ZhciB0PXIuZGlyfHxyLnJvb3Q7dmFyIGk9ci5iYXNlfHwoci5uYW1lfHxcIlwiKSsoci5leHR8fFwiXCIpO2lmKCF0KXtyZXR1cm4gaX1pZih0PT09ci5yb290KXtyZXR1cm4gdCtpfXJldHVybiB0K2UraX12YXIgcj17cmVzb2x2ZTpmdW5jdGlvbiByZXNvbHZlKCl7dmFyIGU9XCJcIjt2YXIgcj1mYWxzZTt2YXIgdDtmb3IodmFyIGk9YXJndW1lbnRzLmxlbmd0aC0xO2k+PS0xJiYhcjtpLS0pe3ZhciBuO2lmKGk+PTApbj1hcmd1bWVudHNbaV07ZWxzZXtpZih0PT09dW5kZWZpbmVkKXQ9cHJvY2Vzcy5jd2QoKTtuPXR9YXNzZXJ0UGF0aChuKTtpZihuLmxlbmd0aD09PTApe2NvbnRpbnVlfWU9bitcIi9cIitlO3I9bi5jaGFyQ29kZUF0KDApPT09NDd9ZT1ub3JtYWxpemVTdHJpbmdQb3NpeChlLCFyKTtpZihyKXtpZihlLmxlbmd0aD4wKXJldHVyblwiL1wiK2U7ZWxzZSByZXR1cm5cIi9cIn1lbHNlIGlmKGUubGVuZ3RoPjApe3JldHVybiBlfWVsc2V7cmV0dXJuXCIuXCJ9fSxub3JtYWxpemU6ZnVuY3Rpb24gbm9ybWFsaXplKGUpe2Fzc2VydFBhdGgoZSk7aWYoZS5sZW5ndGg9PT0wKXJldHVyblwiLlwiO3ZhciByPWUuY2hhckNvZGVBdCgwKT09PTQ3O3ZhciB0PWUuY2hhckNvZGVBdChlLmxlbmd0aC0xKT09PTQ3O2U9bm9ybWFsaXplU3RyaW5nUG9zaXgoZSwhcik7aWYoZS5sZW5ndGg9PT0wJiYhcillPVwiLlwiO2lmKGUubGVuZ3RoPjAmJnQpZSs9XCIvXCI7aWYocilyZXR1cm5cIi9cIitlO3JldHVybiBlfSxpc0Fic29sdXRlOmZ1bmN0aW9uIGlzQWJzb2x1dGUoZSl7YXNzZXJ0UGF0aChlKTtyZXR1cm4gZS5sZW5ndGg+MCYmZS5jaGFyQ29kZUF0KDApPT09NDd9LGpvaW46ZnVuY3Rpb24gam9pbigpe2lmKGFyZ3VtZW50cy5sZW5ndGg9PT0wKXJldHVyblwiLlwiO3ZhciBlO2Zvcih2YXIgdD0wO3Q8YXJndW1lbnRzLmxlbmd0aDsrK3Qpe3ZhciBpPWFyZ3VtZW50c1t0XTthc3NlcnRQYXRoKGkpO2lmKGkubGVuZ3RoPjApe2lmKGU9PT11bmRlZmluZWQpZT1pO2Vsc2UgZSs9XCIvXCIraX19aWYoZT09PXVuZGVmaW5lZClyZXR1cm5cIi5cIjtyZXR1cm4gci5ub3JtYWxpemUoZSl9LHJlbGF0aXZlOmZ1bmN0aW9uIHJlbGF0aXZlKGUsdCl7YXNzZXJ0UGF0aChlKTthc3NlcnRQYXRoKHQpO2lmKGU9PT10KXJldHVyblwiXCI7ZT1yLnJlc29sdmUoZSk7dD1yLnJlc29sdmUodCk7aWYoZT09PXQpcmV0dXJuXCJcIjt2YXIgaT0xO2Zvcig7aTxlLmxlbmd0aDsrK2kpe2lmKGUuY2hhckNvZGVBdChpKSE9PTQ3KWJyZWFrfXZhciBuPWUubGVuZ3RoO3ZhciBhPW4taTt2YXIgZj0xO2Zvcig7Zjx0Lmxlbmd0aDsrK2Ype2lmKHQuY2hhckNvZGVBdChmKSE9PTQ3KWJyZWFrfXZhciBsPXQubGVuZ3RoO3ZhciBzPWwtZjt2YXIgbz1hPHM/YTpzO3ZhciB1PS0xO3ZhciBoPTA7Zm9yKDtoPD1vOysraCl7aWYoaD09PW8pe2lmKHM+byl7aWYodC5jaGFyQ29kZUF0KGYraCk9PT00Nyl7cmV0dXJuIHQuc2xpY2UoZitoKzEpfWVsc2UgaWYoaD09PTApe3JldHVybiB0LnNsaWNlKGYraCl9fWVsc2UgaWYoYT5vKXtpZihlLmNoYXJDb2RlQXQoaStoKT09PTQ3KXt1PWh9ZWxzZSBpZihoPT09MCl7dT0wfX1icmVha312YXIgYz1lLmNoYXJDb2RlQXQoaStoKTt2YXIgdj10LmNoYXJDb2RlQXQoZitoKTtpZihjIT09dilicmVhaztlbHNlIGlmKGM9PT00Nyl1PWh9dmFyIGc9XCJcIjtmb3IoaD1pK3UrMTtoPD1uOysraCl7aWYoaD09PW58fGUuY2hhckNvZGVBdChoKT09PTQ3KXtpZihnLmxlbmd0aD09PTApZys9XCIuLlwiO2Vsc2UgZys9XCIvLi5cIn19aWYoZy5sZW5ndGg+MClyZXR1cm4gZyt0LnNsaWNlKGYrdSk7ZWxzZXtmKz11O2lmKHQuY2hhckNvZGVBdChmKT09PTQ3KSsrZjtyZXR1cm4gdC5zbGljZShmKX19LF9tYWtlTG9uZzpmdW5jdGlvbiBfbWFrZUxvbmcoZSl7cmV0dXJuIGV9LGRpcm5hbWU6ZnVuY3Rpb24gZGlybmFtZShlKXthc3NlcnRQYXRoKGUpO2lmKGUubGVuZ3RoPT09MClyZXR1cm5cIi5cIjt2YXIgcj1lLmNoYXJDb2RlQXQoMCk7dmFyIHQ9cj09PTQ3O3ZhciBpPS0xO3ZhciBuPXRydWU7Zm9yKHZhciBhPWUubGVuZ3RoLTE7YT49MTstLWEpe3I9ZS5jaGFyQ29kZUF0KGEpO2lmKHI9PT00Nyl7aWYoIW4pe2k9YTticmVha319ZWxzZXtuPWZhbHNlfX1pZihpPT09LTEpcmV0dXJuIHQ/XCIvXCI6XCIuXCI7aWYodCYmaT09PTEpcmV0dXJuXCIvL1wiO3JldHVybiBlLnNsaWNlKDAsaSl9LGJhc2VuYW1lOmZ1bmN0aW9uIGJhc2VuYW1lKGUscil7aWYociE9PXVuZGVmaW5lZCYmdHlwZW9mIHIhPT1cInN0cmluZ1wiKXRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZXh0XCIgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZycpO2Fzc2VydFBhdGgoZSk7dmFyIHQ9MDt2YXIgaT0tMTt2YXIgbj10cnVlO3ZhciBhO2lmKHIhPT11bmRlZmluZWQmJnIubGVuZ3RoPjAmJnIubGVuZ3RoPD1lLmxlbmd0aCl7aWYoci5sZW5ndGg9PT1lLmxlbmd0aCYmcj09PWUpcmV0dXJuXCJcIjt2YXIgZj1yLmxlbmd0aC0xO3ZhciBsPS0xO2ZvcihhPWUubGVuZ3RoLTE7YT49MDstLWEpe3ZhciBzPWUuY2hhckNvZGVBdChhKTtpZihzPT09NDcpe2lmKCFuKXt0PWErMTticmVha319ZWxzZXtpZihsPT09LTEpe249ZmFsc2U7bD1hKzF9aWYoZj49MCl7aWYocz09PXIuY2hhckNvZGVBdChmKSl7aWYoLS1mPT09LTEpe2k9YX19ZWxzZXtmPS0xO2k9bH19fX1pZih0PT09aSlpPWw7ZWxzZSBpZihpPT09LTEpaT1lLmxlbmd0aDtyZXR1cm4gZS5zbGljZSh0LGkpfWVsc2V7Zm9yKGE9ZS5sZW5ndGgtMTthPj0wOy0tYSl7aWYoZS5jaGFyQ29kZUF0KGEpPT09NDcpe2lmKCFuKXt0PWErMTticmVha319ZWxzZSBpZihpPT09LTEpe249ZmFsc2U7aT1hKzF9fWlmKGk9PT0tMSlyZXR1cm5cIlwiO3JldHVybiBlLnNsaWNlKHQsaSl9fSxleHRuYW1lOmZ1bmN0aW9uIGV4dG5hbWUoZSl7YXNzZXJ0UGF0aChlKTt2YXIgcj0tMTt2YXIgdD0wO3ZhciBpPS0xO3ZhciBuPXRydWU7dmFyIGE9MDtmb3IodmFyIGY9ZS5sZW5ndGgtMTtmPj0wOy0tZil7dmFyIGw9ZS5jaGFyQ29kZUF0KGYpO2lmKGw9PT00Nyl7aWYoIW4pe3Q9ZisxO2JyZWFrfWNvbnRpbnVlfWlmKGk9PT0tMSl7bj1mYWxzZTtpPWYrMX1pZihsPT09NDYpe2lmKHI9PT0tMSlyPWY7ZWxzZSBpZihhIT09MSlhPTF9ZWxzZSBpZihyIT09LTEpe2E9LTF9fWlmKHI9PT0tMXx8aT09PS0xfHxhPT09MHx8YT09PTEmJnI9PT1pLTEmJnI9PT10KzEpe3JldHVyblwiXCJ9cmV0dXJuIGUuc2xpY2UocixpKX0sZm9ybWF0OmZ1bmN0aW9uIGZvcm1hdChlKXtpZihlPT09bnVsbHx8dHlwZW9mIGUhPT1cIm9iamVjdFwiKXt0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgXCJwYXRoT2JqZWN0XCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIE9iamVjdC4gUmVjZWl2ZWQgdHlwZSAnK3R5cGVvZiBlKX1yZXR1cm4gX2Zvcm1hdChcIi9cIixlKX0scGFyc2U6ZnVuY3Rpb24gcGFyc2UoZSl7YXNzZXJ0UGF0aChlKTt2YXIgcj17cm9vdDpcIlwiLGRpcjpcIlwiLGJhc2U6XCJcIixleHQ6XCJcIixuYW1lOlwiXCJ9O2lmKGUubGVuZ3RoPT09MClyZXR1cm4gcjt2YXIgdD1lLmNoYXJDb2RlQXQoMCk7dmFyIGk9dD09PTQ3O3ZhciBuO2lmKGkpe3Iucm9vdD1cIi9cIjtuPTF9ZWxzZXtuPTB9dmFyIGE9LTE7dmFyIGY9MDt2YXIgbD0tMTt2YXIgcz10cnVlO3ZhciBvPWUubGVuZ3RoLTE7dmFyIHU9MDtmb3IoO28+PW47LS1vKXt0PWUuY2hhckNvZGVBdChvKTtpZih0PT09NDcpe2lmKCFzKXtmPW8rMTticmVha31jb250aW51ZX1pZihsPT09LTEpe3M9ZmFsc2U7bD1vKzF9aWYodD09PTQ2KXtpZihhPT09LTEpYT1vO2Vsc2UgaWYodSE9PTEpdT0xfWVsc2UgaWYoYSE9PS0xKXt1PS0xfX1pZihhPT09LTF8fGw9PT0tMXx8dT09PTB8fHU9PT0xJiZhPT09bC0xJiZhPT09ZisxKXtpZihsIT09LTEpe2lmKGY9PT0wJiZpKXIuYmFzZT1yLm5hbWU9ZS5zbGljZSgxLGwpO2Vsc2Ugci5iYXNlPXIubmFtZT1lLnNsaWNlKGYsbCl9fWVsc2V7aWYoZj09PTAmJmkpe3IubmFtZT1lLnNsaWNlKDEsYSk7ci5iYXNlPWUuc2xpY2UoMSxsKX1lbHNle3IubmFtZT1lLnNsaWNlKGYsYSk7ci5iYXNlPWUuc2xpY2UoZixsKX1yLmV4dD1lLnNsaWNlKGEsbCl9aWYoZj4wKXIuZGlyPWUuc2xpY2UoMCxmLTEpO2Vsc2UgaWYoaSlyLmRpcj1cIi9cIjtyZXR1cm4gcn0sc2VwOlwiL1wiLGRlbGltaXRlcjpcIjpcIix3aW4zMjpudWxsLHBvc2l4Om51bGx9O3IucG9zaXg9cjtlLmV4cG9ydHM9cn19O3ZhciByPXt9O2Z1bmN0aW9uIF9fbmNjd3Bja19yZXF1aXJlX18odCl7dmFyIGk9clt0XTtpZihpIT09dW5kZWZpbmVkKXtyZXR1cm4gaS5leHBvcnRzfXZhciBuPXJbdF09e2V4cG9ydHM6e319O3ZhciBhPXRydWU7dHJ5e2VbdF0obixuLmV4cG9ydHMsX19uY2N3cGNrX3JlcXVpcmVfXyk7YT1mYWxzZX1maW5hbGx5e2lmKGEpZGVsZXRlIHJbdF19cmV0dXJuIG4uZXhwb3J0c31pZih0eXBlb2YgX19uY2N3cGNrX3JlcXVpcmVfXyE9PVwidW5kZWZpbmVkXCIpX19uY2N3cGNrX3JlcXVpcmVfXy5hYj1fX2Rpcm5hbWUrXCIvXCI7dmFyIHQ9X19uY2N3cGNrX3JlcXVpcmVfXyg5NzcpO21vZHVsZS5leHBvcnRzPXR9KSgpOyJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/next/dist/compiled/path-browserify/index.js\n");

/***/ }),

/***/ "./node_modules/next/dist/compiled/querystring-es3/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/compiled/querystring-es3/index.js ***!
  \******************************************************************/
/***/ (function(module) {

eval("var __dirname = \"/\";\n(function(){\"use strict\";var e={540:function(e){function hasOwnProperty(e,r){return Object.prototype.hasOwnProperty.call(e,r)}e.exports=function(e,n,t,o){n=n||\"&\";t=t||\"=\";var a={};if(typeof e!==\"string\"||e.length===0){return a}var i=/\\+/g;e=e.split(n);var u=1e3;if(o&&typeof o.maxKeys===\"number\"){u=o.maxKeys}var c=e.length;if(u>0&&c>u){c=u}for(var p=0;p<c;++p){var f=e[p].replace(i,\"%20\"),s=f.indexOf(t),_,l,y,d;if(s>=0){_=f.substr(0,s);l=f.substr(s+1)}else{_=f;l=\"\"}y=decodeURIComponent(_);d=decodeURIComponent(l);if(!hasOwnProperty(a,y)){a[y]=d}else if(r(a[y])){a[y].push(d)}else{a[y]=[a[y],d]}}return a};var r=Array.isArray||function(e){return Object.prototype.toString.call(e)===\"[object Array]\"}},128:function(e){var stringifyPrimitive=function(e){switch(typeof e){case\"string\":return e;case\"boolean\":return e?\"true\":\"false\";case\"number\":return isFinite(e)?e:\"\";default:return\"\"}};e.exports=function(e,t,o,a){t=t||\"&\";o=o||\"=\";if(e===null){e=undefined}if(typeof e===\"object\"){return map(n(e),(function(n){var a=encodeURIComponent(stringifyPrimitive(n))+o;if(r(e[n])){return map(e[n],(function(e){return a+encodeURIComponent(stringifyPrimitive(e))})).join(t)}else{return a+encodeURIComponent(stringifyPrimitive(e[n]))}})).join(t)}if(!a)return\"\";return encodeURIComponent(stringifyPrimitive(a))+o+encodeURIComponent(stringifyPrimitive(e))};var r=Array.isArray||function(e){return Object.prototype.toString.call(e)===\"[object Array]\"};function map(e,r){if(e.map)return e.map(r);var n=[];for(var t=0;t<e.length;t++){n.push(r(e[t],t))}return n}var n=Object.keys||function(e){var r=[];for(var n in e){if(Object.prototype.hasOwnProperty.call(e,n))r.push(n)}return r}}};var r={};function __nccwpck_require__(n){var t=r[n];if(t!==undefined){return t.exports}var o=r[n]={exports:{}};var a=true;try{e[n](o,o.exports,__nccwpck_require__);a=false}finally{if(a)delete r[n]}return o.exports}if(typeof __nccwpck_require__!==\"undefined\")__nccwpck_require__.ab=__dirname+\"/\";var n={};!function(){var e=n;e.decode=e.parse=__nccwpck_require__(540);e.encode=e.stringify=__nccwpck_require__(128)}();module.exports=n})();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2NvbXBpbGVkL3F1ZXJ5c3RyaW5nLWVzMy9pbmRleC5qcy5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsWUFBWSxhQUFhLE9BQU8sZ0JBQWdCLDZCQUE2QixpREFBaUQsNEJBQTRCLFNBQVMsU0FBUyxTQUFTLHNDQUFzQyxTQUFTLFlBQVksYUFBYSxVQUFVLG1DQUFtQyxZQUFZLGVBQWUsYUFBYSxJQUFJLFlBQVksSUFBSSxLQUFLLG1EQUFtRCxTQUFTLGdCQUFnQixnQkFBZ0IsS0FBSyxJQUFJLEtBQUssd0JBQXdCLHdCQUF3Qix5QkFBeUIsT0FBTyxpQkFBaUIsYUFBYSxLQUFLLGVBQWUsVUFBVSxpQ0FBaUMsNkRBQTZELGlCQUFpQixtQ0FBbUMsaUJBQWlCLHNCQUFzQixzQ0FBc0MscUNBQXFDLG1CQUFtQiw0QkFBNEIsU0FBUyxTQUFTLGFBQWEsWUFBWSx3QkFBd0IsNkJBQTZCLGtEQUFrRCxZQUFZLDZCQUE2QixtREFBbUQsV0FBVyxLQUFLLHVEQUF1RCxXQUFXLGVBQWUsOEZBQThGLGlDQUFpQyw2REFBNkQsa0JBQWtCLHlCQUF5QixTQUFTLFlBQVksV0FBVyxLQUFLLGtCQUFrQixTQUFTLCtCQUErQixTQUFTLGdCQUFnQix1REFBdUQsWUFBWSxTQUFTLGdDQUFnQyxXQUFXLGtCQUFrQixpQkFBaUIsWUFBWSxZQUFZLFdBQVcsSUFBSSxzQ0FBc0MsUUFBUSxRQUFRLGlCQUFpQixpQkFBaUIsbUVBQW1FLFNBQVMsS0FBSyxTQUFTLFlBQVksUUFBUSwwQ0FBMEMsOENBQThDLEdBQUcsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvY29tcGlsZWQvcXVlcnlzdHJpbmctZXMzL2luZGV4LmpzPzI0MWYiXSwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7dmFyIGU9ezU0MDpmdW5jdGlvbihlKXtmdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShlLHIpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxyKX1lLmV4cG9ydHM9ZnVuY3Rpb24oZSxuLHQsbyl7bj1ufHxcIiZcIjt0PXR8fFwiPVwiO3ZhciBhPXt9O2lmKHR5cGVvZiBlIT09XCJzdHJpbmdcInx8ZS5sZW5ndGg9PT0wKXtyZXR1cm4gYX12YXIgaT0vXFwrL2c7ZT1lLnNwbGl0KG4pO3ZhciB1PTFlMztpZihvJiZ0eXBlb2Ygby5tYXhLZXlzPT09XCJudW1iZXJcIil7dT1vLm1heEtleXN9dmFyIGM9ZS5sZW5ndGg7aWYodT4wJiZjPnUpe2M9dX1mb3IodmFyIHA9MDtwPGM7KytwKXt2YXIgZj1lW3BdLnJlcGxhY2UoaSxcIiUyMFwiKSxzPWYuaW5kZXhPZih0KSxfLGwseSxkO2lmKHM+PTApe189Zi5zdWJzdHIoMCxzKTtsPWYuc3Vic3RyKHMrMSl9ZWxzZXtfPWY7bD1cIlwifXk9ZGVjb2RlVVJJQ29tcG9uZW50KF8pO2Q9ZGVjb2RlVVJJQ29tcG9uZW50KGwpO2lmKCFoYXNPd25Qcm9wZXJ0eShhLHkpKXthW3ldPWR9ZWxzZSBpZihyKGFbeV0pKXthW3ldLnB1c2goZCl9ZWxzZXthW3ldPVthW3ldLGRdfX1yZXR1cm4gYX07dmFyIHI9QXJyYXkuaXNBcnJheXx8ZnVuY3Rpb24oZSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChlKT09PVwiW29iamVjdCBBcnJheV1cIn19LDEyODpmdW5jdGlvbihlKXt2YXIgc3RyaW5naWZ5UHJpbWl0aXZlPWZ1bmN0aW9uKGUpe3N3aXRjaCh0eXBlb2YgZSl7Y2FzZVwic3RyaW5nXCI6cmV0dXJuIGU7Y2FzZVwiYm9vbGVhblwiOnJldHVybiBlP1widHJ1ZVwiOlwiZmFsc2VcIjtjYXNlXCJudW1iZXJcIjpyZXR1cm4gaXNGaW5pdGUoZSk/ZTpcIlwiO2RlZmF1bHQ6cmV0dXJuXCJcIn19O2UuZXhwb3J0cz1mdW5jdGlvbihlLHQsbyxhKXt0PXR8fFwiJlwiO289b3x8XCI9XCI7aWYoZT09PW51bGwpe2U9dW5kZWZpbmVkfWlmKHR5cGVvZiBlPT09XCJvYmplY3RcIil7cmV0dXJuIG1hcChuKGUpLChmdW5jdGlvbihuKXt2YXIgYT1lbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG4pKStvO2lmKHIoZVtuXSkpe3JldHVybiBtYXAoZVtuXSwoZnVuY3Rpb24oZSl7cmV0dXJuIGErZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShlKSl9KSkuam9pbih0KX1lbHNle3JldHVybiBhK2VuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUoZVtuXSkpfX0pKS5qb2luKHQpfWlmKCFhKXJldHVyblwiXCI7cmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChzdHJpbmdpZnlQcmltaXRpdmUoYSkpK28rZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShlKSl9O3ZhciByPUFycmF5LmlzQXJyYXl8fGZ1bmN0aW9uKGUpe3JldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZSk9PT1cIltvYmplY3QgQXJyYXldXCJ9O2Z1bmN0aW9uIG1hcChlLHIpe2lmKGUubWFwKXJldHVybiBlLm1hcChyKTt2YXIgbj1bXTtmb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrKyl7bi5wdXNoKHIoZVt0XSx0KSl9cmV0dXJuIG59dmFyIG49T2JqZWN0LmtleXN8fGZ1bmN0aW9uKGUpe3ZhciByPVtdO2Zvcih2YXIgbiBpbiBlKXtpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSxuKSlyLnB1c2gobil9cmV0dXJuIHJ9fX07dmFyIHI9e307ZnVuY3Rpb24gX19uY2N3cGNrX3JlcXVpcmVfXyhuKXt2YXIgdD1yW25dO2lmKHQhPT11bmRlZmluZWQpe3JldHVybiB0LmV4cG9ydHN9dmFyIG89cltuXT17ZXhwb3J0czp7fX07dmFyIGE9dHJ1ZTt0cnl7ZVtuXShvLG8uZXhwb3J0cyxfX25jY3dwY2tfcmVxdWlyZV9fKTthPWZhbHNlfWZpbmFsbHl7aWYoYSlkZWxldGUgcltuXX1yZXR1cm4gby5leHBvcnRzfWlmKHR5cGVvZiBfX25jY3dwY2tfcmVxdWlyZV9fIT09XCJ1bmRlZmluZWRcIilfX25jY3dwY2tfcmVxdWlyZV9fLmFiPV9fZGlybmFtZStcIi9cIjt2YXIgbj17fTshZnVuY3Rpb24oKXt2YXIgZT1uO2UuZGVjb2RlPWUucGFyc2U9X19uY2N3cGNrX3JlcXVpcmVfXyg1NDApO2UuZW5jb2RlPWUuc3RyaW5naWZ5PV9fbmNjd3Bja19yZXF1aXJlX18oMTI4KX0oKTttb2R1bGUuZXhwb3J0cz1ufSkoKTsiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/next/dist/compiled/querystring-es3/index.js\n");

/***/ }),

/***/ "./node_modules/parse-headers/parse-headers.js":
/*!*****************************************************!*\
  !*** ./node_modules/parse-headers/parse-headers.js ***!
  \*****************************************************/
/***/ (function(module) {

eval("var trim = function(string) {\n  return string.replace(/^\\s+|\\s+$/g, '');\n}\n  , isArray = function(arg) {\n      return Object.prototype.toString.call(arg) === '[object Array]';\n    }\n\nmodule.exports = function (headers) {\n  if (!headers)\n    return {}\n\n  var result = {}\n\n  var headersArr = trim(headers).split('\\n')\n\n  for (var i = 0; i < headersArr.length; i++) {\n    var row = headersArr[i]\n    var index = row.indexOf(':')\n    , key = trim(row.slice(0, index)).toLowerCase()\n    , value = trim(row.slice(index + 1))\n\n    if (typeof(result[key]) === 'undefined') {\n      result[key] = value\n    } else if (isArray(result[key])) {\n      result[key].push(value)\n    } else {\n      result[key] = [ result[key], value ]\n    }\n  }\n\n  return result\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcGFyc2UtaGVhZGVycy9wYXJzZS1oZWFkZXJzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUEsa0JBQWtCLHVCQUF1QjtBQUN6QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy9wYXJzZS1oZWFkZXJzL3BhcnNlLWhlYWRlcnMuanM/MWUwYiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgdHJpbSA9IGZ1bmN0aW9uKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKTtcbn1cbiAgLCBpc0FycmF5ID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZykgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gICAgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChoZWFkZXJzKSB7XG4gIGlmICghaGVhZGVycylcbiAgICByZXR1cm4ge31cblxuICB2YXIgcmVzdWx0ID0ge31cblxuICB2YXIgaGVhZGVyc0FyciA9IHRyaW0oaGVhZGVycykuc3BsaXQoJ1xcbicpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBoZWFkZXJzQXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHJvdyA9IGhlYWRlcnNBcnJbaV1cbiAgICB2YXIgaW5kZXggPSByb3cuaW5kZXhPZignOicpXG4gICAgLCBrZXkgPSB0cmltKHJvdy5zbGljZSgwLCBpbmRleCkpLnRvTG93ZXJDYXNlKClcbiAgICAsIHZhbHVlID0gdHJpbShyb3cuc2xpY2UoaW5kZXggKyAxKSlcblxuICAgIGlmICh0eXBlb2YocmVzdWx0W2tleV0pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZVxuICAgIH0gZWxzZSBpZiAoaXNBcnJheShyZXN1bHRba2V5XSkpIHtcbiAgICAgIHJlc3VsdFtrZXldLnB1c2godmFsdWUpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gWyByZXN1bHRba2V5XSwgdmFsdWUgXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHRcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/parse-headers/parse-headers.js\n");

/***/ }),

/***/ "./node_modules/x3-linkedlist/dist/LinkedList.js":
/*!*******************************************************!*\
  !*** ./node_modules/x3-linkedlist/dist/LinkedList.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst LinkedListItem_1 = __webpack_require__(/*! ./LinkedListItem */ \"./node_modules/x3-linkedlist/dist/LinkedListItem.js\");\r\n/**\r\n * Implements a linked list structure\r\n * @typeparam T Type of values within this LinkedList\r\n */\r\nclass LinkedList {\r\n    /**\r\n     * @param values Values to be added upfront into list\r\n     */\r\n    constructor(values) {\r\n        /**\r\n         * Current length of this LinkedList.\r\n         * Note that this does not work anymore if you for some reason add your own LinkedListItems to LinkedList by hand\r\n         */\r\n        this.length = 0;\r\n        /**\r\n         * Given to own LinkedListItem's for following jobs regarding an unlink:\r\n         * - If item is first item, set the next item as first item\r\n         * - If item is last item, set the previous item as last item\r\n         * - Decrease length\r\n         * @param item Item that has been unlinked\r\n         */\r\n        this.unlinkCleanup = (item) => {\r\n            if (this.first === item) {\r\n                this.first = this.first.behind;\r\n            }\r\n            if (this.last === item) {\r\n                this.last = this.last.before;\r\n            }\r\n            this.length--;\r\n        };\r\n        if (values) {\r\n            if (values instanceof LinkedList)\r\n                values = values.values();\r\n            for (const value of values) {\r\n                this.push(value);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Clears this LinkedList.\r\n     * The default complexity is O(1), because it only removes links to the first and last item and resets the length.\r\n     * Note that if any LinkedListItem is still referenced outside the LinkedList, their before and behind fields might\r\n     * still reference the chain, not freeing space.\r\n     * You can set the unchain parameter to true, so every item in the linked list will be unchained,\r\n     * meaning all references to before and behind items will be removed.\r\n     * This increases complexity to O(n), but removes accidental outside references to the full chain.\r\n     * @param unchain If `true`, remove link info from every item. Changes complexity to O(n)!\r\n     */\r\n    clear(unchain = false) {\r\n        if (unchain) {\r\n            while (this.first) {\r\n                this.first.unlink(true);\r\n            }\r\n        }\r\n        this.first = this.last = undefined;\r\n        this.length = 0;\r\n    }\r\n    /**\r\n     * As Array#every() given callback is called for every element until one call returns falsy or all elements had been processed\r\n     * @returns `false` if there was a falsy response from the callback, `true` if all elements have been processed \"falselesly\"\r\n     * @see Array#every\r\n     */\r\n    every(callback, thisArg) {\r\n        if (thisArg) {\r\n            callback = callback.bind(thisArg);\r\n        }\r\n        for (const item of this.keys()) {\r\n            if (!callback(item.value, item, this)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Filters values into a new LinkedList\r\n     * @param callback decides wether given element should be part of new LinkedList\r\n     * @see Array#filter\r\n     */\r\n    filter(callback, thisArg) {\r\n        if (thisArg) {\r\n            callback = callback.bind(thisArg);\r\n        }\r\n        const newList = new LinkedList();\r\n        for (const [item, value] of this) {\r\n            if (callback(value, item, this)) {\r\n                newList.push(value);\r\n            }\r\n        }\r\n        return newList;\r\n    }\r\n    /**\r\n     * Returns value for which given callback returns truthy\r\n     * @param callback runs for every value in LinkedList. If it returns truthy, current value is returned.\r\n     * @see Array#find\r\n     */\r\n    find(callback, thisArg) {\r\n        if (thisArg) {\r\n            callback = callback.bind(thisArg);\r\n        }\r\n        for (const [item, value] of this) {\r\n            if (callback(value, item, this)) {\r\n                return value;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Returns the LinkedListItem for which given callback returns truthy\r\n     * @param callback runs for every LinkedListItem in LinkedList. If it returns truthy, current LinkedListItem is returned.\r\n     * @see Array#findIndex\r\n     */\r\n    findItem(callback, thisArg) {\r\n        if (thisArg) {\r\n            callback = callback.bind(thisArg);\r\n        }\r\n        for (const [item, value] of this) {\r\n            if (callback(value, item, this)) {\r\n                return item;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Iterates this LinkedList's items and values\r\n     * @param callback Gets every value in LinkedList once with corresponding LinkedListItem and LinkedList\r\n     * @param thisArg If given, callback will be bound here\r\n     * @see Array#forEach\r\n     */\r\n    forEach(callback, thisArg) {\r\n        if (thisArg) {\r\n            callback = callback.bind(thisArg);\r\n        }\r\n        for (const [item, value] of this) {\r\n            callback(value, item, this);\r\n        }\r\n    }\r\n    /**\r\n     * Checks if value can be found within LinkedList, starting from fromIndex, if given.\r\n     * @param value value to be found in this\r\n     * @param fromIndex Starting index. Supports negative values for which `this.size - 1 + fromIndex` will be used as starting point.\r\n     * @returns true if value could be found in LinkedList (respecting fromIndex), false otherwhise\r\n     * @see Array#includes\r\n     */\r\n    includes(value, fromIndex = 0) {\r\n        let current = this.getItemByIndex(fromIndex);\r\n        while (current) {\r\n            if (current.value === value) {\r\n                return true;\r\n            }\r\n            current = current.behind;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Searches forward for given value and returns the first corresponding LinkedListItem found\r\n     * @param searchedValue Value to be found\r\n     * @param fromIndex Index to start from\r\n     * @see Array#indexOf\r\n     */\r\n    itemOf(searchedValue, fromIndex = 0) {\r\n        let current = this.getItemByIndex(fromIndex);\r\n        while (current) {\r\n            if (current.value === searchedValue) {\r\n                return current;\r\n            }\r\n            current = current.behind;\r\n        }\r\n        return;\r\n    }\r\n    /**\r\n     * Searches backwards for given value and returns the first corresponding LinkedListItem found\r\n     * @param searchedValue Value to be found\r\n     * @param fromIndex Index to start from\r\n     * @see Array#indexOf\r\n     */\r\n    lastItemOf(searchedValue, fromIndex = -1) {\r\n        let current = this.getItemByIndex(fromIndex);\r\n        while (current) {\r\n            if (current.value === searchedValue) {\r\n                return current;\r\n            }\r\n            current = current.before;\r\n        }\r\n        return;\r\n    }\r\n    /**\r\n     * Creates a new LinkedList with each of its itesm representing the output of the callback with each item in current LinkedList.\r\n     * @param callback Gets value, LinkedListeItem and LinkedList. The response will be used as value in the new LinkedList\r\n     * @param thisArg If given, callback is bound to thisArg\r\n     * @see Array#map\r\n     */\r\n    map(callback, thisArg) {\r\n        if (thisArg) {\r\n            callback = callback.bind(thisArg);\r\n        }\r\n        const newList = new LinkedList();\r\n        for (const [item, value] of this) {\r\n            newList.push(callback(value, item, this));\r\n        }\r\n        return newList;\r\n    }\r\n    reduce(callback, initialValue) {\r\n        let current = this.first;\r\n        if (!current) {\r\n            if (!initialValue) {\r\n                throw new TypeError(\"Empty accumulator on empty LinkedList is not allowed.\");\r\n            }\r\n            return initialValue;\r\n        }\r\n        if (initialValue === undefined) {\r\n            initialValue = current.value;\r\n            if (!current.behind) {\r\n                return initialValue;\r\n            }\r\n            current = current.behind;\r\n        }\r\n        do {\r\n            initialValue = callback(initialValue, current.value, current, this);\r\n            current = current.behind;\r\n        } while (current);\r\n        return initialValue;\r\n    }\r\n    reduceRight(callback, initialValue) {\r\n        let current = this.last;\r\n        if (!current) {\r\n            if (!initialValue) {\r\n                throw new TypeError(\"Empty accumulator on empty LinkedList is not allowed.\");\r\n            }\r\n            return initialValue;\r\n        }\r\n        // let accumulator: V | T;\r\n        if (initialValue === undefined) {\r\n            initialValue = current.value;\r\n            if (!current.before) {\r\n                return initialValue;\r\n            }\r\n            current = current.before;\r\n        }\r\n        do {\r\n            initialValue = callback(initialValue, current.value, current, this);\r\n            current = current.before;\r\n        } while (current);\r\n        return initialValue;\r\n    }\r\n    /**\r\n     * Runs callback for every entry and returns true immediately if call of callback returns truthy.\r\n     * @param callback called for every element. If response is truthy, iteration\r\n     * @param thisArg If set, callback is bound to this\r\n     * @returns `true` once a callback call returns truthy, `false` if none returned truthy.\r\n     */\r\n    some(callback, thisArg) {\r\n        if (thisArg) {\r\n            callback = callback.bind(thisArg);\r\n        }\r\n        for (const [item, value] of this) {\r\n            if (callback(value, item, this)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Joins values within this by given separator. Uses Array#join directly.\r\n     * @param separator separator to be used\r\n     * @see Array#join\r\n     */\r\n    join(separator) {\r\n        return [...this.values()].join(separator);\r\n    }\r\n    /**\r\n     * Concats given values and returns a new LinkedList with all given values.\r\n     * If LinkedList's are given, they will be spread.\r\n     * @param others Other values or lists to be concat'ed together\r\n     * @see Array#concat\r\n     */\r\n    concat(...others) {\r\n        const newList = new LinkedList(this);\r\n        for (const other of others) {\r\n            if (other instanceof LinkedList) {\r\n                newList.push(...other.values());\r\n            }\r\n            else {\r\n                newList.push(other);\r\n            }\r\n        }\r\n        return newList;\r\n    }\r\n    /**\r\n     * Removes the last LinkedListItem and returns its inner value\r\n     */\r\n    pop() {\r\n        if (!this.last) {\r\n            return;\r\n        }\r\n        const item = this.last;\r\n        item.unlink();\r\n        return item.value;\r\n    }\r\n    /**\r\n     * Adds given values on the end of this LinkedList\r\n     * @param values Values to be added\r\n     */\r\n    push(...values) {\r\n        for (const value of values) {\r\n            const item = new LinkedListItem_1.LinkedListItem(value, this.unlinkCleanup);\r\n            if (!this.first || !this.last) {\r\n                this.first = this.last = item;\r\n            }\r\n            else {\r\n                this.last.insertBehind(item);\r\n                this.last = item;\r\n            }\r\n            this.length++;\r\n        }\r\n        return this.length;\r\n    }\r\n    /**\r\n     * Adds given values to the beginning of this LinkedList\r\n     * @param values Values to be added\r\n     */\r\n    unshift(...values) {\r\n        for (const value of values) {\r\n            const item = new LinkedListItem_1.LinkedListItem(value, this.unlinkCleanup);\r\n            if (!this.last || !this.first) {\r\n                this.first = this.last = item;\r\n            }\r\n            else {\r\n                item.insertBehind(this.first);\r\n                this.first = item;\r\n            }\r\n            this.length++;\r\n        }\r\n        return this.length;\r\n    }\r\n    /**\r\n     * Removes first occurrence of value found.\r\n     * @param value value to remove from LinkedList\r\n     */\r\n    remove(value) {\r\n        for (const item of this.keys()) {\r\n            if (item.value === value) {\r\n                item.unlink();\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * Removes every occurrance of value within this.\r\n     * @param value value to remove from LinkedList\r\n     */\r\n    removeAllOccurrences(value) {\r\n        let foundSomethingToDelete = false;\r\n        for (const item of this.keys()) {\r\n            if (item.value === value) {\r\n                item.unlink();\r\n                foundSomethingToDelete = true;\r\n            }\r\n        }\r\n        return foundSomethingToDelete;\r\n    }\r\n    /**\r\n     * Returns and removes first element from LinkedList\r\n     */\r\n    shift() {\r\n        if (!this.first) {\r\n            return;\r\n        }\r\n        const item = this.first;\r\n        item.unlink();\r\n        return item.value;\r\n    }\r\n    /**\r\n     * Returns LinkedListItem and value for every entry of this LinkedList\r\n     */\r\n    *[Symbol.iterator]() {\r\n        let current = this.first;\r\n        if (!current) {\r\n            return;\r\n        }\r\n        do {\r\n            yield [current, current.value];\r\n            current = current.behind;\r\n        } while (current);\r\n    }\r\n    /**\r\n     * Returns LinkedListItem and value for every entry of this LinkedList\r\n     * @see LinkedList#Symbol.iterator\r\n     */\r\n    entries() {\r\n        return this[Symbol.iterator]();\r\n    }\r\n    /**\r\n     * Iterates the LinkedListItem's of this LinkedList\r\n     */\r\n    *keys() {\r\n        let current = this.first;\r\n        if (!current) {\r\n            return;\r\n        }\r\n        do {\r\n            yield current;\r\n            current = current.behind;\r\n        } while (current);\r\n    }\r\n    /**\r\n     * Returns a value for every entry of this LinkedList\r\n     */\r\n    *values() {\r\n        let current = this.first;\r\n        if (!current) {\r\n            return;\r\n        }\r\n        do {\r\n            yield current.value;\r\n            current = current.behind;\r\n        } while (current);\r\n    }\r\n    /**\r\n     * Returns the item by given index.\r\n     * Supports negative values and will return the item at `LinkedList.size - 1 + index` in that case.\r\n     * @param index Index of item to get from list\r\n     */\r\n    getItemByIndex(index) {\r\n        if (index === undefined) {\r\n            throw new Error(\"index must be a number!\");\r\n        }\r\n        if (!this.first) {\r\n            return;\r\n        }\r\n        let current;\r\n        if (index > 0) {\r\n            current = this.first;\r\n            while (current && index--) {\r\n                current = current.behind;\r\n            }\r\n        }\r\n        else if (index < 0) {\r\n            current = this.last;\r\n            while (current && ++index) {\r\n                current = current.before;\r\n            }\r\n        }\r\n        else {\r\n            return this.first;\r\n        }\r\n        return current;\r\n    }\r\n}\r\nexports.LinkedList = LinkedList;\r\n//# sourceMappingURL=LinkedList.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/x3-linkedlist/dist/LinkedList.js\n");

/***/ }),

/***/ "./node_modules/x3-linkedlist/dist/LinkedListItem.js":
/*!***********************************************************!*\
  !*** ./node_modules/x3-linkedlist/dist/LinkedListItem.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n/**\r\n * Represents an Item within LinkedList.\r\n * An item holds a value and the links to other LinkedListItem's\r\n * LinkedListItem's can only be attached behind.\r\n * Theirfor, to add one before, before has to add one behind.\r\n */\r\nclass LinkedListItem {\r\n    /**\r\n     * @param value Value to be held\r\n     * @param unlinkCleanup Function to run on unlink() call. Usually used by LinkedList to fix first and last pointers and reduce length.\r\n     */\r\n    constructor(value, \r\n    /**\r\n     *\r\n     */\r\n    unlinkCleanup) {\r\n        this.value = value;\r\n        this.unlinkCleanup = unlinkCleanup;\r\n    }\r\n    /**\r\n     * This will link given LinkListItem behind this item.\r\n     * If there's already a LinkedListItem linked behind, it will be relinked accordingly\r\n     * @param item LinkListItem to be inserted behind this one\r\n     */\r\n    insertBehind(item) {\r\n        item.insertBefore(this);\r\n        if (this.behind) {\r\n            let itemChainEnd = item;\r\n            while (itemChainEnd.behind)\r\n                itemChainEnd = itemChainEnd.behind;\r\n            this.behind.insertBefore(itemChainEnd);\r\n            itemChainEnd.insertBehind(this.behind);\r\n        }\r\n        this.behind = item;\r\n    }\r\n    /**\r\n     * Unlinks this LinkedListItem and calls unlinkCleanup\r\n     * @param unchain If true, additionally removes the reference to the item before and behind\r\n     * @see LinkedListItem#unlinkCleanup\r\n     */\r\n    unlink(unchain = false) {\r\n        if (this.before)\r\n            this.before.behind = this.behind;\r\n        if (this.behind) {\r\n            this.behind.before = this.before;\r\n        }\r\n        if (this.unlinkCleanup) {\r\n            this.unlinkCleanup(this);\r\n        }\r\n        this.unlinkCleanup = undefined;\r\n        if (unchain) {\r\n            this.before = this.behind = undefined;\r\n        }\r\n    }\r\n    /**\r\n     * Item given will be inserted before this item.\r\n     * unlinkCleanup will be copied if neccessary.\r\n     * This function is protected, because LinkedListItem's can only be attached behind.\r\n     *\r\n     * @param before\r\n     * @see insertBehind\r\n     */\r\n    insertBefore(before) {\r\n        this.before = before;\r\n        if (!this.unlinkCleanup) {\r\n            this.unlinkCleanup = before.unlinkCleanup;\r\n        }\r\n    }\r\n}\r\nexports.LinkedListItem = LinkedListItem;\r\n//# sourceMappingURL=LinkedListItem.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveDMtbGlua2VkbGlzdC9kaXN0L0xpbmtlZExpc3RJdGVtLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QiIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMveDMtbGlua2VkbGlzdC9kaXN0L0xpbmtlZExpc3RJdGVtLmpzP2QxMzUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuLyoqXHJcbiAqIFJlcHJlc2VudHMgYW4gSXRlbSB3aXRoaW4gTGlua2VkTGlzdC5cclxuICogQW4gaXRlbSBob2xkcyBhIHZhbHVlIGFuZCB0aGUgbGlua3MgdG8gb3RoZXIgTGlua2VkTGlzdEl0ZW0nc1xyXG4gKiBMaW5rZWRMaXN0SXRlbSdzIGNhbiBvbmx5IGJlIGF0dGFjaGVkIGJlaGluZC5cclxuICogVGhlaXJmb3IsIHRvIGFkZCBvbmUgYmVmb3JlLCBiZWZvcmUgaGFzIHRvIGFkZCBvbmUgYmVoaW5kLlxyXG4gKi9cclxuY2xhc3MgTGlua2VkTGlzdEl0ZW0ge1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgVmFsdWUgdG8gYmUgaGVsZFxyXG4gICAgICogQHBhcmFtIHVubGlua0NsZWFudXAgRnVuY3Rpb24gdG8gcnVuIG9uIHVubGluaygpIGNhbGwuIFVzdWFsbHkgdXNlZCBieSBMaW5rZWRMaXN0IHRvIGZpeCBmaXJzdCBhbmQgbGFzdCBwb2ludGVycyBhbmQgcmVkdWNlIGxlbmd0aC5cclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodmFsdWUsIFxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICovXHJcbiAgICB1bmxpbmtDbGVhbnVwKSB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMudW5saW5rQ2xlYW51cCA9IHVubGlua0NsZWFudXA7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgd2lsbCBsaW5rIGdpdmVuIExpbmtMaXN0SXRlbSBiZWhpbmQgdGhpcyBpdGVtLlxyXG4gICAgICogSWYgdGhlcmUncyBhbHJlYWR5IGEgTGlua2VkTGlzdEl0ZW0gbGlua2VkIGJlaGluZCwgaXQgd2lsbCBiZSByZWxpbmtlZCBhY2NvcmRpbmdseVxyXG4gICAgICogQHBhcmFtIGl0ZW0gTGlua0xpc3RJdGVtIHRvIGJlIGluc2VydGVkIGJlaGluZCB0aGlzIG9uZVxyXG4gICAgICovXHJcbiAgICBpbnNlcnRCZWhpbmQoaXRlbSkge1xyXG4gICAgICAgIGl0ZW0uaW5zZXJ0QmVmb3JlKHRoaXMpO1xyXG4gICAgICAgIGlmICh0aGlzLmJlaGluZCkge1xyXG4gICAgICAgICAgICBsZXQgaXRlbUNoYWluRW5kID0gaXRlbTtcclxuICAgICAgICAgICAgd2hpbGUgKGl0ZW1DaGFpbkVuZC5iZWhpbmQpXHJcbiAgICAgICAgICAgICAgICBpdGVtQ2hhaW5FbmQgPSBpdGVtQ2hhaW5FbmQuYmVoaW5kO1xyXG4gICAgICAgICAgICB0aGlzLmJlaGluZC5pbnNlcnRCZWZvcmUoaXRlbUNoYWluRW5kKTtcclxuICAgICAgICAgICAgaXRlbUNoYWluRW5kLmluc2VydEJlaGluZCh0aGlzLmJlaGluZCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYmVoaW5kID0gaXRlbTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVW5saW5rcyB0aGlzIExpbmtlZExpc3RJdGVtIGFuZCBjYWxscyB1bmxpbmtDbGVhbnVwXHJcbiAgICAgKiBAcGFyYW0gdW5jaGFpbiBJZiB0cnVlLCBhZGRpdGlvbmFsbHkgcmVtb3ZlcyB0aGUgcmVmZXJlbmNlIHRvIHRoZSBpdGVtIGJlZm9yZSBhbmQgYmVoaW5kXHJcbiAgICAgKiBAc2VlIExpbmtlZExpc3RJdGVtI3VubGlua0NsZWFudXBcclxuICAgICAqL1xyXG4gICAgdW5saW5rKHVuY2hhaW4gPSBmYWxzZSkge1xyXG4gICAgICAgIGlmICh0aGlzLmJlZm9yZSlcclxuICAgICAgICAgICAgdGhpcy5iZWZvcmUuYmVoaW5kID0gdGhpcy5iZWhpbmQ7XHJcbiAgICAgICAgaWYgKHRoaXMuYmVoaW5kKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYmVoaW5kLmJlZm9yZSA9IHRoaXMuYmVmb3JlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy51bmxpbmtDbGVhbnVwKSB7XHJcbiAgICAgICAgICAgIHRoaXMudW5saW5rQ2xlYW51cCh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy51bmxpbmtDbGVhbnVwID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIGlmICh1bmNoYWluKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYmVmb3JlID0gdGhpcy5iZWhpbmQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBJdGVtIGdpdmVuIHdpbGwgYmUgaW5zZXJ0ZWQgYmVmb3JlIHRoaXMgaXRlbS5cclxuICAgICAqIHVubGlua0NsZWFudXAgd2lsbCBiZSBjb3BpZWQgaWYgbmVjY2Vzc2FyeS5cclxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgcHJvdGVjdGVkLCBiZWNhdXNlIExpbmtlZExpc3RJdGVtJ3MgY2FuIG9ubHkgYmUgYXR0YWNoZWQgYmVoaW5kLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBiZWZvcmVcclxuICAgICAqIEBzZWUgaW5zZXJ0QmVoaW5kXHJcbiAgICAgKi9cclxuICAgIGluc2VydEJlZm9yZShiZWZvcmUpIHtcclxuICAgICAgICB0aGlzLmJlZm9yZSA9IGJlZm9yZTtcclxuICAgICAgICBpZiAoIXRoaXMudW5saW5rQ2xlYW51cCkge1xyXG4gICAgICAgICAgICB0aGlzLnVubGlua0NsZWFudXAgPSBiZWZvcmUudW5saW5rQ2xlYW51cDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5MaW5rZWRMaXN0SXRlbSA9IExpbmtlZExpc3RJdGVtO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1MaW5rZWRMaXN0SXRlbS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/x3-linkedlist/dist/LinkedListItem.js\n");

/***/ }),

/***/ "./node_modules/x3-linkedlist/dist/index.js":
/*!**************************************************!*\
  !*** ./node_modules/x3-linkedlist/dist/index.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\r\nfunction __export(m) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n__export(__webpack_require__(/*! ./LinkedList */ \"./node_modules/x3-linkedlist/dist/LinkedList.js\"));\r\n__export(__webpack_require__(/*! ./LinkedListItem */ \"./node_modules/x3-linkedlist/dist/LinkedListItem.js\"));\r\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveDMtbGlua2VkbGlzdC9kaXN0L2luZGV4LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELFNBQVMsbUJBQU8sQ0FBQyxxRUFBYztBQUMvQixTQUFTLG1CQUFPLENBQUMsNkVBQWtCO0FBQ25DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL25vZGVfbW9kdWxlcy94My1saW5rZWRsaXN0L2Rpc3QvaW5kZXguanM/YzJlOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuZnVuY3Rpb24gX19leHBvcnQobSkge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAoIWV4cG9ydHMuaGFzT3duUHJvcGVydHkocCkpIGV4cG9ydHNbcF0gPSBtW3BdO1xyXG59XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuX19leHBvcnQocmVxdWlyZShcIi4vTGlua2VkTGlzdFwiKSk7XHJcbl9fZXhwb3J0KHJlcXVpcmUoXCIuL0xpbmtlZExpc3RJdGVtXCIpKTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/x3-linkedlist/dist/index.js\n");

/***/ }),

/***/ "./node_modules/xhr/index.js":
/*!***********************************!*\
  !*** ./node_modules/xhr/index.js ***!
  \***********************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";
eval("\nvar window = __webpack_require__(/*! global/window */ \"./node_modules/global/window.js\")\nvar isFunction = __webpack_require__(/*! is-function */ \"./node_modules/is-function/index.js\")\nvar parseHeaders = __webpack_require__(/*! parse-headers */ \"./node_modules/parse-headers/parse-headers.js\")\nvar xtend = __webpack_require__(/*! xtend */ \"./node_modules/xtend/immutable.js\")\n\nmodule.exports = createXHR\n// Allow use of default import syntax in TypeScript\nmodule.exports[\"default\"] = createXHR;\ncreateXHR.XMLHttpRequest = window.XMLHttpRequest || noop\ncreateXHR.XDomainRequest = \"withCredentials\" in (new createXHR.XMLHttpRequest()) ? createXHR.XMLHttpRequest : window.XDomainRequest\n\nforEachArray([\"get\", \"put\", \"post\", \"patch\", \"head\", \"delete\"], function(method) {\n    createXHR[method === \"delete\" ? \"del\" : method] = function(uri, options, callback) {\n        options = initParams(uri, options, callback)\n        options.method = method.toUpperCase()\n        return _createXHR(options)\n    }\n})\n\nfunction forEachArray(array, iterator) {\n    for (var i = 0; i < array.length; i++) {\n        iterator(array[i])\n    }\n}\n\nfunction isEmpty(obj){\n    for(var i in obj){\n        if(obj.hasOwnProperty(i)) return false\n    }\n    return true\n}\n\nfunction initParams(uri, options, callback) {\n    var params = uri\n\n    if (isFunction(options)) {\n        callback = options\n        if (typeof uri === \"string\") {\n            params = {uri:uri}\n        }\n    } else {\n        params = xtend(options, {uri: uri})\n    }\n\n    params.callback = callback\n    return params\n}\n\nfunction createXHR(uri, options, callback) {\n    options = initParams(uri, options, callback)\n    return _createXHR(options)\n}\n\nfunction _createXHR(options) {\n    if(typeof options.callback === \"undefined\"){\n        throw new Error(\"callback argument missing\")\n    }\n\n    var called = false\n    var callback = function cbOnce(err, response, body){\n        if(!called){\n            called = true\n            options.callback(err, response, body)\n        }\n    }\n\n    function readystatechange() {\n        if (xhr.readyState === 4) {\n            setTimeout(loadFunc, 0)\n        }\n    }\n\n    function getBody() {\n        // Chrome with requestType=blob throws errors arround when even testing access to responseText\n        var body = undefined\n\n        if (xhr.response) {\n            body = xhr.response\n        } else {\n            body = xhr.responseText || getXml(xhr)\n        }\n\n        if (isJson) {\n            try {\n                body = JSON.parse(body)\n            } catch (e) {}\n        }\n\n        return body\n    }\n\n    function errorFunc(evt) {\n        clearTimeout(timeoutTimer)\n        if(!(evt instanceof Error)){\n            evt = new Error(\"\" + (evt || \"Unknown XMLHttpRequest Error\") )\n        }\n        evt.statusCode = 0\n        return callback(evt, failureResponse)\n    }\n\n    // will load the data & process the response in a special response object\n    function loadFunc() {\n        if (aborted) return\n        var status\n        clearTimeout(timeoutTimer)\n        if(options.useXDR && xhr.status===undefined) {\n            //IE8 CORS GET successful response doesn't have a status field, but body is fine\n            status = 200\n        } else {\n            status = (xhr.status === 1223 ? 204 : xhr.status)\n        }\n        var response = failureResponse\n        var err = null\n\n        if (status !== 0){\n            response = {\n                body: getBody(),\n                statusCode: status,\n                method: method,\n                headers: {},\n                url: uri,\n                rawRequest: xhr\n            }\n            if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE\n                response.headers = parseHeaders(xhr.getAllResponseHeaders())\n            }\n        } else {\n            err = new Error(\"Internal XMLHttpRequest Error\")\n        }\n        return callback(err, response, response.body)\n    }\n\n    var xhr = options.xhr || null\n\n    if (!xhr) {\n        if (options.cors || options.useXDR) {\n            xhr = new createXHR.XDomainRequest()\n        }else{\n            xhr = new createXHR.XMLHttpRequest()\n        }\n    }\n\n    var key\n    var aborted\n    var uri = xhr.url = options.uri || options.url\n    var method = xhr.method = options.method || \"GET\"\n    var body = options.body || options.data\n    var headers = xhr.headers = options.headers || {}\n    var sync = !!options.sync\n    var isJson = false\n    var timeoutTimer\n    var failureResponse = {\n        body: undefined,\n        headers: {},\n        statusCode: 0,\n        method: method,\n        url: uri,\n        rawRequest: xhr\n    }\n\n    if (\"json\" in options && options.json !== false) {\n        isJson = true\n        headers[\"accept\"] || headers[\"Accept\"] || (headers[\"Accept\"] = \"application/json\") //Don't override existing accept header declared by user\n        if (method !== \"GET\" && method !== \"HEAD\") {\n            headers[\"content-type\"] || headers[\"Content-Type\"] || (headers[\"Content-Type\"] = \"application/json\") //Don't override existing accept header declared by user\n            body = JSON.stringify(options.json === true ? body : options.json)\n        }\n    }\n\n    xhr.onreadystatechange = readystatechange\n    xhr.onload = loadFunc\n    xhr.onerror = errorFunc\n    // IE9 must have onprogress be set to a unique function.\n    xhr.onprogress = function () {\n        // IE must die\n    }\n    xhr.onabort = function(){\n        aborted = true;\n    }\n    xhr.ontimeout = errorFunc\n    xhr.open(method, uri, !sync, options.username, options.password)\n    //has to be after open\n    if(!sync) {\n        xhr.withCredentials = !!options.withCredentials\n    }\n    // Cannot set timeout with sync request\n    // not setting timeout on the xhr object, because of old webkits etc. not handling that correctly\n    // both npm's request and jquery 1.x use this kind of timeout, so this is being consistent\n    if (!sync && options.timeout > 0 ) {\n        timeoutTimer = setTimeout(function(){\n            if (aborted) return\n            aborted = true//IE9 may still call readystatechange\n            xhr.abort(\"timeout\")\n            var e = new Error(\"XMLHttpRequest timeout\")\n            e.code = \"ETIMEDOUT\"\n            errorFunc(e)\n        }, options.timeout )\n    }\n\n    if (xhr.setRequestHeader) {\n        for(key in headers){\n            if(headers.hasOwnProperty(key)){\n                xhr.setRequestHeader(key, headers[key])\n            }\n        }\n    } else if (options.headers && !isEmpty(options.headers)) {\n        throw new Error(\"Headers cannot be set on an XDomainRequest object\")\n    }\n\n    if (\"responseType\" in options) {\n        xhr.responseType = options.responseType\n    }\n\n    if (\"beforeSend\" in options &&\n        typeof options.beforeSend === \"function\"\n    ) {\n        options.beforeSend(xhr)\n    }\n\n    // Microsoft Edge browser sends \"undefined\" when send is called with undefined value.\n    // XMLHttpRequest spec says to pass null as body to indicate no body\n    // See https://github.com/naugtur/xhr/issues/100.\n    xhr.send(body || null)\n\n    return xhr\n\n\n}\n\nfunction getXml(xhr) {\n    // xhr.responseXML will throw Exception \"InvalidStateError\" or \"DOMException\"\n    // See https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseXML.\n    try {\n        if (xhr.responseType === \"document\") {\n            return xhr.responseXML\n        }\n        var firefoxBugTakenEffect = xhr.responseXML && xhr.responseXML.documentElement.nodeName === \"parsererror\"\n        if (xhr.responseType === \"\" && !firefoxBugTakenEffect) {\n            return xhr.responseXML\n        }\n    } catch (e) {}\n\n    return null\n}\n\nfunction noop() {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/xhr/index.js\n");

/***/ }),

/***/ "./node_modules/xtend/immutable.js":
/*!*****************************************!*\
  !*** ./node_modules/xtend/immutable.js ***!
  \*****************************************/
/***/ (function(module) {

eval("module.exports = extend\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction extend() {\n    var target = {}\n\n    for (var i = 0; i < arguments.length; i++) {\n        var source = arguments[i]\n\n        for (var key in source) {\n            if (hasOwnProperty.call(source, key)) {\n                target[key] = source[key]\n            }\n        }\n    }\n\n    return target\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMveHRlbmQvaW1tdXRhYmxlLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUEsb0JBQW9CLHNCQUFzQjtBQUMxQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMveHRlbmQvaW1tdXRhYmxlLmpzP2EwNTgiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBleHRlbmRcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuZnVuY3Rpb24gZXh0ZW5kKCkge1xuICAgIHZhciB0YXJnZXQgPSB7fVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXVxuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/xtend/immutable.js\n");

/***/ })

});